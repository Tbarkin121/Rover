
Rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b84  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004d48  08004d48  00014d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d60  08004d60  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08004d60  08004d60  00014d60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d68  08004d68  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d68  08004d68  00014d68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004d6c  08004d6c  00014d6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004d70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000022c  20000010  08004d80  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000023c  08004d80  0002023c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010896  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027e8  00000000  00000000  000308d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  000330c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  00033c20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024f62  00000000  00000000  00034678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f941  00000000  00000000  000595da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0012  00000000  00000000  00068f1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138f2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002e48  00000000  00000000  00138f80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000010 	.word	0x20000010
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004d30 	.word	0x08004d30

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000014 	.word	0x20000014
 8000200:	08004d30 	.word	0x08004d30

08000204 <__aeabi_drsub>:
 8000204:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000208:	e002      	b.n	8000210 <__adddf3>
 800020a:	bf00      	nop

0800020c <__aeabi_dsub>:
 800020c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000210 <__adddf3>:
 8000210:	b530      	push	{r4, r5, lr}
 8000212:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000216:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021a:	ea94 0f05 	teq	r4, r5
 800021e:	bf08      	it	eq
 8000220:	ea90 0f02 	teqeq	r0, r2
 8000224:	bf1f      	itttt	ne
 8000226:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800022e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000232:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000236:	f000 80e2 	beq.w	80003fe <__adddf3+0x1ee>
 800023a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800023e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000242:	bfb8      	it	lt
 8000244:	426d      	neglt	r5, r5
 8000246:	dd0c      	ble.n	8000262 <__adddf3+0x52>
 8000248:	442c      	add	r4, r5
 800024a:	ea80 0202 	eor.w	r2, r0, r2
 800024e:	ea81 0303 	eor.w	r3, r1, r3
 8000252:	ea82 0000 	eor.w	r0, r2, r0
 8000256:	ea83 0101 	eor.w	r1, r3, r1
 800025a:	ea80 0202 	eor.w	r2, r0, r2
 800025e:	ea81 0303 	eor.w	r3, r1, r3
 8000262:	2d36      	cmp	r5, #54	; 0x36
 8000264:	bf88      	it	hi
 8000266:	bd30      	pophi	{r4, r5, pc}
 8000268:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800026c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000270:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000274:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x70>
 800027a:	4240      	negs	r0, r0
 800027c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000280:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000284:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000288:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x84>
 800028e:	4252      	negs	r2, r2
 8000290:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000294:	ea94 0f05 	teq	r4, r5
 8000298:	f000 80a7 	beq.w	80003ea <__adddf3+0x1da>
 800029c:	f1a4 0401 	sub.w	r4, r4, #1
 80002a0:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a4:	db0d      	blt.n	80002c2 <__adddf3+0xb2>
 80002a6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002aa:	fa22 f205 	lsr.w	r2, r2, r5
 80002ae:	1880      	adds	r0, r0, r2
 80002b0:	f141 0100 	adc.w	r1, r1, #0
 80002b4:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b8:	1880      	adds	r0, r0, r2
 80002ba:	fa43 f305 	asr.w	r3, r3, r5
 80002be:	4159      	adcs	r1, r3
 80002c0:	e00e      	b.n	80002e0 <__adddf3+0xd0>
 80002c2:	f1a5 0520 	sub.w	r5, r5, #32
 80002c6:	f10e 0e20 	add.w	lr, lr, #32
 80002ca:	2a01      	cmp	r2, #1
 80002cc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d0:	bf28      	it	cs
 80002d2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	18c0      	adds	r0, r0, r3
 80002dc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e4:	d507      	bpl.n	80002f6 <__adddf3+0xe6>
 80002e6:	f04f 0e00 	mov.w	lr, #0
 80002ea:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ee:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f2:	eb6e 0101 	sbc.w	r1, lr, r1
 80002f6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fa:	d31b      	bcc.n	8000334 <__adddf3+0x124>
 80002fc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000300:	d30c      	bcc.n	800031c <__adddf3+0x10c>
 8000302:	0849      	lsrs	r1, r1, #1
 8000304:	ea5f 0030 	movs.w	r0, r0, rrx
 8000308:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800030c:	f104 0401 	add.w	r4, r4, #1
 8000310:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000314:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000318:	f080 809a 	bcs.w	8000450 <__adddf3+0x240>
 800031c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000320:	bf08      	it	eq
 8000322:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000326:	f150 0000 	adcs.w	r0, r0, #0
 800032a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800032e:	ea41 0105 	orr.w	r1, r1, r5
 8000332:	bd30      	pop	{r4, r5, pc}
 8000334:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000338:	4140      	adcs	r0, r0
 800033a:	eb41 0101 	adc.w	r1, r1, r1
 800033e:	3c01      	subs	r4, #1
 8000340:	bf28      	it	cs
 8000342:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000346:	d2e9      	bcs.n	800031c <__adddf3+0x10c>
 8000348:	f091 0f00 	teq	r1, #0
 800034c:	bf04      	itt	eq
 800034e:	4601      	moveq	r1, r0
 8000350:	2000      	moveq	r0, #0
 8000352:	fab1 f381 	clz	r3, r1
 8000356:	bf08      	it	eq
 8000358:	3320      	addeq	r3, #32
 800035a:	f1a3 030b 	sub.w	r3, r3, #11
 800035e:	f1b3 0220 	subs.w	r2, r3, #32
 8000362:	da0c      	bge.n	800037e <__adddf3+0x16e>
 8000364:	320c      	adds	r2, #12
 8000366:	dd08      	ble.n	800037a <__adddf3+0x16a>
 8000368:	f102 0c14 	add.w	ip, r2, #20
 800036c:	f1c2 020c 	rsb	r2, r2, #12
 8000370:	fa01 f00c 	lsl.w	r0, r1, ip
 8000374:	fa21 f102 	lsr.w	r1, r1, r2
 8000378:	e00c      	b.n	8000394 <__adddf3+0x184>
 800037a:	f102 0214 	add.w	r2, r2, #20
 800037e:	bfd8      	it	le
 8000380:	f1c2 0c20 	rsble	ip, r2, #32
 8000384:	fa01 f102 	lsl.w	r1, r1, r2
 8000388:	fa20 fc0c 	lsr.w	ip, r0, ip
 800038c:	bfdc      	itt	le
 800038e:	ea41 010c 	orrle.w	r1, r1, ip
 8000392:	4090      	lslle	r0, r2
 8000394:	1ae4      	subs	r4, r4, r3
 8000396:	bfa2      	ittt	ge
 8000398:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800039c:	4329      	orrge	r1, r5
 800039e:	bd30      	popge	{r4, r5, pc}
 80003a0:	ea6f 0404 	mvn.w	r4, r4
 80003a4:	3c1f      	subs	r4, #31
 80003a6:	da1c      	bge.n	80003e2 <__adddf3+0x1d2>
 80003a8:	340c      	adds	r4, #12
 80003aa:	dc0e      	bgt.n	80003ca <__adddf3+0x1ba>
 80003ac:	f104 0414 	add.w	r4, r4, #20
 80003b0:	f1c4 0220 	rsb	r2, r4, #32
 80003b4:	fa20 f004 	lsr.w	r0, r0, r4
 80003b8:	fa01 f302 	lsl.w	r3, r1, r2
 80003bc:	ea40 0003 	orr.w	r0, r0, r3
 80003c0:	fa21 f304 	lsr.w	r3, r1, r4
 80003c4:	ea45 0103 	orr.w	r1, r5, r3
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	f1c4 040c 	rsb	r4, r4, #12
 80003ce:	f1c4 0220 	rsb	r2, r4, #32
 80003d2:	fa20 f002 	lsr.w	r0, r0, r2
 80003d6:	fa01 f304 	lsl.w	r3, r1, r4
 80003da:	ea40 0003 	orr.w	r0, r0, r3
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	fa21 f004 	lsr.w	r0, r1, r4
 80003e6:	4629      	mov	r1, r5
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	f094 0f00 	teq	r4, #0
 80003ee:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f2:	bf06      	itte	eq
 80003f4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f8:	3401      	addeq	r4, #1
 80003fa:	3d01      	subne	r5, #1
 80003fc:	e74e      	b.n	800029c <__adddf3+0x8c>
 80003fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000402:	bf18      	it	ne
 8000404:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000408:	d029      	beq.n	800045e <__adddf3+0x24e>
 800040a:	ea94 0f05 	teq	r4, r5
 800040e:	bf08      	it	eq
 8000410:	ea90 0f02 	teqeq	r0, r2
 8000414:	d005      	beq.n	8000422 <__adddf3+0x212>
 8000416:	ea54 0c00 	orrs.w	ip, r4, r0
 800041a:	bf04      	itt	eq
 800041c:	4619      	moveq	r1, r3
 800041e:	4610      	moveq	r0, r2
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea91 0f03 	teq	r1, r3
 8000426:	bf1e      	ittt	ne
 8000428:	2100      	movne	r1, #0
 800042a:	2000      	movne	r0, #0
 800042c:	bd30      	popne	{r4, r5, pc}
 800042e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000432:	d105      	bne.n	8000440 <__adddf3+0x230>
 8000434:	0040      	lsls	r0, r0, #1
 8000436:	4149      	adcs	r1, r1
 8000438:	bf28      	it	cs
 800043a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800043e:	bd30      	pop	{r4, r5, pc}
 8000440:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000444:	bf3c      	itt	cc
 8000446:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044a:	bd30      	popcc	{r4, r5, pc}
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000450:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000454:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000458:	f04f 0000 	mov.w	r0, #0
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000462:	bf1a      	itte	ne
 8000464:	4619      	movne	r1, r3
 8000466:	4610      	movne	r0, r2
 8000468:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800046c:	bf1c      	itt	ne
 800046e:	460b      	movne	r3, r1
 8000470:	4602      	movne	r2, r0
 8000472:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000476:	bf06      	itte	eq
 8000478:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800047c:	ea91 0f03 	teqeq	r1, r3
 8000480:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	bf00      	nop

08000488 <__aeabi_ui2d>:
 8000488:	f090 0f00 	teq	r0, #0
 800048c:	bf04      	itt	eq
 800048e:	2100      	moveq	r1, #0
 8000490:	4770      	bxeq	lr
 8000492:	b530      	push	{r4, r5, lr}
 8000494:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000498:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049c:	f04f 0500 	mov.w	r5, #0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e750      	b.n	8000348 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_i2d>:
 80004a8:	f090 0f00 	teq	r0, #0
 80004ac:	bf04      	itt	eq
 80004ae:	2100      	moveq	r1, #0
 80004b0:	4770      	bxeq	lr
 80004b2:	b530      	push	{r4, r5, lr}
 80004b4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004bc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c0:	bf48      	it	mi
 80004c2:	4240      	negmi	r0, r0
 80004c4:	f04f 0100 	mov.w	r1, #0
 80004c8:	e73e      	b.n	8000348 <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_f2d>:
 80004cc:	0042      	lsls	r2, r0, #1
 80004ce:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d2:	ea4f 0131 	mov.w	r1, r1, rrx
 80004d6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004da:	bf1f      	itttt	ne
 80004dc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e8:	4770      	bxne	lr
 80004ea:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ee:	bf08      	it	eq
 80004f0:	4770      	bxeq	lr
 80004f2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004f6:	bf04      	itt	eq
 80004f8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000504:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000508:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800050c:	e71c      	b.n	8000348 <__adddf3+0x138>
 800050e:	bf00      	nop

08000510 <__aeabi_ul2d>:
 8000510:	ea50 0201 	orrs.w	r2, r0, r1
 8000514:	bf08      	it	eq
 8000516:	4770      	bxeq	lr
 8000518:	b530      	push	{r4, r5, lr}
 800051a:	f04f 0500 	mov.w	r5, #0
 800051e:	e00a      	b.n	8000536 <__aeabi_l2d+0x16>

08000520 <__aeabi_l2d>:
 8000520:	ea50 0201 	orrs.w	r2, r0, r1
 8000524:	bf08      	it	eq
 8000526:	4770      	bxeq	lr
 8000528:	b530      	push	{r4, r5, lr}
 800052a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800052e:	d502      	bpl.n	8000536 <__aeabi_l2d+0x16>
 8000530:	4240      	negs	r0, r0
 8000532:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000536:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800053e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000542:	f43f aed8 	beq.w	80002f6 <__adddf3+0xe6>
 8000546:	f04f 0203 	mov.w	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000556:	bf18      	it	ne
 8000558:	3203      	addne	r2, #3
 800055a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800055e:	f1c2 0320 	rsb	r3, r2, #32
 8000562:	fa00 fc03 	lsl.w	ip, r0, r3
 8000566:	fa20 f002 	lsr.w	r0, r0, r2
 800056a:	fa01 fe03 	lsl.w	lr, r1, r3
 800056e:	ea40 000e 	orr.w	r0, r0, lr
 8000572:	fa21 f102 	lsr.w	r1, r1, r2
 8000576:	4414      	add	r4, r2
 8000578:	e6bd      	b.n	80002f6 <__adddf3+0xe6>
 800057a:	bf00      	nop

0800057c <__aeabi_dmul>:
 800057c:	b570      	push	{r4, r5, r6, lr}
 800057e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000582:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000586:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058a:	bf1d      	ittte	ne
 800058c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000590:	ea94 0f0c 	teqne	r4, ip
 8000594:	ea95 0f0c 	teqne	r5, ip
 8000598:	f000 f8de 	bleq	8000758 <__aeabi_dmul+0x1dc>
 800059c:	442c      	add	r4, r5
 800059e:	ea81 0603 	eor.w	r6, r1, r3
 80005a2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005a6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005aa:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ae:	bf18      	it	ne
 80005b0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005bc:	d038      	beq.n	8000630 <__aeabi_dmul+0xb4>
 80005be:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c2:	f04f 0500 	mov.w	r5, #0
 80005c6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ca:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ce:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d2:	f04f 0600 	mov.w	r6, #0
 80005d6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005da:	f09c 0f00 	teq	ip, #0
 80005de:	bf18      	it	ne
 80005e0:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005e8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005ec:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f0:	d204      	bcs.n	80005fc <__aeabi_dmul+0x80>
 80005f2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005f6:	416d      	adcs	r5, r5
 80005f8:	eb46 0606 	adc.w	r6, r6, r6
 80005fc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000600:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000604:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000608:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800060c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000610:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000614:	bf88      	it	hi
 8000616:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061a:	d81e      	bhi.n	800065a <__aeabi_dmul+0xde>
 800061c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000620:	bf08      	it	eq
 8000622:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000626:	f150 0000 	adcs.w	r0, r0, #0
 800062a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800062e:	bd70      	pop	{r4, r5, r6, pc}
 8000630:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000634:	ea46 0101 	orr.w	r1, r6, r1
 8000638:	ea40 0002 	orr.w	r0, r0, r2
 800063c:	ea81 0103 	eor.w	r1, r1, r3
 8000640:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000644:	bfc2      	ittt	gt
 8000646:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800064e:	bd70      	popgt	{r4, r5, r6, pc}
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f04f 0e00 	mov.w	lr, #0
 8000658:	3c01      	subs	r4, #1
 800065a:	f300 80ab 	bgt.w	80007b4 <__aeabi_dmul+0x238>
 800065e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000662:	bfde      	ittt	le
 8000664:	2000      	movle	r0, #0
 8000666:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066a:	bd70      	pople	{r4, r5, r6, pc}
 800066c:	f1c4 0400 	rsb	r4, r4, #0
 8000670:	3c20      	subs	r4, #32
 8000672:	da35      	bge.n	80006e0 <__aeabi_dmul+0x164>
 8000674:	340c      	adds	r4, #12
 8000676:	dc1b      	bgt.n	80006b0 <__aeabi_dmul+0x134>
 8000678:	f104 0414 	add.w	r4, r4, #20
 800067c:	f1c4 0520 	rsb	r5, r4, #32
 8000680:	fa00 f305 	lsl.w	r3, r0, r5
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f205 	lsl.w	r2, r1, r5
 800068c:	ea40 0002 	orr.w	r0, r0, r2
 8000690:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000698:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800069c:	fa21 f604 	lsr.w	r6, r1, r4
 80006a0:	eb42 0106 	adc.w	r1, r2, r6
 80006a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006a8:	bf08      	it	eq
 80006aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ae:	bd70      	pop	{r4, r5, r6, pc}
 80006b0:	f1c4 040c 	rsb	r4, r4, #12
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f304 	lsl.w	r3, r0, r4
 80006bc:	fa20 f005 	lsr.w	r0, r0, r5
 80006c0:	fa01 f204 	lsl.w	r2, r1, r4
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d0:	f141 0100 	adc.w	r1, r1, #0
 80006d4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d8:	bf08      	it	eq
 80006da:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006de:	bd70      	pop	{r4, r5, r6, pc}
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f205 	lsl.w	r2, r0, r5
 80006e8:	ea4e 0e02 	orr.w	lr, lr, r2
 80006ec:	fa20 f304 	lsr.w	r3, r0, r4
 80006f0:	fa01 f205 	lsl.w	r2, r1, r5
 80006f4:	ea43 0302 	orr.w	r3, r3, r2
 80006f8:	fa21 f004 	lsr.w	r0, r1, r4
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000700:	fa21 f204 	lsr.w	r2, r1, r4
 8000704:	ea20 0002 	bic.w	r0, r0, r2
 8000708:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800070c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000710:	bf08      	it	eq
 8000712:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000716:	bd70      	pop	{r4, r5, r6, pc}
 8000718:	f094 0f00 	teq	r4, #0
 800071c:	d10f      	bne.n	800073e <__aeabi_dmul+0x1c2>
 800071e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000722:	0040      	lsls	r0, r0, #1
 8000724:	eb41 0101 	adc.w	r1, r1, r1
 8000728:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800072c:	bf08      	it	eq
 800072e:	3c01      	subeq	r4, #1
 8000730:	d0f7      	beq.n	8000722 <__aeabi_dmul+0x1a6>
 8000732:	ea41 0106 	orr.w	r1, r1, r6
 8000736:	f095 0f00 	teq	r5, #0
 800073a:	bf18      	it	ne
 800073c:	4770      	bxne	lr
 800073e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000742:	0052      	lsls	r2, r2, #1
 8000744:	eb43 0303 	adc.w	r3, r3, r3
 8000748:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 800074c:	bf08      	it	eq
 800074e:	3d01      	subeq	r5, #1
 8000750:	d0f7      	beq.n	8000742 <__aeabi_dmul+0x1c6>
 8000752:	ea43 0306 	orr.w	r3, r3, r6
 8000756:	4770      	bx	lr
 8000758:	ea94 0f0c 	teq	r4, ip
 800075c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000760:	bf18      	it	ne
 8000762:	ea95 0f0c 	teqne	r5, ip
 8000766:	d00c      	beq.n	8000782 <__aeabi_dmul+0x206>
 8000768:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800076c:	bf18      	it	ne
 800076e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000772:	d1d1      	bne.n	8000718 <__aeabi_dmul+0x19c>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000786:	bf06      	itte	eq
 8000788:	4610      	moveq	r0, r2
 800078a:	4619      	moveq	r1, r3
 800078c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000790:	d019      	beq.n	80007c6 <__aeabi_dmul+0x24a>
 8000792:	ea94 0f0c 	teq	r4, ip
 8000796:	d102      	bne.n	800079e <__aeabi_dmul+0x222>
 8000798:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800079c:	d113      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 800079e:	ea95 0f0c 	teq	r5, ip
 80007a2:	d105      	bne.n	80007b0 <__aeabi_dmul+0x234>
 80007a4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007a8:	bf1c      	itt	ne
 80007aa:	4610      	movne	r0, r2
 80007ac:	4619      	movne	r1, r3
 80007ae:	d10a      	bne.n	80007c6 <__aeabi_dmul+0x24a>
 80007b0:	ea81 0103 	eor.w	r1, r1, r3
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007bc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c0:	f04f 0000 	mov.w	r0, #0
 80007c4:	bd70      	pop	{r4, r5, r6, pc}
 80007c6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ca:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ce:	bd70      	pop	{r4, r5, r6, pc}

080007d0 <__aeabi_ddiv>:
 80007d0:	b570      	push	{r4, r5, r6, lr}
 80007d2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007d6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007da:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007de:	bf1d      	ittte	ne
 80007e0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e4:	ea94 0f0c 	teqne	r4, ip
 80007e8:	ea95 0f0c 	teqne	r5, ip
 80007ec:	f000 f8a7 	bleq	800093e <__aeabi_ddiv+0x16e>
 80007f0:	eba4 0405 	sub.w	r4, r4, r5
 80007f4:	ea81 0e03 	eor.w	lr, r1, r3
 80007f8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007fc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000800:	f000 8088 	beq.w	8000914 <__aeabi_ddiv+0x144>
 8000804:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000808:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 800080c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000810:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000814:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000818:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800081c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000820:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000824:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000828:	429d      	cmp	r5, r3
 800082a:	bf08      	it	eq
 800082c:	4296      	cmpeq	r6, r2
 800082e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000832:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000836:	d202      	bcs.n	800083e <__aeabi_ddiv+0x6e>
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	1ab6      	subs	r6, r6, r2
 8000840:	eb65 0503 	sbc.w	r5, r5, r3
 8000844:	085b      	lsrs	r3, r3, #1
 8000846:	ea4f 0232 	mov.w	r2, r2, rrx
 800084a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800084e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000852:	ebb6 0e02 	subs.w	lr, r6, r2
 8000856:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085a:	bf22      	ittt	cs
 800085c:	1ab6      	subcs	r6, r6, r2
 800085e:	4675      	movcs	r5, lr
 8000860:	ea40 000c 	orrcs.w	r0, r0, ip
 8000864:	085b      	lsrs	r3, r3, #1
 8000866:	ea4f 0232 	mov.w	r2, r2, rrx
 800086a:	ebb6 0e02 	subs.w	lr, r6, r2
 800086e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000872:	bf22      	ittt	cs
 8000874:	1ab6      	subcs	r6, r6, r2
 8000876:	4675      	movcs	r5, lr
 8000878:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800087c:	085b      	lsrs	r3, r3, #1
 800087e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000882:	ebb6 0e02 	subs.w	lr, r6, r2
 8000886:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088a:	bf22      	ittt	cs
 800088c:	1ab6      	subcs	r6, r6, r2
 800088e:	4675      	movcs	r5, lr
 8000890:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000894:	085b      	lsrs	r3, r3, #1
 8000896:	ea4f 0232 	mov.w	r2, r2, rrx
 800089a:	ebb6 0e02 	subs.w	lr, r6, r2
 800089e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a2:	bf22      	ittt	cs
 80008a4:	1ab6      	subcs	r6, r6, r2
 80008a6:	4675      	movcs	r5, lr
 80008a8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008ac:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b0:	d018      	beq.n	80008e4 <__aeabi_ddiv+0x114>
 80008b2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008b6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ba:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008be:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008c6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ca:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ce:	d1c0      	bne.n	8000852 <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	d10b      	bne.n	80008ee <__aeabi_ddiv+0x11e>
 80008d6:	ea41 0100 	orr.w	r1, r1, r0
 80008da:	f04f 0000 	mov.w	r0, #0
 80008de:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e2:	e7b6      	b.n	8000852 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008e8:	bf04      	itt	eq
 80008ea:	4301      	orreq	r1, r0
 80008ec:	2000      	moveq	r0, #0
 80008ee:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f2:	bf88      	it	hi
 80008f4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008f8:	f63f aeaf 	bhi.w	800065a <__aeabi_dmul+0xde>
 80008fc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000900:	bf04      	itt	eq
 8000902:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000906:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000918:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800091c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000920:	bfc2      	ittt	gt
 8000922:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000926:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092a:	bd70      	popgt	{r4, r5, r6, pc}
 800092c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000930:	f04f 0e00 	mov.w	lr, #0
 8000934:	3c01      	subs	r4, #1
 8000936:	e690      	b.n	800065a <__aeabi_dmul+0xde>
 8000938:	ea45 0e06 	orr.w	lr, r5, r6
 800093c:	e68d      	b.n	800065a <__aeabi_dmul+0xde>
 800093e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000942:	ea94 0f0c 	teq	r4, ip
 8000946:	bf08      	it	eq
 8000948:	ea95 0f0c 	teqeq	r5, ip
 800094c:	f43f af3b 	beq.w	80007c6 <__aeabi_dmul+0x24a>
 8000950:	ea94 0f0c 	teq	r4, ip
 8000954:	d10a      	bne.n	800096c <__aeabi_ddiv+0x19c>
 8000956:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095a:	f47f af34 	bne.w	80007c6 <__aeabi_dmul+0x24a>
 800095e:	ea95 0f0c 	teq	r5, ip
 8000962:	f47f af25 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e72c      	b.n	80007c6 <__aeabi_dmul+0x24a>
 800096c:	ea95 0f0c 	teq	r5, ip
 8000970:	d106      	bne.n	8000980 <__aeabi_ddiv+0x1b0>
 8000972:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000976:	f43f aefd 	beq.w	8000774 <__aeabi_dmul+0x1f8>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e722      	b.n	80007c6 <__aeabi_dmul+0x24a>
 8000980:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000984:	bf18      	it	ne
 8000986:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098a:	f47f aec5 	bne.w	8000718 <__aeabi_dmul+0x19c>
 800098e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000992:	f47f af0d 	bne.w	80007b0 <__aeabi_dmul+0x234>
 8000996:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099a:	f47f aeeb 	bne.w	8000774 <__aeabi_dmul+0x1f8>
 800099e:	e712      	b.n	80007c6 <__aeabi_dmul+0x24a>

080009a0 <__aeabi_d2iz>:
 80009a0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a8:	d215      	bcs.n	80009d6 <__aeabi_d2iz+0x36>
 80009aa:	d511      	bpl.n	80009d0 <__aeabi_d2iz+0x30>
 80009ac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b4:	d912      	bls.n	80009dc <__aeabi_d2iz+0x3c>
 80009b6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009be:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c6:	fa23 f002 	lsr.w	r0, r3, r2
 80009ca:	bf18      	it	ne
 80009cc:	4240      	negne	r0, r0
 80009ce:	4770      	bx	lr
 80009d0:	f04f 0000 	mov.w	r0, #0
 80009d4:	4770      	bx	lr
 80009d6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009da:	d105      	bne.n	80009e8 <__aeabi_d2iz+0x48>
 80009dc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e0:	bf08      	it	eq
 80009e2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e6:	4770      	bx	lr
 80009e8:	f04f 0000 	mov.w	r0, #0
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_uldivmod>:
 80009f0:	b953      	cbnz	r3, 8000a08 <__aeabi_uldivmod+0x18>
 80009f2:	b94a      	cbnz	r2, 8000a08 <__aeabi_uldivmod+0x18>
 80009f4:	2900      	cmp	r1, #0
 80009f6:	bf08      	it	eq
 80009f8:	2800      	cmpeq	r0, #0
 80009fa:	bf1c      	itt	ne
 80009fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000a00:	f04f 30ff 	movne.w	r0, #4294967295
 8000a04:	f000 b974 	b.w	8000cf0 <__aeabi_idiv0>
 8000a08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a10:	f000 f806 	bl	8000a20 <__udivmoddi4>
 8000a14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a1c:	b004      	add	sp, #16
 8000a1e:	4770      	bx	lr

08000a20 <__udivmoddi4>:
 8000a20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a24:	9d08      	ldr	r5, [sp, #32]
 8000a26:	4604      	mov	r4, r0
 8000a28:	468e      	mov	lr, r1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d14d      	bne.n	8000aca <__udivmoddi4+0xaa>
 8000a2e:	428a      	cmp	r2, r1
 8000a30:	4694      	mov	ip, r2
 8000a32:	d969      	bls.n	8000b08 <__udivmoddi4+0xe8>
 8000a34:	fab2 f282 	clz	r2, r2
 8000a38:	b152      	cbz	r2, 8000a50 <__udivmoddi4+0x30>
 8000a3a:	fa01 f302 	lsl.w	r3, r1, r2
 8000a3e:	f1c2 0120 	rsb	r1, r2, #32
 8000a42:	fa20 f101 	lsr.w	r1, r0, r1
 8000a46:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a4a:	ea41 0e03 	orr.w	lr, r1, r3
 8000a4e:	4094      	lsls	r4, r2
 8000a50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a54:	0c21      	lsrs	r1, r4, #16
 8000a56:	fbbe f6f8 	udiv	r6, lr, r8
 8000a5a:	fa1f f78c 	uxth.w	r7, ip
 8000a5e:	fb08 e316 	mls	r3, r8, r6, lr
 8000a62:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000a66:	fb06 f107 	mul.w	r1, r6, r7
 8000a6a:	4299      	cmp	r1, r3
 8000a6c:	d90a      	bls.n	8000a84 <__udivmoddi4+0x64>
 8000a6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000a72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a76:	f080 811f 	bcs.w	8000cb8 <__udivmoddi4+0x298>
 8000a7a:	4299      	cmp	r1, r3
 8000a7c:	f240 811c 	bls.w	8000cb8 <__udivmoddi4+0x298>
 8000a80:	3e02      	subs	r6, #2
 8000a82:	4463      	add	r3, ip
 8000a84:	1a5b      	subs	r3, r3, r1
 8000a86:	b2a4      	uxth	r4, r4
 8000a88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000a90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a94:	fb00 f707 	mul.w	r7, r0, r7
 8000a98:	42a7      	cmp	r7, r4
 8000a9a:	d90a      	bls.n	8000ab2 <__udivmoddi4+0x92>
 8000a9c:	eb1c 0404 	adds.w	r4, ip, r4
 8000aa0:	f100 33ff 	add.w	r3, r0, #4294967295
 8000aa4:	f080 810a 	bcs.w	8000cbc <__udivmoddi4+0x29c>
 8000aa8:	42a7      	cmp	r7, r4
 8000aaa:	f240 8107 	bls.w	8000cbc <__udivmoddi4+0x29c>
 8000aae:	4464      	add	r4, ip
 8000ab0:	3802      	subs	r0, #2
 8000ab2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ab6:	1be4      	subs	r4, r4, r7
 8000ab8:	2600      	movs	r6, #0
 8000aba:	b11d      	cbz	r5, 8000ac4 <__udivmoddi4+0xa4>
 8000abc:	40d4      	lsrs	r4, r2
 8000abe:	2300      	movs	r3, #0
 8000ac0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ac4:	4631      	mov	r1, r6
 8000ac6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aca:	428b      	cmp	r3, r1
 8000acc:	d909      	bls.n	8000ae2 <__udivmoddi4+0xc2>
 8000ace:	2d00      	cmp	r5, #0
 8000ad0:	f000 80ef 	beq.w	8000cb2 <__udivmoddi4+0x292>
 8000ad4:	2600      	movs	r6, #0
 8000ad6:	e9c5 0100 	strd	r0, r1, [r5]
 8000ada:	4630      	mov	r0, r6
 8000adc:	4631      	mov	r1, r6
 8000ade:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ae2:	fab3 f683 	clz	r6, r3
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d14a      	bne.n	8000b80 <__udivmoddi4+0x160>
 8000aea:	428b      	cmp	r3, r1
 8000aec:	d302      	bcc.n	8000af4 <__udivmoddi4+0xd4>
 8000aee:	4282      	cmp	r2, r0
 8000af0:	f200 80f9 	bhi.w	8000ce6 <__udivmoddi4+0x2c6>
 8000af4:	1a84      	subs	r4, r0, r2
 8000af6:	eb61 0303 	sbc.w	r3, r1, r3
 8000afa:	2001      	movs	r0, #1
 8000afc:	469e      	mov	lr, r3
 8000afe:	2d00      	cmp	r5, #0
 8000b00:	d0e0      	beq.n	8000ac4 <__udivmoddi4+0xa4>
 8000b02:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b06:	e7dd      	b.n	8000ac4 <__udivmoddi4+0xa4>
 8000b08:	b902      	cbnz	r2, 8000b0c <__udivmoddi4+0xec>
 8000b0a:	deff      	udf	#255	; 0xff
 8000b0c:	fab2 f282 	clz	r2, r2
 8000b10:	2a00      	cmp	r2, #0
 8000b12:	f040 8092 	bne.w	8000c3a <__udivmoddi4+0x21a>
 8000b16:	eba1 010c 	sub.w	r1, r1, ip
 8000b1a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b1e:	fa1f fe8c 	uxth.w	lr, ip
 8000b22:	2601      	movs	r6, #1
 8000b24:	0c20      	lsrs	r0, r4, #16
 8000b26:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b2a:	fb07 1113 	mls	r1, r7, r3, r1
 8000b2e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b32:	fb0e f003 	mul.w	r0, lr, r3
 8000b36:	4288      	cmp	r0, r1
 8000b38:	d908      	bls.n	8000b4c <__udivmoddi4+0x12c>
 8000b3a:	eb1c 0101 	adds.w	r1, ip, r1
 8000b3e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b42:	d202      	bcs.n	8000b4a <__udivmoddi4+0x12a>
 8000b44:	4288      	cmp	r0, r1
 8000b46:	f200 80cb 	bhi.w	8000ce0 <__udivmoddi4+0x2c0>
 8000b4a:	4643      	mov	r3, r8
 8000b4c:	1a09      	subs	r1, r1, r0
 8000b4e:	b2a4      	uxth	r4, r4
 8000b50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b54:	fb07 1110 	mls	r1, r7, r0, r1
 8000b58:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000b5c:	fb0e fe00 	mul.w	lr, lr, r0
 8000b60:	45a6      	cmp	lr, r4
 8000b62:	d908      	bls.n	8000b76 <__udivmoddi4+0x156>
 8000b64:	eb1c 0404 	adds.w	r4, ip, r4
 8000b68:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b6c:	d202      	bcs.n	8000b74 <__udivmoddi4+0x154>
 8000b6e:	45a6      	cmp	lr, r4
 8000b70:	f200 80bb 	bhi.w	8000cea <__udivmoddi4+0x2ca>
 8000b74:	4608      	mov	r0, r1
 8000b76:	eba4 040e 	sub.w	r4, r4, lr
 8000b7a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000b7e:	e79c      	b.n	8000aba <__udivmoddi4+0x9a>
 8000b80:	f1c6 0720 	rsb	r7, r6, #32
 8000b84:	40b3      	lsls	r3, r6
 8000b86:	fa22 fc07 	lsr.w	ip, r2, r7
 8000b8a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000b8e:	fa20 f407 	lsr.w	r4, r0, r7
 8000b92:	fa01 f306 	lsl.w	r3, r1, r6
 8000b96:	431c      	orrs	r4, r3
 8000b98:	40f9      	lsrs	r1, r7
 8000b9a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000b9e:	fa00 f306 	lsl.w	r3, r0, r6
 8000ba2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000ba6:	0c20      	lsrs	r0, r4, #16
 8000ba8:	fa1f fe8c 	uxth.w	lr, ip
 8000bac:	fb09 1118 	mls	r1, r9, r8, r1
 8000bb0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bb4:	fb08 f00e 	mul.w	r0, r8, lr
 8000bb8:	4288      	cmp	r0, r1
 8000bba:	fa02 f206 	lsl.w	r2, r2, r6
 8000bbe:	d90b      	bls.n	8000bd8 <__udivmoddi4+0x1b8>
 8000bc0:	eb1c 0101 	adds.w	r1, ip, r1
 8000bc4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000bc8:	f080 8088 	bcs.w	8000cdc <__udivmoddi4+0x2bc>
 8000bcc:	4288      	cmp	r0, r1
 8000bce:	f240 8085 	bls.w	8000cdc <__udivmoddi4+0x2bc>
 8000bd2:	f1a8 0802 	sub.w	r8, r8, #2
 8000bd6:	4461      	add	r1, ip
 8000bd8:	1a09      	subs	r1, r1, r0
 8000bda:	b2a4      	uxth	r4, r4
 8000bdc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000be0:	fb09 1110 	mls	r1, r9, r0, r1
 8000be4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000be8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000bec:	458e      	cmp	lr, r1
 8000bee:	d908      	bls.n	8000c02 <__udivmoddi4+0x1e2>
 8000bf0:	eb1c 0101 	adds.w	r1, ip, r1
 8000bf4:	f100 34ff 	add.w	r4, r0, #4294967295
 8000bf8:	d26c      	bcs.n	8000cd4 <__udivmoddi4+0x2b4>
 8000bfa:	458e      	cmp	lr, r1
 8000bfc:	d96a      	bls.n	8000cd4 <__udivmoddi4+0x2b4>
 8000bfe:	3802      	subs	r0, #2
 8000c00:	4461      	add	r1, ip
 8000c02:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c06:	fba0 9402 	umull	r9, r4, r0, r2
 8000c0a:	eba1 010e 	sub.w	r1, r1, lr
 8000c0e:	42a1      	cmp	r1, r4
 8000c10:	46c8      	mov	r8, r9
 8000c12:	46a6      	mov	lr, r4
 8000c14:	d356      	bcc.n	8000cc4 <__udivmoddi4+0x2a4>
 8000c16:	d053      	beq.n	8000cc0 <__udivmoddi4+0x2a0>
 8000c18:	b15d      	cbz	r5, 8000c32 <__udivmoddi4+0x212>
 8000c1a:	ebb3 0208 	subs.w	r2, r3, r8
 8000c1e:	eb61 010e 	sbc.w	r1, r1, lr
 8000c22:	fa01 f707 	lsl.w	r7, r1, r7
 8000c26:	fa22 f306 	lsr.w	r3, r2, r6
 8000c2a:	40f1      	lsrs	r1, r6
 8000c2c:	431f      	orrs	r7, r3
 8000c2e:	e9c5 7100 	strd	r7, r1, [r5]
 8000c32:	2600      	movs	r6, #0
 8000c34:	4631      	mov	r1, r6
 8000c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c3a:	f1c2 0320 	rsb	r3, r2, #32
 8000c3e:	40d8      	lsrs	r0, r3
 8000c40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c44:	fa21 f303 	lsr.w	r3, r1, r3
 8000c48:	4091      	lsls	r1, r2
 8000c4a:	4301      	orrs	r1, r0
 8000c4c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c50:	fa1f fe8c 	uxth.w	lr, ip
 8000c54:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c58:	fb07 3610 	mls	r6, r7, r0, r3
 8000c5c:	0c0b      	lsrs	r3, r1, #16
 8000c5e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000c62:	fb00 f60e 	mul.w	r6, r0, lr
 8000c66:	429e      	cmp	r6, r3
 8000c68:	fa04 f402 	lsl.w	r4, r4, r2
 8000c6c:	d908      	bls.n	8000c80 <__udivmoddi4+0x260>
 8000c6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000c72:	f100 38ff 	add.w	r8, r0, #4294967295
 8000c76:	d22f      	bcs.n	8000cd8 <__udivmoddi4+0x2b8>
 8000c78:	429e      	cmp	r6, r3
 8000c7a:	d92d      	bls.n	8000cd8 <__udivmoddi4+0x2b8>
 8000c7c:	3802      	subs	r0, #2
 8000c7e:	4463      	add	r3, ip
 8000c80:	1b9b      	subs	r3, r3, r6
 8000c82:	b289      	uxth	r1, r1
 8000c84:	fbb3 f6f7 	udiv	r6, r3, r7
 8000c88:	fb07 3316 	mls	r3, r7, r6, r3
 8000c8c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c90:	fb06 f30e 	mul.w	r3, r6, lr
 8000c94:	428b      	cmp	r3, r1
 8000c96:	d908      	bls.n	8000caa <__udivmoddi4+0x28a>
 8000c98:	eb1c 0101 	adds.w	r1, ip, r1
 8000c9c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ca0:	d216      	bcs.n	8000cd0 <__udivmoddi4+0x2b0>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d914      	bls.n	8000cd0 <__udivmoddi4+0x2b0>
 8000ca6:	3e02      	subs	r6, #2
 8000ca8:	4461      	add	r1, ip
 8000caa:	1ac9      	subs	r1, r1, r3
 8000cac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cb0:	e738      	b.n	8000b24 <__udivmoddi4+0x104>
 8000cb2:	462e      	mov	r6, r5
 8000cb4:	4628      	mov	r0, r5
 8000cb6:	e705      	b.n	8000ac4 <__udivmoddi4+0xa4>
 8000cb8:	4606      	mov	r6, r0
 8000cba:	e6e3      	b.n	8000a84 <__udivmoddi4+0x64>
 8000cbc:	4618      	mov	r0, r3
 8000cbe:	e6f8      	b.n	8000ab2 <__udivmoddi4+0x92>
 8000cc0:	454b      	cmp	r3, r9
 8000cc2:	d2a9      	bcs.n	8000c18 <__udivmoddi4+0x1f8>
 8000cc4:	ebb9 0802 	subs.w	r8, r9, r2
 8000cc8:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ccc:	3801      	subs	r0, #1
 8000cce:	e7a3      	b.n	8000c18 <__udivmoddi4+0x1f8>
 8000cd0:	4646      	mov	r6, r8
 8000cd2:	e7ea      	b.n	8000caa <__udivmoddi4+0x28a>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	e794      	b.n	8000c02 <__udivmoddi4+0x1e2>
 8000cd8:	4640      	mov	r0, r8
 8000cda:	e7d1      	b.n	8000c80 <__udivmoddi4+0x260>
 8000cdc:	46d0      	mov	r8, sl
 8000cde:	e77b      	b.n	8000bd8 <__udivmoddi4+0x1b8>
 8000ce0:	3b02      	subs	r3, #2
 8000ce2:	4461      	add	r1, ip
 8000ce4:	e732      	b.n	8000b4c <__udivmoddi4+0x12c>
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	e709      	b.n	8000afe <__udivmoddi4+0xde>
 8000cea:	4464      	add	r4, ip
 8000cec:	3802      	subs	r0, #2
 8000cee:	e742      	b.n	8000b76 <__udivmoddi4+0x156>

08000cf0 <__aeabi_idiv0>:
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop

08000cf4 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000cfa:	4a18      	ldr	r2, [pc, #96]	; (8000d5c <MX_CAN1_Init+0x68>)
 8000cfc:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000cfe:	4b16      	ldr	r3, [pc, #88]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000d00:	2203      	movs	r2, #3
 8000d02:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000d0a:	4b13      	ldr	r3, [pc, #76]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000d10:	4b11      	ldr	r3, [pc, #68]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000d12:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000d16:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000d18:	4b0f      	ldr	r3, [pc, #60]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000d1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000d1e:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000d20:	4b0d      	ldr	r3, [pc, #52]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000d26:	4b0c      	ldr	r3, [pc, #48]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000d2c:	4b0a      	ldr	r3, [pc, #40]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000d32:	4b09      	ldr	r3, [pc, #36]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000d38:	4b07      	ldr	r3, [pc, #28]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000d3e:	4b06      	ldr	r3, [pc, #24]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000d44:	4804      	ldr	r0, [pc, #16]	; (8000d58 <MX_CAN1_Init+0x64>)
 8000d46:	f000 ff91 	bl	8001c6c <HAL_CAN_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000d50:	f000 fc6a 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000d54:	bf00      	nop
 8000d56:	bd80      	pop	{r7, pc}
 8000d58:	2000002c 	.word	0x2000002c
 8000d5c:	40006400 	.word	0x40006400

08000d60 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b08a      	sub	sp, #40	; 0x28
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 0314 	add.w	r3, r7, #20
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a1d      	ldr	r2, [pc, #116]	; (8000df4 <HAL_CAN_MspInit+0x94>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d134      	bne.n	8000dec <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	613b      	str	r3, [r7, #16]
 8000d86:	4b1c      	ldr	r3, [pc, #112]	; (8000df8 <HAL_CAN_MspInit+0x98>)
 8000d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8a:	4a1b      	ldr	r2, [pc, #108]	; (8000df8 <HAL_CAN_MspInit+0x98>)
 8000d8c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d90:	6413      	str	r3, [r2, #64]	; 0x40
 8000d92:	4b19      	ldr	r3, [pc, #100]	; (8000df8 <HAL_CAN_MspInit+0x98>)
 8000d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d9a:	613b      	str	r3, [r7, #16]
 8000d9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d9e:	2300      	movs	r3, #0
 8000da0:	60fb      	str	r3, [r7, #12]
 8000da2:	4b15      	ldr	r3, [pc, #84]	; (8000df8 <HAL_CAN_MspInit+0x98>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	4a14      	ldr	r2, [pc, #80]	; (8000df8 <HAL_CAN_MspInit+0x98>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	6313      	str	r3, [r2, #48]	; 0x30
 8000dae:	4b12      	ldr	r3, [pc, #72]	; (8000df8 <HAL_CAN_MspInit+0x98>)
 8000db0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000dba:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000dbe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000dcc:	2309      	movs	r3, #9
 8000dce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd0:	f107 0314 	add.w	r3, r7, #20
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	4809      	ldr	r0, [pc, #36]	; (8000dfc <HAL_CAN_MspInit+0x9c>)
 8000dd8:	f001 fede 	bl	8002b98 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2100      	movs	r1, #0
 8000de0:	2014      	movs	r0, #20
 8000de2:	f001 fe80 	bl	8002ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000de6:	2014      	movs	r0, #20
 8000de8:	f001 fe99 	bl	8002b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000dec:	bf00      	nop
 8000dee:	3728      	adds	r7, #40	; 0x28
 8000df0:	46bd      	mov	sp, r7
 8000df2:	bd80      	pop	{r7, pc}
 8000df4:	40006400 	.word	0x40006400
 8000df8:	40023800 	.word	0x40023800
 8000dfc:	40020000 	.word	0x40020000

08000e00 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b08a      	sub	sp, #40	; 0x28
 8000e04:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e06:	f107 0314 	add.w	r3, r7, #20
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
 8000e14:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b2d      	ldr	r3, [pc, #180]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a2c      	ldr	r2, [pc, #176]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e20:	f043 0304 	orr.w	r3, r3, #4
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b2a      	ldr	r3, [pc, #168]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0304 	and.w	r3, r3, #4
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b26      	ldr	r3, [pc, #152]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3a:	4a25      	ldr	r2, [pc, #148]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e40:	6313      	str	r3, [r2, #48]	; 0x30
 8000e42:	4b23      	ldr	r3, [pc, #140]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a1e      	ldr	r2, [pc, #120]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e58:	f043 0301 	orr.w	r3, r3, #1
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0301 	and.w	r3, r3, #1
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b18      	ldr	r3, [pc, #96]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e72:	4a17      	ldr	r2, [pc, #92]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e74:	f043 0302 	orr.w	r3, r3, #2
 8000e78:	6313      	str	r3, [r2, #48]	; 0x30
 8000e7a:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_GPIO_Init+0xd0>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7e:	f003 0302 	and.w	r3, r3, #2
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2120      	movs	r1, #32
 8000e8a:	4812      	ldr	r0, [pc, #72]	; (8000ed4 <MX_GPIO_Init+0xd4>)
 8000e8c:	f002 f818 	bl	8002ec0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000e96:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000e9a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 0314 	add.w	r3, r7, #20
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	480c      	ldr	r0, [pc, #48]	; (8000ed8 <MX_GPIO_Init+0xd8>)
 8000ea8:	f001 fe76 	bl	8002b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eac:	2320      	movs	r3, #32
 8000eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eb0:	2301      	movs	r3, #1
 8000eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 0314 	add.w	r3, r7, #20
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4804      	ldr	r0, [pc, #16]	; (8000ed4 <MX_GPIO_Init+0xd4>)
 8000ec4:	f001 fe68 	bl	8002b98 <HAL_GPIO_Init>

}
 8000ec8:	bf00      	nop
 8000eca:	3728      	adds	r7, #40	; 0x28
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	40023800 	.word	0x40023800
 8000ed4:	40020000 	.word	0x40020000
 8000ed8:	40020800 	.word	0x40020800

08000edc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b096      	sub	sp, #88	; 0x58
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ee2:	f000 fe2d 	bl	8001b40 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee6:	f000 f9f9 	bl	80012dc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000eea:	f7ff ff89 	bl	8000e00 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000eee:	f000 fd8b 	bl	8001a08 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000ef2:	f7ff feff 	bl	8000cf4 <MX_CAN1_Init>
  MX_SPI2_Init();
 8000ef6:	f000 fc8d 	bl	8001814 <MX_SPI2_Init>
  /* USER CODE BEGIN 2 */

  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank = 10;
 8000efa:	230a      	movs	r3, #10
 8000efc:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000f02:	2301      	movs	r3, #1
 8000f04:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000f06:	2300      	movs	r3, #0
 8000f08:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000f0e:	2300      	movs	r3, #0
 8000f10:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000f22:	463b      	mov	r3, r7
 8000f24:	4619      	mov	r1, r3
 8000f26:	485d      	ldr	r0, [pc, #372]	; (800109c <main+0x1c0>)
 8000f28:	f000 ff9c 	bl	8001e64 <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 8000f2c:	485b      	ldr	r0, [pc, #364]	; (800109c <main+0x1c0>)
 8000f2e:	f001 f879 	bl	8002024 <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000f32:	2102      	movs	r1, #2
 8000f34:	4859      	ldr	r0, [pc, #356]	; (800109c <main+0x1c0>)
 8000f36:	f001 faa6 	bl	8002486 <HAL_CAN_ActivateNotification>

  TxHeader.IDE = CAN_ID_STD;			//Type of Identifier (Standard)
 8000f3a:	4b59      	ldr	r3, [pc, #356]	; (80010a0 <main+0x1c4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x200;				//Standard ID
 8000f40:	4b57      	ldr	r3, [pc, #348]	; (80010a0 <main+0x1c4>)
 8000f42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f46:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;			//
 8000f48:	4b55      	ldr	r3, [pc, #340]	; (80010a0 <main+0x1c4>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8; 					//Data Length
 8000f4e:	4b54      	ldr	r3, [pc, #336]	; (80010a0 <main+0x1c4>)
 8000f50:	2208      	movs	r2, #8
 8000f52:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000f54:	4b52      	ldr	r3, [pc, #328]	; (80010a0 <main+0x1c4>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	751a      	strb	r2, [r3, #20]

  float current1 = 0.0;
 8000f5a:	f04f 0300 	mov.w	r3, #0
 8000f5e:	657b      	str	r3, [r7, #84]	; 0x54
  float current2 = 0.0;
 8000f60:	f04f 0300 	mov.w	r3, #0
 8000f64:	653b      	str	r3, [r7, #80]	; 0x50
  float current3 = 0.0;
 8000f66:	f04f 0300 	mov.w	r3, #0
 8000f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  float current4 = 0.0;
 8000f6c:	f04f 0300 	mov.w	r3, #0
 8000f70:	64bb      	str	r3, [r7, #72]	; 0x48
  float target_vel1 = 0.0;
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	647b      	str	r3, [r7, #68]	; 0x44
  float target_vel2 = 0.0;
 8000f78:	f04f 0300 	mov.w	r3, #0
 8000f7c:	643b      	str	r3, [r7, #64]	; 0x40
  int16_t current_word1 = 0.0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	87fb      	strh	r3, [r7, #62]	; 0x3e
  int16_t current_word2 = 0.0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	87bb      	strh	r3, [r7, #60]	; 0x3c
  int16_t current_word3 = 0.0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	877b      	strh	r3, [r7, #58]	; 0x3a
  int16_t current_word4 = 0.0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	873b      	strh	r3, [r7, #56]	; 0x38
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  float kp_gain = 0.0001;
 8000f8e:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <main+0x1c8>)
 8000f90:	637b      	str	r3, [r7, #52]	; 0x34
  float ki_gain = 0.0001;
 8000f92:	4b44      	ldr	r3, [pc, #272]	; (80010a4 <main+0x1c8>)
 8000f94:	633b      	str	r3, [r7, #48]	; 0x30
  float kd_gain = 0.01;
 8000f96:	4b44      	ldr	r3, [pc, #272]	; (80010a8 <main+0x1cc>)
 8000f98:	62fb      	str	r3, [r7, #44]	; 0x2c
  float max_current = 5.0;
 8000f9a:	4b44      	ldr	r3, [pc, #272]	; (80010ac <main+0x1d0>)
 8000f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  motor1.PID_Init(kp_gain, ki_gain, kd_gain, max_current);
 8000f9e:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8000fa2:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8000fa6:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8000faa:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8000fae:	4840      	ldr	r0, [pc, #256]	; (80010b0 <main+0x1d4>)
 8000fb0:	f000 fb3f 	bl	8001632 <_ZN5Motor8PID_InitEffff>
  motor2.PID_Init(kp_gain, ki_gain, kd_gain, max_current);
 8000fb4:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8000fb8:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8000fbc:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8000fc0:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8000fc4:	483b      	ldr	r0, [pc, #236]	; (80010b4 <main+0x1d8>)
 8000fc6:	f000 fb34 	bl	8001632 <_ZN5Motor8PID_InitEffff>
  motor3.PID_Init(kp_gain, ki_gain, kd_gain, max_current);
 8000fca:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8000fce:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8000fd2:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8000fd6:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8000fda:	4837      	ldr	r0, [pc, #220]	; (80010b8 <main+0x1dc>)
 8000fdc:	f000 fb29 	bl	8001632 <_ZN5Motor8PID_InitEffff>
  motor4.PID_Init(kp_gain, ki_gain, kd_gain, max_current);
 8000fe0:	edd7 1a0a 	vldr	s3, [r7, #40]	; 0x28
 8000fe4:	ed97 1a0b 	vldr	s2, [r7, #44]	; 0x2c
 8000fe8:	edd7 0a0c 	vldr	s1, [r7, #48]	; 0x30
 8000fec:	ed97 0a0d 	vldr	s0, [r7, #52]	; 0x34
 8000ff0:	4832      	ldr	r0, [pc, #200]	; (80010bc <main+0x1e0>)
 8000ff2:	f000 fb1e 	bl	8001632 <_ZN5Motor8PID_InitEffff>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  spi_state = HAL_SPI_GetState(&hspi2);
 8000ff6:	4832      	ldr	r0, [pc, #200]	; (80010c0 <main+0x1e4>)
 8000ff8:	f003 f89e 	bl	8004138 <HAL_SPI_GetState>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b30      	ldr	r3, [pc, #192]	; (80010c4 <main+0x1e8>)
 8001002:	701a      	strb	r2, [r3, #0]
	  if(spi_state = HAL_SPI_STATE_READY)
 8001004:	4b2f      	ldr	r3, [pc, #188]	; (80010c4 <main+0x1e8>)
 8001006:	2201      	movs	r2, #1
 8001008:	701a      	strb	r2, [r3, #0]
 800100a:	2301      	movs	r3, #1
 800100c:	2b00      	cmp	r3, #0
 800100e:	d004      	beq.n	800101a <main+0x13e>
		  HAL_SPI_Receive_IT(&hspi2, (uint8_t *)spi_buf, SPI_BUFFER_SIZE);
 8001010:	2208      	movs	r2, #8
 8001012:	492d      	ldr	r1, [pc, #180]	; (80010c8 <main+0x1ec>)
 8001014:	482a      	ldr	r0, [pc, #168]	; (80010c0 <main+0x1e4>)
 8001016:	f002 fe49 	bl	8003cac <HAL_SPI_Receive_IT>

	  if( (loop_count - last_spi_msg)*dt > CTRL_TIMEOUT || loop_count*dt < STARTUP_TIME)
 800101a:	4b2c      	ldr	r3, [pc, #176]	; (80010cc <main+0x1f0>)
 800101c:	681a      	ldr	r2, [r3, #0]
 800101e:	4b2c      	ldr	r3, [pc, #176]	; (80010d0 <main+0x1f4>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	ee07 3a90 	vmov	s15, r3
 8001028:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800102c:	4b29      	ldr	r3, [pc, #164]	; (80010d4 <main+0x1f8>)
 800102e:	edd3 7a00 	vldr	s15, [r3]
 8001032:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001036:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800103a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800103e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001042:	dc11      	bgt.n	8001068 <main+0x18c>
 8001044:	4b21      	ldr	r3, [pc, #132]	; (80010cc <main+0x1f0>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	ee07 3a90 	vmov	s15, r3
 800104c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001050:	4b20      	ldr	r3, [pc, #128]	; (80010d4 <main+0x1f8>)
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800105a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800105e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001062:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001066:	d539      	bpl.n	80010dc <main+0x200>
	  {
		  vel_targ.vel_t_1 = 0.0;
 8001068:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <main+0x1fc>)
 800106a:	2200      	movs	r2, #0
 800106c:	801a      	strh	r2, [r3, #0]
		  vel_targ.vel_t_2 = 0.0;
 800106e:	4b1a      	ldr	r3, [pc, #104]	; (80010d8 <main+0x1fc>)
 8001070:	2200      	movs	r2, #0
 8001072:	805a      	strh	r2, [r3, #2]
		  vel_targ.vel_t_3 = 0.0;
 8001074:	4b18      	ldr	r3, [pc, #96]	; (80010d8 <main+0x1fc>)
 8001076:	2200      	movs	r2, #0
 8001078:	809a      	strh	r2, [r3, #4]
		  vel_targ.vel_t_4 = 0.0;
 800107a:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <main+0x1fc>)
 800107c:	2200      	movs	r2, #0
 800107e:	80da      	strh	r2, [r3, #6]
		  current1 = 0.0;
 8001080:	f04f 0300 	mov.w	r3, #0
 8001084:	657b      	str	r3, [r7, #84]	; 0x54
		  current2 = 0.0;
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	653b      	str	r3, [r7, #80]	; 0x50
		  current3 = 0.0;
 800108c:	f04f 0300 	mov.w	r3, #0
 8001090:	64fb      	str	r3, [r7, #76]	; 0x4c
		  current4 = 0.0;
 8001092:	f04f 0300 	mov.w	r3, #0
 8001096:	64bb      	str	r3, [r7, #72]	; 0x48
 8001098:	e058      	b.n	800114c <main+0x270>
 800109a:	bf00      	nop
 800109c:	2000002c 	.word	0x2000002c
 80010a0:	2000005c 	.word	0x2000005c
 80010a4:	38d1b717 	.word	0x38d1b717
 80010a8:	3c23d70a 	.word	0x3c23d70a
 80010ac:	40a00000 	.word	0x40a00000
 80010b0:	200000a8 	.word	0x200000a8
 80010b4:	200000e0 	.word	0x200000e0
 80010b8:	20000118 	.word	0x20000118
 80010bc:	20000150 	.word	0x20000150
 80010c0:	2000019c 	.word	0x2000019c
 80010c4:	20000198 	.word	0x20000198
 80010c8:	20000190 	.word	0x20000190
 80010cc:	20000054 	.word	0x20000054
 80010d0:	20000058 	.word	0x20000058
 80010d4:	20000000 	.word	0x20000000
 80010d8:	20000188 	.word	0x20000188
	  }
	  else
	  {
		  current1 = motor1.PID_Controller(vel_targ.vel_t_1);
 80010dc:	4b72      	ldr	r3, [pc, #456]	; (80012a8 <main+0x3cc>)
 80010de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80010e2:	ee07 3a90 	vmov	s15, r3
 80010e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80010ea:	eeb0 0a67 	vmov.f32	s0, s15
 80010ee:	486f      	ldr	r0, [pc, #444]	; (80012ac <main+0x3d0>)
 80010f0:	f000 faf0 	bl	80016d4 <_ZN5Motor14PID_ControllerEf>
 80010f4:	ed87 0a15 	vstr	s0, [r7, #84]	; 0x54
		  current2 = motor2.PID_Controller(vel_targ.vel_t_2);
 80010f8:	4b6b      	ldr	r3, [pc, #428]	; (80012a8 <main+0x3cc>)
 80010fa:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80010fe:	ee07 3a90 	vmov	s15, r3
 8001102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001106:	eeb0 0a67 	vmov.f32	s0, s15
 800110a:	4869      	ldr	r0, [pc, #420]	; (80012b0 <main+0x3d4>)
 800110c:	f000 fae2 	bl	80016d4 <_ZN5Motor14PID_ControllerEf>
 8001110:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
		  current3 = motor3.PID_Controller(vel_targ.vel_t_3);
 8001114:	4b64      	ldr	r3, [pc, #400]	; (80012a8 <main+0x3cc>)
 8001116:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800111a:	ee07 3a90 	vmov	s15, r3
 800111e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001122:	eeb0 0a67 	vmov.f32	s0, s15
 8001126:	4863      	ldr	r0, [pc, #396]	; (80012b4 <main+0x3d8>)
 8001128:	f000 fad4 	bl	80016d4 <_ZN5Motor14PID_ControllerEf>
 800112c:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
		  current4 = motor4.PID_Controller(vel_targ.vel_t_4);
 8001130:	4b5d      	ldr	r3, [pc, #372]	; (80012a8 <main+0x3cc>)
 8001132:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8001136:	ee07 3a90 	vmov	s15, r3
 800113a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	485d      	ldr	r0, [pc, #372]	; (80012b8 <main+0x3dc>)
 8001144:	f000 fac6 	bl	80016d4 <_ZN5Motor14PID_ControllerEf>
 8001148:	ed87 0a12 	vstr	s0, [r7, #72]	; 0x48
//		  motor3.PID_Set_Gains(kp_gain, ki_gain, kd_gain);
//		  motor4.PID_Set_Gains(kp_gain, ki_gain, kd_gain);
//
//
//	  }
	  current_word1 = (int16_t)(current1/20.0*16384);
 800114c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800114e:	f7ff f9bd 	bl	80004cc <__aeabi_f2d>
 8001152:	f04f 0200 	mov.w	r2, #0
 8001156:	4b59      	ldr	r3, [pc, #356]	; (80012bc <main+0x3e0>)
 8001158:	f7ff fb3a 	bl	80007d0 <__aeabi_ddiv>
 800115c:	4602      	mov	r2, r0
 800115e:	460b      	mov	r3, r1
 8001160:	4610      	mov	r0, r2
 8001162:	4619      	mov	r1, r3
 8001164:	f04f 0200 	mov.w	r2, #0
 8001168:	4b55      	ldr	r3, [pc, #340]	; (80012c0 <main+0x3e4>)
 800116a:	f7ff fa07 	bl	800057c <__aeabi_dmul>
 800116e:	4602      	mov	r2, r0
 8001170:	460b      	mov	r3, r1
 8001172:	4610      	mov	r0, r2
 8001174:	4619      	mov	r1, r3
 8001176:	f7ff fc13 	bl	80009a0 <__aeabi_d2iz>
 800117a:	4603      	mov	r3, r0
 800117c:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  current_word2 = (int16_t)(current2/20.0*16384);
 800117e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8001180:	f7ff f9a4 	bl	80004cc <__aeabi_f2d>
 8001184:	f04f 0200 	mov.w	r2, #0
 8001188:	4b4c      	ldr	r3, [pc, #304]	; (80012bc <main+0x3e0>)
 800118a:	f7ff fb21 	bl	80007d0 <__aeabi_ddiv>
 800118e:	4602      	mov	r2, r0
 8001190:	460b      	mov	r3, r1
 8001192:	4610      	mov	r0, r2
 8001194:	4619      	mov	r1, r3
 8001196:	f04f 0200 	mov.w	r2, #0
 800119a:	4b49      	ldr	r3, [pc, #292]	; (80012c0 <main+0x3e4>)
 800119c:	f7ff f9ee 	bl	800057c <__aeabi_dmul>
 80011a0:	4602      	mov	r2, r0
 80011a2:	460b      	mov	r3, r1
 80011a4:	4610      	mov	r0, r2
 80011a6:	4619      	mov	r1, r3
 80011a8:	f7ff fbfa 	bl	80009a0 <__aeabi_d2iz>
 80011ac:	4603      	mov	r3, r0
 80011ae:	87bb      	strh	r3, [r7, #60]	; 0x3c
	  current_word3 = (int16_t)(current3/20.0*16384);
 80011b0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 80011b2:	f7ff f98b 	bl	80004cc <__aeabi_f2d>
 80011b6:	f04f 0200 	mov.w	r2, #0
 80011ba:	4b40      	ldr	r3, [pc, #256]	; (80012bc <main+0x3e0>)
 80011bc:	f7ff fb08 	bl	80007d0 <__aeabi_ddiv>
 80011c0:	4602      	mov	r2, r0
 80011c2:	460b      	mov	r3, r1
 80011c4:	4610      	mov	r0, r2
 80011c6:	4619      	mov	r1, r3
 80011c8:	f04f 0200 	mov.w	r2, #0
 80011cc:	4b3c      	ldr	r3, [pc, #240]	; (80012c0 <main+0x3e4>)
 80011ce:	f7ff f9d5 	bl	800057c <__aeabi_dmul>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	4610      	mov	r0, r2
 80011d8:	4619      	mov	r1, r3
 80011da:	f7ff fbe1 	bl	80009a0 <__aeabi_d2iz>
 80011de:	4603      	mov	r3, r0
 80011e0:	877b      	strh	r3, [r7, #58]	; 0x3a
	  current_word4 = (int16_t)(current4/20.0*16384);
 80011e2:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80011e4:	f7ff f972 	bl	80004cc <__aeabi_f2d>
 80011e8:	f04f 0200 	mov.w	r2, #0
 80011ec:	4b33      	ldr	r3, [pc, #204]	; (80012bc <main+0x3e0>)
 80011ee:	f7ff faef 	bl	80007d0 <__aeabi_ddiv>
 80011f2:	4602      	mov	r2, r0
 80011f4:	460b      	mov	r3, r1
 80011f6:	4610      	mov	r0, r2
 80011f8:	4619      	mov	r1, r3
 80011fa:	f04f 0200 	mov.w	r2, #0
 80011fe:	4b30      	ldr	r3, [pc, #192]	; (80012c0 <main+0x3e4>)
 8001200:	f7ff f9bc 	bl	800057c <__aeabi_dmul>
 8001204:	4602      	mov	r2, r0
 8001206:	460b      	mov	r3, r1
 8001208:	4610      	mov	r0, r2
 800120a:	4619      	mov	r1, r3
 800120c:	f7ff fbc8 	bl	80009a0 <__aeabi_d2iz>
 8001210:	4603      	mov	r3, r0
 8001212:	873b      	strh	r3, [r7, #56]	; 0x38
	  TxData[0] = current_word1 >> 8;
 8001214:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001218:	121b      	asrs	r3, r3, #8
 800121a:	b21b      	sxth	r3, r3
 800121c:	b2da      	uxtb	r2, r3
 800121e:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <main+0x3e8>)
 8001220:	701a      	strb	r2, [r3, #0]
	  TxData[1] = (int8_t)(current_word1 & 0x00ff);
 8001222:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8001224:	b2da      	uxtb	r2, r3
 8001226:	4b27      	ldr	r3, [pc, #156]	; (80012c4 <main+0x3e8>)
 8001228:	705a      	strb	r2, [r3, #1]
	  TxData[2] = current_word2 >> 8;
 800122a:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800122e:	121b      	asrs	r3, r3, #8
 8001230:	b21b      	sxth	r3, r3
 8001232:	b2da      	uxtb	r2, r3
 8001234:	4b23      	ldr	r3, [pc, #140]	; (80012c4 <main+0x3e8>)
 8001236:	709a      	strb	r2, [r3, #2]
	  TxData[3] = (int8_t)(current_word2 & 0x00ff);
 8001238:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800123a:	b2da      	uxtb	r2, r3
 800123c:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <main+0x3e8>)
 800123e:	70da      	strb	r2, [r3, #3]
	  TxData[4] = current_word3 >> 8;
 8001240:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001244:	121b      	asrs	r3, r3, #8
 8001246:	b21b      	sxth	r3, r3
 8001248:	b2da      	uxtb	r2, r3
 800124a:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <main+0x3e8>)
 800124c:	711a      	strb	r2, [r3, #4]
	  TxData[5] = (int8_t)(current_word3 & 0x00ff);
 800124e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8001250:	b2da      	uxtb	r2, r3
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <main+0x3e8>)
 8001254:	715a      	strb	r2, [r3, #5]
	  TxData[6] = current_word4 >> 8;
 8001256:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 800125a:	121b      	asrs	r3, r3, #8
 800125c:	b21b      	sxth	r3, r3
 800125e:	b2da      	uxtb	r2, r3
 8001260:	4b18      	ldr	r3, [pc, #96]	; (80012c4 <main+0x3e8>)
 8001262:	719a      	strb	r2, [r3, #6]
	  TxData[7] = (int8_t)(current_word4 & 0x00ff);
 8001264:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001266:	b2da      	uxtb	r2, r3
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <main+0x3e8>)
 800126a:	71da      	strb	r2, [r3, #7]

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800126c:	2120      	movs	r1, #32
 800126e:	4816      	ldr	r0, [pc, #88]	; (80012c8 <main+0x3ec>)
 8001270:	f001 fe3f 	bl	8002ef2 <HAL_GPIO_TogglePin>


	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 8001274:	4b15      	ldr	r3, [pc, #84]	; (80012cc <main+0x3f0>)
 8001276:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <main+0x3e8>)
 8001278:	4915      	ldr	r1, [pc, #84]	; (80012d0 <main+0x3f4>)
 800127a:	4816      	ldr	r0, [pc, #88]	; (80012d4 <main+0x3f8>)
 800127c:	f000 ff16 	bl	80020ac <HAL_CAN_AddTxMessage>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	bf14      	ite	ne
 8001286:	2301      	movne	r3, #1
 8001288:	2300      	moveq	r3, #0
 800128a:	b2db      	uxtb	r3, r3
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <main+0x3b8>
	  {
		 Error_Handler ();
 8001290:	f000 f9ca 	bl	8001628 <Error_Handler>
	  }



	  /* Wait 1 second */
	  HAL_Delay(1);
 8001294:	2001      	movs	r0, #1
 8001296:	f000 fcc5 	bl	8001c24 <HAL_Delay>
	  loop_count++;
 800129a:	4b0f      	ldr	r3, [pc, #60]	; (80012d8 <main+0x3fc>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	3301      	adds	r3, #1
 80012a0:	4a0d      	ldr	r2, [pc, #52]	; (80012d8 <main+0x3fc>)
 80012a2:	6013      	str	r3, [r2, #0]
	  spi_state = HAL_SPI_GetState(&hspi2);
 80012a4:	e6a7      	b.n	8000ff6 <main+0x11a>
 80012a6:	bf00      	nop
 80012a8:	20000188 	.word	0x20000188
 80012ac:	200000a8 	.word	0x200000a8
 80012b0:	200000e0 	.word	0x200000e0
 80012b4:	20000118 	.word	0x20000118
 80012b8:	20000150 	.word	0x20000150
 80012bc:	40340000 	.word	0x40340000
 80012c0:	40d00000 	.word	0x40d00000
 80012c4:	20000094 	.word	0x20000094
 80012c8:	40020000 	.word	0x40020000
 80012cc:	20000090 	.word	0x20000090
 80012d0:	2000005c 	.word	0x2000005c
 80012d4:	2000002c 	.word	0x2000002c
 80012d8:	20000054 	.word	0x20000054

080012dc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b094      	sub	sp, #80	; 0x50
 80012e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012e2:	f107 031c 	add.w	r3, r7, #28
 80012e6:	2234      	movs	r2, #52	; 0x34
 80012e8:	2100      	movs	r1, #0
 80012ea:	4618      	mov	r0, r3
 80012ec:	f003 fd18 	bl	8004d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f0:	f107 0308 	add.w	r3, r7, #8
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]
 80012fa:	609a      	str	r2, [r3, #8]
 80012fc:	60da      	str	r2, [r3, #12]
 80012fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001300:	2300      	movs	r3, #0
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	4b34      	ldr	r3, [pc, #208]	; (80013d8 <_Z18SystemClock_Configv+0xfc>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	4a33      	ldr	r2, [pc, #204]	; (80013d8 <_Z18SystemClock_Configv+0xfc>)
 800130a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800130e:	6413      	str	r3, [r2, #64]	; 0x40
 8001310:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <_Z18SystemClock_Configv+0xfc>)
 8001312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800131c:	2300      	movs	r3, #0
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	4b2e      	ldr	r3, [pc, #184]	; (80013dc <_Z18SystemClock_Configv+0x100>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a2d      	ldr	r2, [pc, #180]	; (80013dc <_Z18SystemClock_Configv+0x100>)
 8001326:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800132a:	6013      	str	r3, [r2, #0]
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <_Z18SystemClock_Configv+0x100>)
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001338:	2302      	movs	r3, #2
 800133a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800133c:	2301      	movs	r3, #1
 800133e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001340:	2310      	movs	r3, #16
 8001342:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001344:	2302      	movs	r3, #2
 8001346:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001348:	2300      	movs	r3, #0
 800134a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 800134c:	2308      	movs	r3, #8
 800134e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001350:	23b4      	movs	r3, #180	; 0xb4
 8001352:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001354:	2302      	movs	r3, #2
 8001356:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001358:	2302      	movs	r3, #2
 800135a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800135c:	2302      	movs	r3, #2
 800135e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001360:	f107 031c 	add.w	r3, r7, #28
 8001364:	4618      	mov	r0, r3
 8001366:	f002 f979 	bl	800365c <HAL_RCC_OscConfig>
 800136a:	4603      	mov	r3, r0
 800136c:	2b00      	cmp	r3, #0
 800136e:	bf14      	ite	ne
 8001370:	2301      	movne	r3, #1
 8001372:	2300      	moveq	r3, #0
 8001374:	b2db      	uxtb	r3, r3
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 800137a:	f000 f955 	bl	8001628 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800137e:	f001 fdd3 	bl	8002f28 <HAL_PWREx_EnableOverDrive>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	bf14      	ite	ne
 8001388:	2301      	movne	r3, #1
 800138a:	2300      	moveq	r3, #0
 800138c:	b2db      	uxtb	r3, r3
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8001392:	f000 f949 	bl	8001628 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001396:	230f      	movs	r3, #15
 8001398:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800139a:	2302      	movs	r3, #2
 800139c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139e:	2300      	movs	r3, #0
 80013a0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013a2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ac:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	2105      	movs	r1, #5
 80013b4:	4618      	mov	r0, r3
 80013b6:	f001 fe07 	bl	8002fc8 <HAL_RCC_ClockConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	bf14      	ite	ne
 80013c0:	2301      	movne	r3, #1
 80013c2:	2300      	moveq	r3, #0
 80013c4:	b2db      	uxtb	r3, r3
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d001      	beq.n	80013ce <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 80013ca:	f000 f92d 	bl	8001628 <Error_Handler>
  }
}
 80013ce:	bf00      	nop
 80013d0:	3750      	adds	r7, #80	; 0x50
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	40023800 	.word	0x40023800
 80013dc:	40007000 	.word	0x40007000

080013e0 <HAL_CAN_RxFifo0MsgPendingCallback>:
/**
  * @brief  CAN Receive Callback Function
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
	count++;
 80013e8:	4b67      	ldr	r3, [pc, #412]	; (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	3301      	adds	r3, #1
 80013ee:	4a66      	ldr	r2, [pc, #408]	; (8001588 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a8>)
 80013f0:	6013      	str	r3, [r2, #0]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80013f2:	4b66      	ldr	r3, [pc, #408]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80013f4:	4a66      	ldr	r2, [pc, #408]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80013f6:	2100      	movs	r1, #0
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f000 ff32 	bl	8002262 <HAL_CAN_GetRxMessage>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	bf14      	ite	ne
 8001404:	2301      	movne	r3, #1
 8001406:	2300      	moveq	r3, #0
 8001408:	b2db      	uxtb	r3, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
  {
    Error_Handler();
 800140e:	f000 f90b 	bl	8001628 <Error_Handler>
  }
//
  if ((RxHeader.StdId == 0x201))
 8001412:	4b5f      	ldr	r3, [pc, #380]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f240 2201 	movw	r2, #513	; 0x201
 800141a:	4293      	cmp	r3, r2
 800141c:	d127      	bne.n	800146e <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
  {
	  motor1.state.Ang = RxData[0]<<8 | RxData[1];
 800141e:	4b5b      	ldr	r3, [pc, #364]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001420:	781b      	ldrb	r3, [r3, #0]
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	b21a      	sxth	r2, r3
 8001426:	4b59      	ldr	r3, [pc, #356]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001428:	785b      	ldrb	r3, [r3, #1]
 800142a:	b21b      	sxth	r3, r3
 800142c:	4313      	orrs	r3, r2
 800142e:	b21a      	sxth	r2, r3
 8001430:	4b58      	ldr	r3, [pc, #352]	; (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8001432:	861a      	strh	r2, [r3, #48]	; 0x30
	  motor1.state.Vel = RxData[2]<<8 | RxData[3];
 8001434:	4b55      	ldr	r3, [pc, #340]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001436:	789b      	ldrb	r3, [r3, #2]
 8001438:	021b      	lsls	r3, r3, #8
 800143a:	b21a      	sxth	r2, r3
 800143c:	4b53      	ldr	r3, [pc, #332]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800143e:	78db      	ldrb	r3, [r3, #3]
 8001440:	b21b      	sxth	r3, r3
 8001442:	4313      	orrs	r3, r2
 8001444:	b21a      	sxth	r2, r3
 8001446:	4b53      	ldr	r3, [pc, #332]	; (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8001448:	865a      	strh	r2, [r3, #50]	; 0x32
	  motor1.state.Torq = RxData[4]<<8 | RxData[5];
 800144a:	4b50      	ldr	r3, [pc, #320]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800144c:	791b      	ldrb	r3, [r3, #4]
 800144e:	021b      	lsls	r3, r3, #8
 8001450:	b21a      	sxth	r2, r3
 8001452:	4b4e      	ldr	r3, [pc, #312]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001454:	795b      	ldrb	r3, [r3, #5]
 8001456:	b21b      	sxth	r3, r3
 8001458:	4313      	orrs	r3, r2
 800145a:	b21a      	sxth	r2, r3
 800145c:	4b4d      	ldr	r3, [pc, #308]	; (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 800145e:	869a      	strh	r2, [r3, #52]	; 0x34
	  motor1.state.Temp = RxData[6];
 8001460:	4b4a      	ldr	r3, [pc, #296]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001462:	799b      	ldrb	r3, [r3, #6]
 8001464:	b25a      	sxtb	r2, r3
 8001466:	4b4b      	ldr	r3, [pc, #300]	; (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b4>)
 8001468:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  	  motor4.state.Ang = RxData[0]<<8 | RxData[1];
  	  motor4.state.Vel = RxData[2]<<8 | RxData[3];
  	  motor4.state.Torq = RxData[4]<<8 | RxData[5];
  	  motor4.state.Temp = RxData[6];
    }
}
 800146c:	e087      	b.n	800157e <HAL_CAN_RxFifo0MsgPendingCallback+0x19e>
  else if((RxHeader.StdId == 0x202))
 800146e:	4b48      	ldr	r3, [pc, #288]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f240 2202 	movw	r2, #514	; 0x202
 8001476:	4293      	cmp	r3, r2
 8001478:	d127      	bne.n	80014ca <HAL_CAN_RxFifo0MsgPendingCallback+0xea>
  	  motor2.state.Ang = RxData[0]<<8 | RxData[1];
 800147a:	4b44      	ldr	r3, [pc, #272]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	021b      	lsls	r3, r3, #8
 8001480:	b21a      	sxth	r2, r3
 8001482:	4b42      	ldr	r3, [pc, #264]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001484:	785b      	ldrb	r3, [r3, #1]
 8001486:	b21b      	sxth	r3, r3
 8001488:	4313      	orrs	r3, r2
 800148a:	b21a      	sxth	r2, r3
 800148c:	4b42      	ldr	r3, [pc, #264]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 800148e:	861a      	strh	r2, [r3, #48]	; 0x30
  	  motor2.state.Vel = RxData[2]<<8 | RxData[3];
 8001490:	4b3e      	ldr	r3, [pc, #248]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001492:	789b      	ldrb	r3, [r3, #2]
 8001494:	021b      	lsls	r3, r3, #8
 8001496:	b21a      	sxth	r2, r3
 8001498:	4b3c      	ldr	r3, [pc, #240]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800149a:	78db      	ldrb	r3, [r3, #3]
 800149c:	b21b      	sxth	r3, r3
 800149e:	4313      	orrs	r3, r2
 80014a0:	b21a      	sxth	r2, r3
 80014a2:	4b3d      	ldr	r3, [pc, #244]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80014a4:	865a      	strh	r2, [r3, #50]	; 0x32
  	  motor2.state.Torq = RxData[4]<<8 | RxData[5];
 80014a6:	4b39      	ldr	r3, [pc, #228]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80014a8:	791b      	ldrb	r3, [r3, #4]
 80014aa:	021b      	lsls	r3, r3, #8
 80014ac:	b21a      	sxth	r2, r3
 80014ae:	4b37      	ldr	r3, [pc, #220]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80014b0:	795b      	ldrb	r3, [r3, #5]
 80014b2:	b21b      	sxth	r3, r3
 80014b4:	4313      	orrs	r3, r2
 80014b6:	b21a      	sxth	r2, r3
 80014b8:	4b37      	ldr	r3, [pc, #220]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80014ba:	869a      	strh	r2, [r3, #52]	; 0x34
  	  motor2.state.Temp = RxData[6];
 80014bc:	4b33      	ldr	r3, [pc, #204]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80014be:	799b      	ldrb	r3, [r3, #6]
 80014c0:	b25a      	sxtb	r2, r3
 80014c2:	4b35      	ldr	r3, [pc, #212]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b8>)
 80014c4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 80014c8:	e059      	b.n	800157e <HAL_CAN_RxFifo0MsgPendingCallback+0x19e>
  else if((RxHeader.StdId == 0x203))
 80014ca:	4b31      	ldr	r3, [pc, #196]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f240 2203 	movw	r2, #515	; 0x203
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d127      	bne.n	8001526 <HAL_CAN_RxFifo0MsgPendingCallback+0x146>
  	  motor3.state.Ang = RxData[0]<<8 | RxData[1];
 80014d6:	4b2d      	ldr	r3, [pc, #180]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	021b      	lsls	r3, r3, #8
 80014dc:	b21a      	sxth	r2, r3
 80014de:	4b2b      	ldr	r3, [pc, #172]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80014e0:	785b      	ldrb	r3, [r3, #1]
 80014e2:	b21b      	sxth	r3, r3
 80014e4:	4313      	orrs	r3, r2
 80014e6:	b21a      	sxth	r2, r3
 80014e8:	4b2c      	ldr	r3, [pc, #176]	; (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 80014ea:	861a      	strh	r2, [r3, #48]	; 0x30
  	  motor3.state.Vel = RxData[2]<<8 | RxData[3];
 80014ec:	4b27      	ldr	r3, [pc, #156]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80014ee:	789b      	ldrb	r3, [r3, #2]
 80014f0:	021b      	lsls	r3, r3, #8
 80014f2:	b21a      	sxth	r2, r3
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 80014f6:	78db      	ldrb	r3, [r3, #3]
 80014f8:	b21b      	sxth	r3, r3
 80014fa:	4313      	orrs	r3, r2
 80014fc:	b21a      	sxth	r2, r3
 80014fe:	4b27      	ldr	r3, [pc, #156]	; (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8001500:	865a      	strh	r2, [r3, #50]	; 0x32
  	  motor3.state.Torq = RxData[4]<<8 | RxData[5];
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001504:	791b      	ldrb	r3, [r3, #4]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	b21a      	sxth	r2, r3
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800150c:	795b      	ldrb	r3, [r3, #5]
 800150e:	b21b      	sxth	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b21a      	sxth	r2, r3
 8001514:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8001516:	869a      	strh	r2, [r3, #52]	; 0x34
  	  motor3.state.Temp = RxData[6];
 8001518:	4b1c      	ldr	r3, [pc, #112]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800151a:	799b      	ldrb	r3, [r3, #6]
 800151c:	b25a      	sxtb	r2, r3
 800151e:	4b1f      	ldr	r3, [pc, #124]	; (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x1bc>)
 8001520:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8001524:	e02b      	b.n	800157e <HAL_CAN_RxFifo0MsgPendingCallback+0x19e>
  else if((RxHeader.StdId == 0x204))
 8001526:	4b1a      	ldr	r3, [pc, #104]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0x1b0>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 800152e:	d126      	bne.n	800157e <HAL_CAN_RxFifo0MsgPendingCallback+0x19e>
  	  motor4.state.Ang = RxData[0]<<8 | RxData[1];
 8001530:	4b16      	ldr	r3, [pc, #88]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001532:	781b      	ldrb	r3, [r3, #0]
 8001534:	021b      	lsls	r3, r3, #8
 8001536:	b21a      	sxth	r2, r3
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800153a:	785b      	ldrb	r3, [r3, #1]
 800153c:	b21b      	sxth	r3, r3
 800153e:	4313      	orrs	r3, r2
 8001540:	b21a      	sxth	r2, r3
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001544:	861a      	strh	r2, [r3, #48]	; 0x30
  	  motor4.state.Vel = RxData[2]<<8 | RxData[3];
 8001546:	4b11      	ldr	r3, [pc, #68]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001548:	789b      	ldrb	r3, [r3, #2]
 800154a:	021b      	lsls	r3, r3, #8
 800154c:	b21a      	sxth	r2, r3
 800154e:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001550:	78db      	ldrb	r3, [r3, #3]
 8001552:	b21b      	sxth	r3, r3
 8001554:	4313      	orrs	r3, r2
 8001556:	b21a      	sxth	r2, r3
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800155a:	865a      	strh	r2, [r3, #50]	; 0x32
  	  motor4.state.Torq = RxData[4]<<8 | RxData[5];
 800155c:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 800155e:	791b      	ldrb	r3, [r3, #4]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	b21a      	sxth	r2, r3
 8001564:	4b09      	ldr	r3, [pc, #36]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001566:	795b      	ldrb	r3, [r3, #5]
 8001568:	b21b      	sxth	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b21a      	sxth	r2, r3
 800156e:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 8001570:	869a      	strh	r2, [r3, #52]	; 0x34
  	  motor4.state.Temp = RxData[6];
 8001572:	4b06      	ldr	r3, [pc, #24]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0x1ac>)
 8001574:	799b      	ldrb	r3, [r3, #6]
 8001576:	b25a      	sxtb	r2, r3
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c0>)
 800157a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 800157e:	bf00      	nop
 8001580:	3708      	adds	r7, #8
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	200000a4 	.word	0x200000a4
 800158c:	2000009c 	.word	0x2000009c
 8001590:	20000074 	.word	0x20000074
 8001594:	200000a8 	.word	0x200000a8
 8001598:	200000e0 	.word	0x200000e0
 800159c:	20000118 	.word	0x20000118
 80015a0:	20000150 	.word	0x20000150

080015a4 <HAL_SPI_RxCpltCallback>:
/**
  * @brief  SPI Receive Callback Function
  * @retval None
  */
void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef * hspi)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
	last_spi_msg = loop_count;
 80015ac:	4b1a      	ldr	r3, [pc, #104]	; (8001618 <HAL_SPI_RxCpltCallback+0x74>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a1a      	ldr	r2, [pc, #104]	; (800161c <HAL_SPI_RxCpltCallback+0x78>)
 80015b2:	6013      	str	r3, [r2, #0]
	vel_targ.vel_t_1 = spi_buf[0] | spi_buf[1]<<8;
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_SPI_RxCpltCallback+0x7c>)
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_SPI_RxCpltCallback+0x7c>)
 80015bc:	785b      	ldrb	r3, [r3, #1]
 80015be:	021b      	lsls	r3, r3, #8
 80015c0:	b21b      	sxth	r3, r3
 80015c2:	4313      	orrs	r3, r2
 80015c4:	b21a      	sxth	r2, r3
 80015c6:	4b17      	ldr	r3, [pc, #92]	; (8001624 <HAL_SPI_RxCpltCallback+0x80>)
 80015c8:	801a      	strh	r2, [r3, #0]
	vel_targ.vel_t_2 = spi_buf[2] | spi_buf[3]<<8;
 80015ca:	4b15      	ldr	r3, [pc, #84]	; (8001620 <HAL_SPI_RxCpltCallback+0x7c>)
 80015cc:	789b      	ldrb	r3, [r3, #2]
 80015ce:	b21a      	sxth	r2, r3
 80015d0:	4b13      	ldr	r3, [pc, #76]	; (8001620 <HAL_SPI_RxCpltCallback+0x7c>)
 80015d2:	78db      	ldrb	r3, [r3, #3]
 80015d4:	021b      	lsls	r3, r3, #8
 80015d6:	b21b      	sxth	r3, r3
 80015d8:	4313      	orrs	r3, r2
 80015da:	b21a      	sxth	r2, r3
 80015dc:	4b11      	ldr	r3, [pc, #68]	; (8001624 <HAL_SPI_RxCpltCallback+0x80>)
 80015de:	805a      	strh	r2, [r3, #2]
	vel_targ.vel_t_3 = spi_buf[4] | spi_buf[5]<<8;
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_SPI_RxCpltCallback+0x7c>)
 80015e2:	791b      	ldrb	r3, [r3, #4]
 80015e4:	b21a      	sxth	r2, r3
 80015e6:	4b0e      	ldr	r3, [pc, #56]	; (8001620 <HAL_SPI_RxCpltCallback+0x7c>)
 80015e8:	795b      	ldrb	r3, [r3, #5]
 80015ea:	021b      	lsls	r3, r3, #8
 80015ec:	b21b      	sxth	r3, r3
 80015ee:	4313      	orrs	r3, r2
 80015f0:	b21a      	sxth	r2, r3
 80015f2:	4b0c      	ldr	r3, [pc, #48]	; (8001624 <HAL_SPI_RxCpltCallback+0x80>)
 80015f4:	809a      	strh	r2, [r3, #4]
	vel_targ.vel_t_4 = spi_buf[6] | spi_buf[7]<<8;
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <HAL_SPI_RxCpltCallback+0x7c>)
 80015f8:	799b      	ldrb	r3, [r3, #6]
 80015fa:	b21a      	sxth	r2, r3
 80015fc:	4b08      	ldr	r3, [pc, #32]	; (8001620 <HAL_SPI_RxCpltCallback+0x7c>)
 80015fe:	79db      	ldrb	r3, [r3, #7]
 8001600:	021b      	lsls	r3, r3, #8
 8001602:	b21b      	sxth	r3, r3
 8001604:	4313      	orrs	r3, r2
 8001606:	b21a      	sxth	r2, r3
 8001608:	4b06      	ldr	r3, [pc, #24]	; (8001624 <HAL_SPI_RxCpltCallback+0x80>)
 800160a:	80da      	strh	r2, [r3, #6]
}
 800160c:	bf00      	nop
 800160e:	370c      	adds	r7, #12
 8001610:	46bd      	mov	sp, r7
 8001612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001616:	4770      	bx	lr
 8001618:	20000054 	.word	0x20000054
 800161c:	20000058 	.word	0x20000058
 8001620:	20000190 	.word	0x20000190
 8001624:	20000188 	.word	0x20000188

08001628 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162c:	b672      	cpsid	i
}
 800162e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001630:	e7fe      	b.n	8001630 <Error_Handler+0x8>

08001632 <_ZN5Motor8PID_InitEffff>:
	Kp = kp;
	Ki = ki;
	Kd = kd;
}
void Motor::PID_Init(float kp, float ki, float kd, float out_thresh)
{
 8001632:	b480      	push	{r7}
 8001634:	b087      	sub	sp, #28
 8001636:	af00      	add	r7, sp, #0
 8001638:	6178      	str	r0, [r7, #20]
 800163a:	ed87 0a04 	vstr	s0, [r7, #16]
 800163e:	edc7 0a03 	vstr	s1, [r7, #12]
 8001642:	ed87 1a02 	vstr	s2, [r7, #8]
 8001646:	edc7 1a01 	vstr	s3, [r7, #4]
	Kp = kp;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	693a      	ldr	r2, [r7, #16]
 800164e:	621a      	str	r2, [r3, #32]
	Ki = ki;
 8001650:	697b      	ldr	r3, [r7, #20]
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	61da      	str	r2, [r3, #28]
	Kd = kd;
 8001656:	697b      	ldr	r3, [r7, #20]
 8001658:	68ba      	ldr	r2, [r7, #8]
 800165a:	619a      	str	r2, [r3, #24]
	A0 = Kp + Ki + Kd;
 800165c:	697b      	ldr	r3, [r7, #20]
 800165e:	ed93 7a08 	vldr	s14, [r3, #32]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	edd3 7a07 	vldr	s15, [r3, #28]
 8001668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	edd3 7a06 	vldr	s15, [r3, #24]
 8001672:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	edc3 7a00 	vstr	s15, [r3]
	A1 = (-Kp ) - (2 * Kd );
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	edd3 7a08 	vldr	s15, [r3, #32]
 8001682:	eeb1 7a67 	vneg.f32	s14, s15
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	edd3 7a06 	vldr	s15, [r3, #24]
 800168c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001690:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	edc3 7a01 	vstr	s15, [r3, #4]
	A2 = Kd;
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	699a      	ldr	r2, [r3, #24]
 800169e:	697b      	ldr	r3, [r7, #20]
 80016a0:	609a      	str	r2, [r3, #8]
	pid_state[0] = 0.0;
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f04f 0200 	mov.w	r2, #0
 80016a8:	60da      	str	r2, [r3, #12]
	pid_state[1] = 0.0;
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	f04f 0200 	mov.w	r2, #0
 80016b0:	611a      	str	r2, [r3, #16]
	pid_state[2] = 0.0;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
	output = 0.0;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f04f 0200 	mov.w	r2, #0
 80016c0:	625a      	str	r2, [r3, #36]	; 0x24
	output_threshold = out_thresh;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	687a      	ldr	r2, [r7, #4]
 80016c6:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80016c8:	bf00      	nop
 80016ca:	371c      	adds	r7, #28
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <_ZN5Motor14PID_ControllerEf>:
float Motor::PID_Controller(float target)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b089      	sub	sp, #36	; 0x24
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	ed87 0a00 	vstr	s0, [r7]
	float error = target - state.Vel;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016ee:	ed97 7a00 	vldr	s14, [r7]
 80016f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80016f6:	edc7 7a07 	vstr	s15, [r7, #28]
//	y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2];

	output = pid_state[2] + A0 * error + A1 * pid_state[0] + A2 * pid_state[1];
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	ed93 7a05 	vldr	s14, [r3, #20]
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	edd3 6a00 	vldr	s13, [r3]
 8001706:	edd7 7a07 	vldr	s15, [r7, #28]
 800170a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800170e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	edd3 6a01 	vldr	s13, [r3, #4]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	edd3 7a03 	vldr	s15, [r3, #12]
 800171e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001722:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	edd3 6a02 	vldr	s13, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	edd3 7a04 	vldr	s15, [r3, #16]
 8001732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	float part1 = pid_state[2];
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	695b      	ldr	r3, [r3, #20]
 8001744:	61bb      	str	r3, [r7, #24]
	float part2 = A0 * error;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	edd3 7a00 	vldr	s15, [r3]
 800174c:	ed97 7a07 	vldr	s14, [r7, #28]
 8001750:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001754:	edc7 7a05 	vstr	s15, [r7, #20]
	float part3 = A1 * pid_state[0];
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	ed93 7a01 	vldr	s14, [r3, #4]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	edd3 7a03 	vldr	s15, [r3, #12]
 8001764:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001768:	edc7 7a04 	vstr	s15, [r7, #16]
	float part4 = A2 * pid_state[1];
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	edd3 7a04 	vldr	s15, [r3, #16]
 8001778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800177c:	edc7 7a03 	vstr	s15, [r7, #12]
	float total = part1 + part2 + part3 + part4;
 8001780:	ed97 7a06 	vldr	s14, [r7, #24]
 8001784:	edd7 7a05 	vldr	s15, [r7, #20]
 8001788:	ee37 7a27 	vadd.f32	s14, s14, s15
 800178c:	edd7 7a04 	vldr	s15, [r7, #16]
 8001790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001794:	ed97 7a03 	vldr	s14, [r7, #12]
 8001798:	ee77 7a27 	vadd.f32	s15, s14, s15
 800179c:	edc7 7a02 	vstr	s15, [r7, #8]
//	output = total*output_scale;
//	output = output*output_scale;
	// Thresholding
	if(output > output_threshold)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80017ac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017b4:	dd03      	ble.n	80017be <_ZN5Motor14PID_ControllerEf+0xea>
		output = output_threshold;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	625a      	str	r2, [r3, #36]	; 0x24
	if(output < - output_threshold)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80017ca:	eef1 7a67 	vneg.f32	s15, s15
 80017ce:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017d6:	d507      	bpl.n	80017e8 <_ZN5Motor14PID_ControllerEf+0x114>
		output = -output_threshold;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80017de:	eef1 7a67 	vneg.f32	s15, s15
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	pid_state[1] = pid_state[0];
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68da      	ldr	r2, [r3, #12]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	611a      	str	r2, [r3, #16]
	pid_state[0] = error;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	69fa      	ldr	r2, [r7, #28]
 80017f4:	60da      	str	r2, [r3, #12]
	pid_state[2] = output;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	615a      	str	r2, [r3, #20]

	return output;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001802:	ee07 3a90 	vmov	s15, r3
}
 8001806:	eeb0 0a67 	vmov.f32	s0, s15
 800180a:	3724      	adds	r7, #36	; 0x24
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr

08001814 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <MX_SPI2_Init+0x5c>)
 800181a:	4a16      	ldr	r2, [pc, #88]	; (8001874 <MX_SPI2_Init+0x60>)
 800181c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_SLAVE;
 800181e:	4b14      	ldr	r3, [pc, #80]	; (8001870 <MX_SPI2_Init+0x5c>)
 8001820:	2200      	movs	r2, #0
 8001822:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001824:	4b12      	ldr	r3, [pc, #72]	; (8001870 <MX_SPI2_Init+0x5c>)
 8001826:	2200      	movs	r2, #0
 8001828:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800182a:	4b11      	ldr	r3, [pc, #68]	; (8001870 <MX_SPI2_Init+0x5c>)
 800182c:	2200      	movs	r2, #0
 800182e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001830:	4b0f      	ldr	r3, [pc, #60]	; (8001870 <MX_SPI2_Init+0x5c>)
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001836:	4b0e      	ldr	r3, [pc, #56]	; (8001870 <MX_SPI2_Init+0x5c>)
 8001838:	2200      	movs	r2, #0
 800183a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_INPUT;
 800183c:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <MX_SPI2_Init+0x5c>)
 800183e:	2200      	movs	r2, #0
 8001840:	619a      	str	r2, [r3, #24]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001842:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <MX_SPI2_Init+0x5c>)
 8001844:	2200      	movs	r2, #0
 8001846:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001848:	4b09      	ldr	r3, [pc, #36]	; (8001870 <MX_SPI2_Init+0x5c>)
 800184a:	2200      	movs	r2, #0
 800184c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800184e:	4b08      	ldr	r3, [pc, #32]	; (8001870 <MX_SPI2_Init+0x5c>)
 8001850:	2200      	movs	r2, #0
 8001852:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <MX_SPI2_Init+0x5c>)
 8001856:	220a      	movs	r2, #10
 8001858:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800185a:	4805      	ldr	r0, [pc, #20]	; (8001870 <MX_SPI2_Init+0x5c>)
 800185c:	f002 f99c 	bl	8003b98 <HAL_SPI_Init>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d001      	beq.n	800186a <MX_SPI2_Init+0x56>
  {
    Error_Handler();
 8001866:	f7ff fedf 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	2000019c 	.word	0x2000019c
 8001874:	40003800 	.word	0x40003800

08001878 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b08a      	sub	sp, #40	; 0x28
 800187c:	af00      	add	r7, sp, #0
 800187e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001880:	f107 0314 	add.w	r3, r7, #20
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
 800188a:	609a      	str	r2, [r3, #8]
 800188c:	60da      	str	r2, [r3, #12]
 800188e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a1d      	ldr	r2, [pc, #116]	; (800190c <HAL_SPI_MspInit+0x94>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d134      	bne.n	8001904 <HAL_SPI_MspInit+0x8c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800189a:	2300      	movs	r3, #0
 800189c:	613b      	str	r3, [r7, #16]
 800189e:	4b1c      	ldr	r3, [pc, #112]	; (8001910 <HAL_SPI_MspInit+0x98>)
 80018a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018a2:	4a1b      	ldr	r2, [pc, #108]	; (8001910 <HAL_SPI_MspInit+0x98>)
 80018a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a8:	6413      	str	r3, [r2, #64]	; 0x40
 80018aa:	4b19      	ldr	r3, [pc, #100]	; (8001910 <HAL_SPI_MspInit+0x98>)
 80018ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018b2:	613b      	str	r3, [r7, #16]
 80018b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018b6:	2300      	movs	r3, #0
 80018b8:	60fb      	str	r3, [r7, #12]
 80018ba:	4b15      	ldr	r3, [pc, #84]	; (8001910 <HAL_SPI_MspInit+0x98>)
 80018bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018be:	4a14      	ldr	r2, [pc, #80]	; (8001910 <HAL_SPI_MspInit+0x98>)
 80018c0:	f043 0302 	orr.w	r3, r3, #2
 80018c4:	6313      	str	r3, [r2, #48]	; 0x30
 80018c6:	4b12      	ldr	r3, [pc, #72]	; (8001910 <HAL_SPI_MspInit+0x98>)
 80018c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	60fb      	str	r3, [r7, #12]
 80018d0:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80018d2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80018d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018d8:	2302      	movs	r3, #2
 80018da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018dc:	2300      	movs	r3, #0
 80018de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e0:	2303      	movs	r3, #3
 80018e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018e4:	2305      	movs	r3, #5
 80018e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018e8:	f107 0314 	add.w	r3, r7, #20
 80018ec:	4619      	mov	r1, r3
 80018ee:	4809      	ldr	r0, [pc, #36]	; (8001914 <HAL_SPI_MspInit+0x9c>)
 80018f0:	f001 f952 	bl	8002b98 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80018f4:	2200      	movs	r2, #0
 80018f6:	2100      	movs	r1, #0
 80018f8:	2024      	movs	r0, #36	; 0x24
 80018fa:	f001 f8f4 	bl	8002ae6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80018fe:	2024      	movs	r0, #36	; 0x24
 8001900:	f001 f90d 	bl	8002b1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001904:	bf00      	nop
 8001906:	3728      	adds	r7, #40	; 0x28
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40003800 	.word	0x40003800
 8001910:	40023800 	.word	0x40023800
 8001914:	40020400 	.word	0x40020400

08001918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b082      	sub	sp, #8
 800191c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800191e:	2300      	movs	r3, #0
 8001920:	607b      	str	r3, [r7, #4]
 8001922:	4b10      	ldr	r3, [pc, #64]	; (8001964 <HAL_MspInit+0x4c>)
 8001924:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001926:	4a0f      	ldr	r2, [pc, #60]	; (8001964 <HAL_MspInit+0x4c>)
 8001928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800192c:	6453      	str	r3, [r2, #68]	; 0x44
 800192e:	4b0d      	ldr	r3, [pc, #52]	; (8001964 <HAL_MspInit+0x4c>)
 8001930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001932:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001936:	607b      	str	r3, [r7, #4]
 8001938:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800193a:	2300      	movs	r3, #0
 800193c:	603b      	str	r3, [r7, #0]
 800193e:	4b09      	ldr	r3, [pc, #36]	; (8001964 <HAL_MspInit+0x4c>)
 8001940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001942:	4a08      	ldr	r2, [pc, #32]	; (8001964 <HAL_MspInit+0x4c>)
 8001944:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001948:	6413      	str	r3, [r2, #64]	; 0x40
 800194a:	4b06      	ldr	r3, [pc, #24]	; (8001964 <HAL_MspInit+0x4c>)
 800194c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001952:	603b      	str	r3, [r7, #0]
 8001954:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001956:	2007      	movs	r0, #7
 8001958:	f001 f8ba 	bl	8002ad0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800195c:	bf00      	nop
 800195e:	3708      	adds	r7, #8
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40023800 	.word	0x40023800

08001968 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800196c:	e7fe      	b.n	800196c <NMI_Handler+0x4>

0800196e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001972:	e7fe      	b.n	8001972 <HardFault_Handler+0x4>

08001974 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001978:	e7fe      	b.n	8001978 <MemManage_Handler+0x4>

0800197a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800197a:	b480      	push	{r7}
 800197c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800197e:	e7fe      	b.n	800197e <BusFault_Handler+0x4>

08001980 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <UsageFault_Handler+0x4>

08001986 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001986:	b480      	push	{r7}
 8001988:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800198a:	bf00      	nop
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001994:	b480      	push	{r7}
 8001996:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019b4:	f000 f916 	bl	8001be4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}

080019bc <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 80019c0:	4802      	ldr	r0, [pc, #8]	; (80019cc <CAN1_RX0_IRQHandler+0x10>)
 80019c2:	f000 fd86 	bl	80024d2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 80019c6:	bf00      	nop
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	2000002c 	.word	0x2000002c

080019d0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80019d4:	4802      	ldr	r0, [pc, #8]	; (80019e0 <SPI2_IRQHandler+0x10>)
 80019d6:	f002 fa9b 	bl	8003f10 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	2000019c 	.word	0x2000019c

080019e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e8:	4b06      	ldr	r3, [pc, #24]	; (8001a04 <SystemInit+0x20>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <SystemInit+0x20>)
 80019f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80019f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <MX_USART2_UART_Init+0x4c>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <MX_USART2_UART_Init+0x50>)
 8001a10:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <MX_USART2_UART_Init+0x4c>)
 8001a14:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a18:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a1a:	4b0e      	ldr	r3, [pc, #56]	; (8001a54 <MX_USART2_UART_Init+0x4c>)
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a20:	4b0c      	ldr	r3, [pc, #48]	; (8001a54 <MX_USART2_UART_Init+0x4c>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a26:	4b0b      	ldr	r3, [pc, #44]	; (8001a54 <MX_USART2_UART_Init+0x4c>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a2c:	4b09      	ldr	r3, [pc, #36]	; (8001a54 <MX_USART2_UART_Init+0x4c>)
 8001a2e:	220c      	movs	r2, #12
 8001a30:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a32:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <MX_USART2_UART_Init+0x4c>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a38:	4b06      	ldr	r3, [pc, #24]	; (8001a54 <MX_USART2_UART_Init+0x4c>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a3e:	4805      	ldr	r0, [pc, #20]	; (8001a54 <MX_USART2_UART_Init+0x4c>)
 8001a40:	f002 fe89 	bl	8004756 <HAL_UART_Init>
 8001a44:	4603      	mov	r3, r0
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d001      	beq.n	8001a4e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a4a:	f7ff fded 	bl	8001628 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001a4e:	bf00      	nop
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	200001f4 	.word	0x200001f4
 8001a58:	40004400 	.word	0x40004400

08001a5c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	; 0x28
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a64:	f107 0314 	add.w	r3, r7, #20
 8001a68:	2200      	movs	r2, #0
 8001a6a:	601a      	str	r2, [r3, #0]
 8001a6c:	605a      	str	r2, [r3, #4]
 8001a6e:	609a      	str	r2, [r3, #8]
 8001a70:	60da      	str	r2, [r3, #12]
 8001a72:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	4a19      	ldr	r2, [pc, #100]	; (8001ae0 <HAL_UART_MspInit+0x84>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d12b      	bne.n	8001ad6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a7e:	2300      	movs	r3, #0
 8001a80:	613b      	str	r3, [r7, #16]
 8001a82:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <HAL_UART_MspInit+0x88>)
 8001a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a86:	4a17      	ldr	r2, [pc, #92]	; (8001ae4 <HAL_UART_MspInit+0x88>)
 8001a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001a8e:	4b15      	ldr	r3, [pc, #84]	; (8001ae4 <HAL_UART_MspInit+0x88>)
 8001a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60fb      	str	r3, [r7, #12]
 8001a9e:	4b11      	ldr	r3, [pc, #68]	; (8001ae4 <HAL_UART_MspInit+0x88>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa2:	4a10      	ldr	r2, [pc, #64]	; (8001ae4 <HAL_UART_MspInit+0x88>)
 8001aa4:	f043 0301 	orr.w	r3, r3, #1
 8001aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ae4 <HAL_UART_MspInit+0x88>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aae:	f003 0301 	and.w	r3, r3, #1
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ab6:	230c      	movs	r3, #12
 8001ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aba:	2302      	movs	r3, #2
 8001abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ac6:	2307      	movs	r3, #7
 8001ac8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aca:	f107 0314 	add.w	r3, r7, #20
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4805      	ldr	r0, [pc, #20]	; (8001ae8 <HAL_UART_MspInit+0x8c>)
 8001ad2:	f001 f861 	bl	8002b98 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ad6:	bf00      	nop
 8001ad8:	3728      	adds	r7, #40	; 0x28
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	40004400 	.word	0x40004400
 8001ae4:	40023800 	.word	0x40023800
 8001ae8:	40020000 	.word	0x40020000

08001aec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001aec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001af0:	480d      	ldr	r0, [pc, #52]	; (8001b28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001af2:	490e      	ldr	r1, [pc, #56]	; (8001b2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001af4:	4a0e      	ldr	r2, [pc, #56]	; (8001b30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001af6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001af8:	e002      	b.n	8001b00 <LoopCopyDataInit>

08001afa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001afa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001afc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001afe:	3304      	adds	r3, #4

08001b00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b04:	d3f9      	bcc.n	8001afa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b06:	4a0b      	ldr	r2, [pc, #44]	; (8001b34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b08:	4c0b      	ldr	r4, [pc, #44]	; (8001b38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b0c:	e001      	b.n	8001b12 <LoopFillZerobss>

08001b0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b10:	3204      	adds	r2, #4

08001b12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b14:	d3fb      	bcc.n	8001b0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b16:	f7ff ff65 	bl	80019e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b1a:	f003 f8dd 	bl	8004cd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b1e:	f7ff f9dd 	bl	8000edc <main>
  bx  lr    
 8001b22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b2c:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001b30:	08004d70 	.word	0x08004d70
  ldr r2, =_sbss
 8001b34:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001b38:	2000023c 	.word	0x2000023c

08001b3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b3c:	e7fe      	b.n	8001b3c <ADC_IRQHandler>
	...

08001b40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b44:	4b0e      	ldr	r3, [pc, #56]	; (8001b80 <HAL_Init+0x40>)
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	; (8001b80 <HAL_Init+0x40>)
 8001b4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b50:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <HAL_Init+0x40>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a0a      	ldr	r2, [pc, #40]	; (8001b80 <HAL_Init+0x40>)
 8001b56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b5c:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <HAL_Init+0x40>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4a07      	ldr	r2, [pc, #28]	; (8001b80 <HAL_Init+0x40>)
 8001b62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b68:	2003      	movs	r0, #3
 8001b6a:	f000 ffb1 	bl	8002ad0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b6e:	2000      	movs	r0, #0
 8001b70:	f000 f808 	bl	8001b84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b74:	f7ff fed0 	bl	8001918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	40023c00 	.word	0x40023c00

08001b84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b082      	sub	sp, #8
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b8c:	4b12      	ldr	r3, [pc, #72]	; (8001bd8 <HAL_InitTick+0x54>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b12      	ldr	r3, [pc, #72]	; (8001bdc <HAL_InitTick+0x58>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	4619      	mov	r1, r3
 8001b96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 ffc9 	bl	8002b3a <HAL_SYSTICK_Config>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e00e      	b.n	8001bd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	2b0f      	cmp	r3, #15
 8001bb6:	d80a      	bhi.n	8001bce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bb8:	2200      	movs	r2, #0
 8001bba:	6879      	ldr	r1, [r7, #4]
 8001bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bc0:	f000 ff91 	bl	8002ae6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bc4:	4a06      	ldr	r2, [pc, #24]	; (8001be0 <HAL_InitTick+0x5c>)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	e000      	b.n	8001bd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20000004 	.word	0x20000004
 8001bdc:	2000000c 	.word	0x2000000c
 8001be0:	20000008 	.word	0x20000008

08001be4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001be8:	4b06      	ldr	r3, [pc, #24]	; (8001c04 <HAL_IncTick+0x20>)
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	4b06      	ldr	r3, [pc, #24]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <HAL_IncTick+0x24>)
 8001bf6:	6013      	str	r3, [r2, #0]
}
 8001bf8:	bf00      	nop
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	2000000c 	.word	0x2000000c
 8001c08:	20000238 	.word	0x20000238

08001c0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c10:	4b03      	ldr	r3, [pc, #12]	; (8001c20 <HAL_GetTick+0x14>)
 8001c12:	681b      	ldr	r3, [r3, #0]
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr
 8001c1e:	bf00      	nop
 8001c20:	20000238 	.word	0x20000238

08001c24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c2c:	f7ff ffee 	bl	8001c0c <HAL_GetTick>
 8001c30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c3c:	d005      	beq.n	8001c4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c3e:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <HAL_Delay+0x44>)
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	4413      	add	r3, r2
 8001c48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c4a:	bf00      	nop
 8001c4c:	f7ff ffde 	bl	8001c0c <HAL_GetTick>
 8001c50:	4602      	mov	r2, r0
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	68fa      	ldr	r2, [r7, #12]
 8001c58:	429a      	cmp	r2, r3
 8001c5a:	d8f7      	bhi.n	8001c4c <HAL_Delay+0x28>
  {
  }
}
 8001c5c:	bf00      	nop
 8001c5e:	bf00      	nop
 8001c60:	3710      	adds	r7, #16
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	2000000c 	.word	0x2000000c

08001c6c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d101      	bne.n	8001c7e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c7a:	2301      	movs	r3, #1
 8001c7c:	e0ed      	b.n	8001e5a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d102      	bne.n	8001c90 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f7ff f868 	bl	8000d60 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f042 0201 	orr.w	r2, r2, #1
 8001c9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ca0:	f7ff ffb4 	bl	8001c0c <HAL_GetTick>
 8001ca4:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001ca6:	e012      	b.n	8001cce <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ca8:	f7ff ffb0 	bl	8001c0c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b0a      	cmp	r3, #10
 8001cb4:	d90b      	bls.n	8001cce <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2205      	movs	r2, #5
 8001cc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cca:	2301      	movs	r3, #1
 8001ccc:	e0c5      	b.n	8001e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	f003 0301 	and.w	r3, r3, #1
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d0e5      	beq.n	8001ca8 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681a      	ldr	r2, [r3, #0]
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f022 0202 	bic.w	r2, r2, #2
 8001cea:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cec:	f7ff ff8e 	bl	8001c0c <HAL_GetTick>
 8001cf0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cf2:	e012      	b.n	8001d1a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cf4:	f7ff ff8a 	bl	8001c0c <HAL_GetTick>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	2b0a      	cmp	r3, #10
 8001d00:	d90b      	bls.n	8001d1a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d06:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	2205      	movs	r2, #5
 8001d12:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d16:	2301      	movs	r3, #1
 8001d18:	e09f      	b.n	8001e5a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0302 	and.w	r3, r3, #2
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1e5      	bne.n	8001cf4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	7e1b      	ldrb	r3, [r3, #24]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d108      	bne.n	8001d42 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	e007      	b.n	8001d52 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d50:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	7e5b      	ldrb	r3, [r3, #25]
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d108      	bne.n	8001d6c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	681a      	ldr	r2, [r3, #0]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d68:	601a      	str	r2, [r3, #0]
 8001d6a:	e007      	b.n	8001d7c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	681a      	ldr	r2, [r3, #0]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001d7a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7e9b      	ldrb	r3, [r3, #26]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d108      	bne.n	8001d96 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	681a      	ldr	r2, [r3, #0]
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	f042 0220 	orr.w	r2, r2, #32
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	e007      	b.n	8001da6 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f022 0220 	bic.w	r2, r2, #32
 8001da4:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	7edb      	ldrb	r3, [r3, #27]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d108      	bne.n	8001dc0 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681a      	ldr	r2, [r3, #0]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f022 0210 	bic.w	r2, r2, #16
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	e007      	b.n	8001dd0 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f042 0210 	orr.w	r2, r2, #16
 8001dce:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	7f1b      	ldrb	r3, [r3, #28]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d108      	bne.n	8001dea <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f042 0208 	orr.w	r2, r2, #8
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	e007      	b.n	8001dfa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681a      	ldr	r2, [r3, #0]
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f022 0208 	bic.w	r2, r2, #8
 8001df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	7f5b      	ldrb	r3, [r3, #29]
 8001dfe:	2b01      	cmp	r3, #1
 8001e00:	d108      	bne.n	8001e14 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f042 0204 	orr.w	r2, r2, #4
 8001e10:	601a      	str	r2, [r3, #0]
 8001e12:	e007      	b.n	8001e24 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f022 0204 	bic.w	r2, r2, #4
 8001e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689a      	ldr	r2, [r3, #8]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	431a      	orrs	r2, r3
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	691b      	ldr	r3, [r3, #16]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	695b      	ldr	r3, [r3, #20]
 8001e38:	ea42 0103 	orr.w	r1, r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	1e5a      	subs	r2, r3, #1
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	430a      	orrs	r2, r1
 8001e48:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3710      	adds	r7, #16
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
	...

08001e64 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e7a:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e7c:	7cfb      	ldrb	r3, [r7, #19]
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d003      	beq.n	8001e8a <HAL_CAN_ConfigFilter+0x26>
 8001e82:	7cfb      	ldrb	r3, [r7, #19]
 8001e84:	2b02      	cmp	r3, #2
 8001e86:	f040 80be 	bne.w	8002006 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001e8a:	4b65      	ldr	r3, [pc, #404]	; (8002020 <HAL_CAN_ConfigFilter+0x1bc>)
 8001e8c:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e94:	f043 0201 	orr.w	r2, r3, #1
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e9e:	697b      	ldr	r3, [r7, #20]
 8001ea0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ea4:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001eae:	697b      	ldr	r3, [r7, #20]
 8001eb0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001ec2:	683b      	ldr	r3, [r7, #0]
 8001ec4:	695b      	ldr	r3, [r3, #20]
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	2201      	movs	r2, #1
 8001ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed0:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	43db      	mvns	r3, r3
 8001edc:	401a      	ands	r2, r3
 8001ede:	697b      	ldr	r3, [r7, #20]
 8001ee0:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	69db      	ldr	r3, [r3, #28]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d123      	bne.n	8001f34 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	43db      	mvns	r3, r3
 8001ef6:	401a      	ands	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f0a:	683a      	ldr	r2, [r7, #0]
 8001f0c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f0e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	3248      	adds	r2, #72	; 0x48
 8001f14:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	689b      	ldr	r3, [r3, #8]
 8001f1c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f28:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f2a:	6979      	ldr	r1, [r7, #20]
 8001f2c:	3348      	adds	r3, #72	; 0x48
 8001f2e:	00db      	lsls	r3, r3, #3
 8001f30:	440b      	add	r3, r1
 8001f32:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d122      	bne.n	8001f82 <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	431a      	orrs	r2, r3
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f58:	683a      	ldr	r2, [r7, #0]
 8001f5a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f5c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	3248      	adds	r2, #72	; 0x48
 8001f62:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f76:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f78:	6979      	ldr	r1, [r7, #20]
 8001f7a:	3348      	adds	r3, #72	; 0x48
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	440b      	add	r3, r1
 8001f80:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	699b      	ldr	r3, [r3, #24]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d109      	bne.n	8001f9e <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	43db      	mvns	r3, r3
 8001f94:	401a      	ands	r2, r3
 8001f96:	697b      	ldr	r3, [r7, #20]
 8001f98:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001f9c:	e007      	b.n	8001fae <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f9e:	697b      	ldr	r3, [r7, #20]
 8001fa0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	431a      	orrs	r2, r3
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d109      	bne.n	8001fca <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	43db      	mvns	r3, r3
 8001fc0:	401a      	ands	r2, r3
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001fc8:	e007      	b.n	8001fda <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	431a      	orrs	r2, r3
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	6a1b      	ldr	r3, [r3, #32]
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	431a      	orrs	r2, r3
 8001fec:	697b      	ldr	r3, [r7, #20]
 8001fee:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001ff8:	f023 0201 	bic.w	r2, r3, #1
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8002002:	2300      	movs	r3, #0
 8002004:	e006      	b.n	8002014 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800200a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
  }
}
 8002014:	4618      	mov	r0, r3
 8002016:	371c      	adds	r7, #28
 8002018:	46bd      	mov	sp, r7
 800201a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201e:	4770      	bx	lr
 8002020:	40006400 	.word	0x40006400

08002024 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b084      	sub	sp, #16
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2b01      	cmp	r3, #1
 8002036:	d12e      	bne.n	8002096 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2202      	movs	r2, #2
 800203c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	681a      	ldr	r2, [r3, #0]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f022 0201 	bic.w	r2, r2, #1
 800204e:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002050:	f7ff fddc 	bl	8001c0c <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002056:	e012      	b.n	800207e <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002058:	f7ff fdd8 	bl	8001c0c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	2b0a      	cmp	r3, #10
 8002064:	d90b      	bls.n	800207e <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2205      	movs	r2, #5
 8002076:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e012      	b.n	80020a4 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	f003 0301 	and.w	r3, r3, #1
 8002088:	2b00      	cmp	r3, #0
 800208a:	d1e5      	bne.n	8002058 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8002092:	2300      	movs	r3, #0
 8002094:	e006      	b.n	80020a4 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
  }
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3710      	adds	r7, #16
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b089      	sub	sp, #36	; 0x24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020c0:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	689b      	ldr	r3, [r3, #8]
 80020c8:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020ca:	7ffb      	ldrb	r3, [r7, #31]
 80020cc:	2b01      	cmp	r3, #1
 80020ce:	d003      	beq.n	80020d8 <HAL_CAN_AddTxMessage+0x2c>
 80020d0:	7ffb      	ldrb	r3, [r7, #31]
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	f040 80b8 	bne.w	8002248 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020d8:	69bb      	ldr	r3, [r7, #24]
 80020da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10a      	bne.n	80020f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d105      	bne.n	80020f8 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 80a0 	beq.w	8002238 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	0e1b      	lsrs	r3, r3, #24
 80020fc:	f003 0303 	and.w	r3, r3, #3
 8002100:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8002102:	697b      	ldr	r3, [r7, #20]
 8002104:	2b02      	cmp	r3, #2
 8002106:	d907      	bls.n	8002118 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800210c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8002114:	2301      	movs	r3, #1
 8002116:	e09e      	b.n	8002256 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8002118:	2201      	movs	r2, #1
 800211a:	697b      	ldr	r3, [r7, #20]
 800211c:	409a      	lsls	r2, r3
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	689b      	ldr	r3, [r3, #8]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10d      	bne.n	8002146 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002134:	68f9      	ldr	r1, [r7, #12]
 8002136:	6809      	ldr	r1, [r1, #0]
 8002138:	431a      	orrs	r2, r3
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3318      	adds	r3, #24
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	440b      	add	r3, r1
 8002142:	601a      	str	r2, [r3, #0]
 8002144:	e00f      	b.n	8002166 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002150:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002156:	68f9      	ldr	r1, [r7, #12]
 8002158:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800215a:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	3318      	adds	r3, #24
 8002160:	011b      	lsls	r3, r3, #4
 8002162:	440b      	add	r3, r1
 8002164:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	6819      	ldr	r1, [r3, #0]
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	3318      	adds	r3, #24
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	440b      	add	r3, r1
 8002176:	3304      	adds	r3, #4
 8002178:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	7d1b      	ldrb	r3, [r3, #20]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d111      	bne.n	80021a6 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	697b      	ldr	r3, [r7, #20]
 8002188:	3318      	adds	r3, #24
 800218a:	011b      	lsls	r3, r3, #4
 800218c:	4413      	add	r3, r2
 800218e:	3304      	adds	r3, #4
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	68fa      	ldr	r2, [r7, #12]
 8002194:	6811      	ldr	r1, [r2, #0]
 8002196:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800219a:	697b      	ldr	r3, [r7, #20]
 800219c:	3318      	adds	r3, #24
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	440b      	add	r3, r1
 80021a2:	3304      	adds	r3, #4
 80021a4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3307      	adds	r3, #7
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	061a      	lsls	r2, r3, #24
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	3306      	adds	r3, #6
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	041b      	lsls	r3, r3, #16
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3305      	adds	r3, #5
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	021b      	lsls	r3, r3, #8
 80021c0:	4313      	orrs	r3, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	3204      	adds	r2, #4
 80021c6:	7812      	ldrb	r2, [r2, #0]
 80021c8:	4610      	mov	r0, r2
 80021ca:	68fa      	ldr	r2, [r7, #12]
 80021cc:	6811      	ldr	r1, [r2, #0]
 80021ce:	ea43 0200 	orr.w	r2, r3, r0
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	011b      	lsls	r3, r3, #4
 80021d6:	440b      	add	r3, r1
 80021d8:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80021dc:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	3303      	adds	r3, #3
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	061a      	lsls	r2, r3, #24
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	3302      	adds	r3, #2
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	041b      	lsls	r3, r3, #16
 80021ee:	431a      	orrs	r2, r3
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	3301      	adds	r3, #1
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	021b      	lsls	r3, r3, #8
 80021f8:	4313      	orrs	r3, r2
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	7812      	ldrb	r2, [r2, #0]
 80021fe:	4610      	mov	r0, r2
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	6811      	ldr	r1, [r2, #0]
 8002204:	ea43 0200 	orr.w	r2, r3, r0
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	011b      	lsls	r3, r3, #4
 800220c:	440b      	add	r3, r1
 800220e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8002212:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681a      	ldr	r2, [r3, #0]
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3318      	adds	r3, #24
 800221c:	011b      	lsls	r3, r3, #4
 800221e:	4413      	add	r3, r2
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	6811      	ldr	r1, [r2, #0]
 8002226:	f043 0201 	orr.w	r2, r3, #1
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	3318      	adds	r3, #24
 800222e:	011b      	lsls	r3, r3, #4
 8002230:	440b      	add	r3, r1
 8002232:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002234:	2300      	movs	r3, #0
 8002236:	e00e      	b.n	8002256 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e006      	b.n	8002256 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800224c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002254:	2301      	movs	r3, #1
  }
}
 8002256:	4618      	mov	r0, r3
 8002258:	3724      	adds	r7, #36	; 0x24
 800225a:	46bd      	mov	sp, r7
 800225c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002260:	4770      	bx	lr

08002262 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002262:	b480      	push	{r7}
 8002264:	b087      	sub	sp, #28
 8002266:	af00      	add	r7, sp, #0
 8002268:	60f8      	str	r0, [r7, #12]
 800226a:	60b9      	str	r1, [r7, #8]
 800226c:	607a      	str	r2, [r7, #4]
 800226e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002276:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002278:	7dfb      	ldrb	r3, [r7, #23]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d003      	beq.n	8002286 <HAL_CAN_GetRxMessage+0x24>
 800227e:	7dfb      	ldrb	r3, [r7, #23]
 8002280:	2b02      	cmp	r3, #2
 8002282:	f040 80f3 	bne.w	800246c <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10e      	bne.n	80022aa <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	f003 0303 	and.w	r3, r3, #3
 8002296:	2b00      	cmp	r3, #0
 8002298:	d116      	bne.n	80022c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800229e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022a6:	2301      	movs	r3, #1
 80022a8:	e0e7      	b.n	800247a <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	691b      	ldr	r3, [r3, #16]
 80022b0:	f003 0303 	and.w	r3, r3, #3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d107      	bne.n	80022c8 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80022c4:	2301      	movs	r3, #1
 80022c6:	e0d8      	b.n	800247a <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	331b      	adds	r3, #27
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	4413      	add	r3, r2
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f003 0204 	and.w	r2, r3, #4
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	68bb      	ldr	r3, [r7, #8]
 80022ec:	331b      	adds	r3, #27
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	4413      	add	r3, r2
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	0d5b      	lsrs	r3, r3, #21
 80022f6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e00b      	b.n	8002318 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	331b      	adds	r3, #27
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	4413      	add	r3, r2
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	08db      	lsrs	r3, r3, #3
 8002310:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	68bb      	ldr	r3, [r7, #8]
 800231e:	331b      	adds	r3, #27
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	4413      	add	r3, r2
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0202 	and.w	r2, r3, #2
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	331b      	adds	r3, #27
 8002336:	011b      	lsls	r3, r3, #4
 8002338:	4413      	add	r3, r2
 800233a:	3304      	adds	r3, #4
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f003 020f 	and.w	r2, r3, #15
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	331b      	adds	r3, #27
 800234e:	011b      	lsls	r3, r3, #4
 8002350:	4413      	add	r3, r2
 8002352:	3304      	adds	r3, #4
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	0a1b      	lsrs	r3, r3, #8
 8002358:	b2da      	uxtb	r2, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	681a      	ldr	r2, [r3, #0]
 8002362:	68bb      	ldr	r3, [r7, #8]
 8002364:	331b      	adds	r3, #27
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	4413      	add	r3, r2
 800236a:	3304      	adds	r3, #4
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	0c1b      	lsrs	r3, r3, #16
 8002370:	b29a      	uxth	r2, r3
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68bb      	ldr	r3, [r7, #8]
 800237c:	011b      	lsls	r3, r3, #4
 800237e:	4413      	add	r3, r2
 8002380:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	b2da      	uxtb	r2, r3
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	4413      	add	r3, r2
 8002396:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	0a1a      	lsrs	r2, r3, #8
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	3301      	adds	r3, #1
 80023a2:	b2d2      	uxtb	r2, r2
 80023a4:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681a      	ldr	r2, [r3, #0]
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	011b      	lsls	r3, r3, #4
 80023ae:	4413      	add	r3, r2
 80023b0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	0c1a      	lsrs	r2, r3, #16
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	3302      	adds	r3, #2
 80023bc:	b2d2      	uxtb	r2, r2
 80023be:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	011b      	lsls	r3, r3, #4
 80023c8:	4413      	add	r3, r2
 80023ca:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	0e1a      	lsrs	r2, r3, #24
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3303      	adds	r3, #3
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	68bb      	ldr	r3, [r7, #8]
 80023e0:	011b      	lsls	r3, r3, #4
 80023e2:	4413      	add	r3, r2
 80023e4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	3304      	adds	r3, #4
 80023ee:	b2d2      	uxtb	r2, r2
 80023f0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	011b      	lsls	r3, r3, #4
 80023fa:	4413      	add	r3, r2
 80023fc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	0a1a      	lsrs	r2, r3, #8
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	3305      	adds	r3, #5
 8002408:	b2d2      	uxtb	r2, r2
 800240a:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681a      	ldr	r2, [r3, #0]
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	011b      	lsls	r3, r3, #4
 8002414:	4413      	add	r3, r2
 8002416:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	0c1a      	lsrs	r2, r3, #16
 800241e:	683b      	ldr	r3, [r7, #0]
 8002420:	3306      	adds	r3, #6
 8002422:	b2d2      	uxtb	r2, r2
 8002424:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681a      	ldr	r2, [r3, #0]
 800242a:	68bb      	ldr	r3, [r7, #8]
 800242c:	011b      	lsls	r3, r3, #4
 800242e:	4413      	add	r3, r2
 8002430:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	0e1a      	lsrs	r2, r3, #24
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	3307      	adds	r3, #7
 800243c:	b2d2      	uxtb	r2, r2
 800243e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002440:	68bb      	ldr	r3, [r7, #8]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d108      	bne.n	8002458 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	68da      	ldr	r2, [r3, #12]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f042 0220 	orr.w	r2, r2, #32
 8002454:	60da      	str	r2, [r3, #12]
 8002456:	e007      	b.n	8002468 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	691a      	ldr	r2, [r3, #16]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0220 	orr.w	r2, r2, #32
 8002466:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002468:	2300      	movs	r3, #0
 800246a:	e006      	b.n	800247a <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
  }
}
 800247a:	4618      	mov	r0, r3
 800247c:	371c      	adds	r7, #28
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr

08002486 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002486:	b480      	push	{r7}
 8002488:	b085      	sub	sp, #20
 800248a:	af00      	add	r7, sp, #0
 800248c:	6078      	str	r0, [r7, #4]
 800248e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002496:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002498:	7bfb      	ldrb	r3, [r7, #15]
 800249a:	2b01      	cmp	r3, #1
 800249c:	d002      	beq.n	80024a4 <HAL_CAN_ActivateNotification+0x1e>
 800249e:	7bfb      	ldrb	r3, [r7, #15]
 80024a0:	2b02      	cmp	r3, #2
 80024a2:	d109      	bne.n	80024b8 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6959      	ldr	r1, [r3, #20]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80024b4:	2300      	movs	r3, #0
 80024b6:	e006      	b.n	80024c6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
  }
}
 80024c6:	4618      	mov	r0, r3
 80024c8:	3714      	adds	r7, #20
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b08a      	sub	sp, #40	; 0x28
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024da:	2300      	movs	r3, #0
 80024dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695b      	ldr	r3, [r3, #20]
 80024e4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	68db      	ldr	r3, [r3, #12]
 80024fc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	691b      	ldr	r3, [r3, #16]
 8002504:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800250e:	6a3b      	ldr	r3, [r7, #32]
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b00      	cmp	r3, #0
 8002516:	d07c      	beq.n	8002612 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002518:	69bb      	ldr	r3, [r7, #24]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d023      	beq.n	800256a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2201      	movs	r2, #1
 8002528:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f000 f983 	bl	8002840 <HAL_CAN_TxMailbox0CompleteCallback>
 800253a:	e016      	b.n	800256a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800253c:	69bb      	ldr	r3, [r7, #24]
 800253e:	f003 0304 	and.w	r3, r3, #4
 8002542:	2b00      	cmp	r3, #0
 8002544:	d004      	beq.n	8002550 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002548:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800254c:	627b      	str	r3, [r7, #36]	; 0x24
 800254e:	e00c      	b.n	800256a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002550:	69bb      	ldr	r3, [r7, #24]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b00      	cmp	r3, #0
 8002558:	d004      	beq.n	8002564 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800255a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
 8002562:	e002      	b.n	800256a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f000 f989 	bl	800287c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002570:	2b00      	cmp	r3, #0
 8002572:	d024      	beq.n	80025be <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f44f 7280 	mov.w	r2, #256	; 0x100
 800257c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002584:	2b00      	cmp	r3, #0
 8002586:	d003      	beq.n	8002590 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002588:	6878      	ldr	r0, [r7, #4]
 800258a:	f000 f963 	bl	8002854 <HAL_CAN_TxMailbox1CompleteCallback>
 800258e:	e016      	b.n	80025be <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002590:	69bb      	ldr	r3, [r7, #24]
 8002592:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002596:	2b00      	cmp	r3, #0
 8002598:	d004      	beq.n	80025a4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800259a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800259c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80025a0:	627b      	str	r3, [r7, #36]	; 0x24
 80025a2:	e00c      	b.n	80025be <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d004      	beq.n	80025b8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025b4:	627b      	str	r3, [r7, #36]	; 0x24
 80025b6:	e002      	b.n	80025be <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025b8:	6878      	ldr	r0, [r7, #4]
 80025ba:	f000 f969 	bl	8002890 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025be:	69bb      	ldr	r3, [r7, #24]
 80025c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d024      	beq.n	8002612 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80025d0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d003      	beq.n	80025e4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f000 f943 	bl	8002868 <HAL_CAN_TxMailbox2CompleteCallback>
 80025e2:	e016      	b.n	8002612 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d004      	beq.n	80025f8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025f0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	e00c      	b.n	8002612 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025f8:	69bb      	ldr	r3, [r7, #24]
 80025fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d004      	beq.n	800260c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002608:	627b      	str	r3, [r7, #36]	; 0x24
 800260a:	e002      	b.n	8002612 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f949 	bl	80028a4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002612:	6a3b      	ldr	r3, [r7, #32]
 8002614:	f003 0308 	and.w	r3, r3, #8
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00c      	beq.n	8002636 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b00      	cmp	r3, #0
 8002624:	d007      	beq.n	8002636 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800262c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	2210      	movs	r2, #16
 8002634:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002636:	6a3b      	ldr	r3, [r7, #32]
 8002638:	f003 0304 	and.w	r3, r3, #4
 800263c:	2b00      	cmp	r3, #0
 800263e:	d00b      	beq.n	8002658 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d006      	beq.n	8002658 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2208      	movs	r2, #8
 8002650:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 f930 	bl	80028b8 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d009      	beq.n	8002676 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f003 0303 	and.w	r3, r3, #3
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7fe feb5 	bl	80013e0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002676:	6a3b      	ldr	r3, [r7, #32]
 8002678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800267c:	2b00      	cmp	r3, #0
 800267e:	d00c      	beq.n	800269a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	f003 0310 	and.w	r3, r3, #16
 8002686:	2b00      	cmp	r3, #0
 8002688:	d007      	beq.n	800269a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800268a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800268c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002690:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	2210      	movs	r2, #16
 8002698:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	f003 0320 	and.w	r3, r3, #32
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00b      	beq.n	80026bc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2208      	movs	r2, #8
 80026b4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026b6:	6878      	ldr	r0, [r7, #4]
 80026b8:	f000 f912 	bl	80028e0 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026bc:	6a3b      	ldr	r3, [r7, #32]
 80026be:	f003 0310 	and.w	r3, r3, #16
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d009      	beq.n	80026da <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691b      	ldr	r3, [r3, #16]
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d002      	beq.n	80026da <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f8f9 	bl	80028cc <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026da:	6a3b      	ldr	r3, [r7, #32]
 80026dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d00b      	beq.n	80026fc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	f003 0310 	and.w	r3, r3, #16
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d006      	beq.n	80026fc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	2210      	movs	r2, #16
 80026f4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f000 f8fc 	bl	80028f4 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002702:	2b00      	cmp	r3, #0
 8002704:	d00b      	beq.n	800271e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	f003 0308 	and.w	r3, r3, #8
 800270c:	2b00      	cmp	r3, #0
 800270e:	d006      	beq.n	800271e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2208      	movs	r2, #8
 8002716:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f8f5 	bl	8002908 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d07b      	beq.n	8002820 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002728:	69fb      	ldr	r3, [r7, #28]
 800272a:	f003 0304 	and.w	r3, r3, #4
 800272e:	2b00      	cmp	r3, #0
 8002730:	d072      	beq.n	8002818 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d008      	beq.n	800274e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002742:	2b00      	cmp	r3, #0
 8002744:	d003      	beq.n	800274e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800274e:	6a3b      	ldr	r3, [r7, #32]
 8002750:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002754:	2b00      	cmp	r3, #0
 8002756:	d008      	beq.n	800276a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800276a:	6a3b      	ldr	r3, [r7, #32]
 800276c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002770:	2b00      	cmp	r3, #0
 8002772:	d008      	beq.n	8002786 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800277a:	2b00      	cmp	r3, #0
 800277c:	d003      	beq.n	8002786 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	f043 0304 	orr.w	r3, r3, #4
 8002784:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002786:	6a3b      	ldr	r3, [r7, #32]
 8002788:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800278c:	2b00      	cmp	r3, #0
 800278e:	d043      	beq.n	8002818 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002796:	2b00      	cmp	r3, #0
 8002798:	d03e      	beq.n	8002818 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80027a0:	2b60      	cmp	r3, #96	; 0x60
 80027a2:	d02b      	beq.n	80027fc <HAL_CAN_IRQHandler+0x32a>
 80027a4:	2b60      	cmp	r3, #96	; 0x60
 80027a6:	d82e      	bhi.n	8002806 <HAL_CAN_IRQHandler+0x334>
 80027a8:	2b50      	cmp	r3, #80	; 0x50
 80027aa:	d022      	beq.n	80027f2 <HAL_CAN_IRQHandler+0x320>
 80027ac:	2b50      	cmp	r3, #80	; 0x50
 80027ae:	d82a      	bhi.n	8002806 <HAL_CAN_IRQHandler+0x334>
 80027b0:	2b40      	cmp	r3, #64	; 0x40
 80027b2:	d019      	beq.n	80027e8 <HAL_CAN_IRQHandler+0x316>
 80027b4:	2b40      	cmp	r3, #64	; 0x40
 80027b6:	d826      	bhi.n	8002806 <HAL_CAN_IRQHandler+0x334>
 80027b8:	2b30      	cmp	r3, #48	; 0x30
 80027ba:	d010      	beq.n	80027de <HAL_CAN_IRQHandler+0x30c>
 80027bc:	2b30      	cmp	r3, #48	; 0x30
 80027be:	d822      	bhi.n	8002806 <HAL_CAN_IRQHandler+0x334>
 80027c0:	2b10      	cmp	r3, #16
 80027c2:	d002      	beq.n	80027ca <HAL_CAN_IRQHandler+0x2f8>
 80027c4:	2b20      	cmp	r3, #32
 80027c6:	d005      	beq.n	80027d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027c8:	e01d      	b.n	8002806 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027cc:	f043 0308 	orr.w	r3, r3, #8
 80027d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027d2:	e019      	b.n	8002808 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027d6:	f043 0310 	orr.w	r3, r3, #16
 80027da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027dc:	e014      	b.n	8002808 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027e0:	f043 0320 	orr.w	r3, r3, #32
 80027e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027e6:	e00f      	b.n	8002808 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80027ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027f0:	e00a      	b.n	8002808 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80027f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80027fa:	e005      	b.n	8002808 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002802:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002804:	e000      	b.n	8002808 <HAL_CAN_IRQHandler+0x336>
            break;
 8002806:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	699a      	ldr	r2, [r3, #24]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002816:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	2204      	movs	r2, #4
 800281e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002822:	2b00      	cmp	r3, #0
 8002824:	d008      	beq.n	8002838 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800282a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 f872 	bl	800291c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002838:	bf00      	nop
 800283a:	3728      	adds	r7, #40	; 0x28
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002848:	bf00      	nop
 800284a:	370c      	adds	r7, #12
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8002870:	bf00      	nop
 8002872:	370c      	adds	r7, #12
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr

0800287c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002884:	bf00      	nop
 8002886:	370c      	adds	r7, #12
 8002888:	46bd      	mov	sp, r7
 800288a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288e:	4770      	bx	lr

08002890 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80028ac:	bf00      	nop
 80028ae:	370c      	adds	r7, #12
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80028d4:	bf00      	nop
 80028d6:	370c      	adds	r7, #12
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b083      	sub	sp, #12
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr

08002908 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800291c:	b480      	push	{r7}
 800291e:	b083      	sub	sp, #12
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8002924:	bf00      	nop
 8002926:	370c      	adds	r7, #12
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr

08002930 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002930:	b480      	push	{r7}
 8002932:	b085      	sub	sp, #20
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f003 0307 	and.w	r3, r3, #7
 800293e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002940:	4b0c      	ldr	r3, [pc, #48]	; (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002946:	68ba      	ldr	r2, [r7, #8]
 8002948:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800294c:	4013      	ands	r3, r2
 800294e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002958:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800295c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002960:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002962:	4a04      	ldr	r2, [pc, #16]	; (8002974 <__NVIC_SetPriorityGrouping+0x44>)
 8002964:	68bb      	ldr	r3, [r7, #8]
 8002966:	60d3      	str	r3, [r2, #12]
}
 8002968:	bf00      	nop
 800296a:	3714      	adds	r7, #20
 800296c:	46bd      	mov	sp, r7
 800296e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002972:	4770      	bx	lr
 8002974:	e000ed00 	.word	0xe000ed00

08002978 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800297c:	4b04      	ldr	r3, [pc, #16]	; (8002990 <__NVIC_GetPriorityGrouping+0x18>)
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	0a1b      	lsrs	r3, r3, #8
 8002982:	f003 0307 	and.w	r3, r3, #7
}
 8002986:	4618      	mov	r0, r3
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr
 8002990:	e000ed00 	.word	0xe000ed00

08002994 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	db0b      	blt.n	80029be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029a6:	79fb      	ldrb	r3, [r7, #7]
 80029a8:	f003 021f 	and.w	r2, r3, #31
 80029ac:	4907      	ldr	r1, [pc, #28]	; (80029cc <__NVIC_EnableIRQ+0x38>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	095b      	lsrs	r3, r3, #5
 80029b4:	2001      	movs	r0, #1
 80029b6:	fa00 f202 	lsl.w	r2, r0, r2
 80029ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr
 80029ca:	bf00      	nop
 80029cc:	e000e100 	.word	0xe000e100

080029d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029d0:	b480      	push	{r7}
 80029d2:	b083      	sub	sp, #12
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	4603      	mov	r3, r0
 80029d8:	6039      	str	r1, [r7, #0]
 80029da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	db0a      	blt.n	80029fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	b2da      	uxtb	r2, r3
 80029e8:	490c      	ldr	r1, [pc, #48]	; (8002a1c <__NVIC_SetPriority+0x4c>)
 80029ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ee:	0112      	lsls	r2, r2, #4
 80029f0:	b2d2      	uxtb	r2, r2
 80029f2:	440b      	add	r3, r1
 80029f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029f8:	e00a      	b.n	8002a10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	b2da      	uxtb	r2, r3
 80029fe:	4908      	ldr	r1, [pc, #32]	; (8002a20 <__NVIC_SetPriority+0x50>)
 8002a00:	79fb      	ldrb	r3, [r7, #7]
 8002a02:	f003 030f 	and.w	r3, r3, #15
 8002a06:	3b04      	subs	r3, #4
 8002a08:	0112      	lsls	r2, r2, #4
 8002a0a:	b2d2      	uxtb	r2, r2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	761a      	strb	r2, [r3, #24]
}
 8002a10:	bf00      	nop
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr
 8002a1c:	e000e100 	.word	0xe000e100
 8002a20:	e000ed00 	.word	0xe000ed00

08002a24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b089      	sub	sp, #36	; 0x24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	f1c3 0307 	rsb	r3, r3, #7
 8002a3e:	2b04      	cmp	r3, #4
 8002a40:	bf28      	it	cs
 8002a42:	2304      	movcs	r3, #4
 8002a44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a46:	69fb      	ldr	r3, [r7, #28]
 8002a48:	3304      	adds	r3, #4
 8002a4a:	2b06      	cmp	r3, #6
 8002a4c:	d902      	bls.n	8002a54 <NVIC_EncodePriority+0x30>
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	3b03      	subs	r3, #3
 8002a52:	e000      	b.n	8002a56 <NVIC_EncodePriority+0x32>
 8002a54:	2300      	movs	r3, #0
 8002a56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a58:	f04f 32ff 	mov.w	r2, #4294967295
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a62:	43da      	mvns	r2, r3
 8002a64:	68bb      	ldr	r3, [r7, #8]
 8002a66:	401a      	ands	r2, r3
 8002a68:	697b      	ldr	r3, [r7, #20]
 8002a6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a6c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	fa01 f303 	lsl.w	r3, r1, r3
 8002a76:	43d9      	mvns	r1, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a7c:	4313      	orrs	r3, r2
         );
}
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3724      	adds	r7, #36	; 0x24
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
	...

08002a8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b082      	sub	sp, #8
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3b01      	subs	r3, #1
 8002a98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a9c:	d301      	bcc.n	8002aa2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	e00f      	b.n	8002ac2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <SysTick_Config+0x40>)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	3b01      	subs	r3, #1
 8002aa8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002aaa:	210f      	movs	r1, #15
 8002aac:	f04f 30ff 	mov.w	r0, #4294967295
 8002ab0:	f7ff ff8e 	bl	80029d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ab4:	4b05      	ldr	r3, [pc, #20]	; (8002acc <SysTick_Config+0x40>)
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aba:	4b04      	ldr	r3, [pc, #16]	; (8002acc <SysTick_Config+0x40>)
 8002abc:	2207      	movs	r2, #7
 8002abe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3708      	adds	r7, #8
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	e000e010 	.word	0xe000e010

08002ad0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b082      	sub	sp, #8
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ad8:	6878      	ldr	r0, [r7, #4]
 8002ada:	f7ff ff29 	bl	8002930 <__NVIC_SetPriorityGrouping>
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b086      	sub	sp, #24
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	4603      	mov	r3, r0
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002af8:	f7ff ff3e 	bl	8002978 <__NVIC_GetPriorityGrouping>
 8002afc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002afe:	687a      	ldr	r2, [r7, #4]
 8002b00:	68b9      	ldr	r1, [r7, #8]
 8002b02:	6978      	ldr	r0, [r7, #20]
 8002b04:	f7ff ff8e 	bl	8002a24 <NVIC_EncodePriority>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b0e:	4611      	mov	r1, r2
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff ff5d 	bl	80029d0 <__NVIC_SetPriority>
}
 8002b16:	bf00      	nop
 8002b18:	3718      	adds	r7, #24
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}

08002b1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b1e:	b580      	push	{r7, lr}
 8002b20:	b082      	sub	sp, #8
 8002b22:	af00      	add	r7, sp, #0
 8002b24:	4603      	mov	r3, r0
 8002b26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7ff ff31 	bl	8002994 <__NVIC_EnableIRQ>
}
 8002b32:	bf00      	nop
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}

08002b3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b3a:	b580      	push	{r7, lr}
 8002b3c:	b082      	sub	sp, #8
 8002b3e:	af00      	add	r7, sp, #0
 8002b40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f7ff ffa2 	bl	8002a8c <SysTick_Config>
 8002b48:	4603      	mov	r3, r0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b52:	b480      	push	{r7}
 8002b54:	b083      	sub	sp, #12
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2b02      	cmp	r3, #2
 8002b64:	d004      	beq.n	8002b70 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2280      	movs	r2, #128	; 0x80
 8002b6a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e00c      	b.n	8002b8a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2205      	movs	r2, #5
 8002b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0201 	bic.w	r2, r2, #1
 8002b86:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
	...

08002b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b98:	b480      	push	{r7}
 8002b9a:	b089      	sub	sp, #36	; 0x24
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002baa:	2300      	movs	r3, #0
 8002bac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bae:	2300      	movs	r3, #0
 8002bb0:	61fb      	str	r3, [r7, #28]
 8002bb2:	e165      	b.n	8002e80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bb4:	2201      	movs	r2, #1
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	697a      	ldr	r2, [r7, #20]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	f040 8154 	bne.w	8002e7a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	f003 0303 	and.w	r3, r3, #3
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d005      	beq.n	8002bea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002bde:	683b      	ldr	r3, [r7, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d130      	bne.n	8002c4c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002bf0:	69fb      	ldr	r3, [r7, #28]
 8002bf2:	005b      	lsls	r3, r3, #1
 8002bf4:	2203      	movs	r2, #3
 8002bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8002bfa:	43db      	mvns	r3, r3
 8002bfc:	69ba      	ldr	r2, [r7, #24]
 8002bfe:	4013      	ands	r3, r2
 8002c00:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	68da      	ldr	r2, [r3, #12]
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	005b      	lsls	r3, r3, #1
 8002c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c0e:	69ba      	ldr	r2, [r7, #24]
 8002c10:	4313      	orrs	r3, r2
 8002c12:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c20:	2201      	movs	r2, #1
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	fa02 f303 	lsl.w	r3, r2, r3
 8002c28:	43db      	mvns	r3, r3
 8002c2a:	69ba      	ldr	r2, [r7, #24]
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	091b      	lsrs	r3, r3, #4
 8002c36:	f003 0201 	and.w	r2, r3, #1
 8002c3a:	69fb      	ldr	r3, [r7, #28]
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	69ba      	ldr	r2, [r7, #24]
 8002c42:	4313      	orrs	r3, r2
 8002c44:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	f003 0303 	and.w	r3, r3, #3
 8002c54:	2b03      	cmp	r3, #3
 8002c56:	d017      	beq.n	8002c88 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	005b      	lsls	r3, r3, #1
 8002c62:	2203      	movs	r2, #3
 8002c64:	fa02 f303 	lsl.w	r3, r2, r3
 8002c68:	43db      	mvns	r3, r3
 8002c6a:	69ba      	ldr	r2, [r7, #24]
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	689a      	ldr	r2, [r3, #8]
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	005b      	lsls	r3, r3, #1
 8002c78:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7c:	69ba      	ldr	r2, [r7, #24]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	f003 0303 	and.w	r3, r3, #3
 8002c90:	2b02      	cmp	r3, #2
 8002c92:	d123      	bne.n	8002cdc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	08da      	lsrs	r2, r3, #3
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	3208      	adds	r2, #8
 8002c9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002ca2:	69fb      	ldr	r3, [r7, #28]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	220f      	movs	r2, #15
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	691a      	ldr	r2, [r3, #16]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	009b      	lsls	r3, r3, #2
 8002cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	4313      	orrs	r3, r2
 8002ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	08da      	lsrs	r2, r3, #3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	3208      	adds	r2, #8
 8002cd6:	69b9      	ldr	r1, [r7, #24]
 8002cd8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ce2:	69fb      	ldr	r3, [r7, #28]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	69ba      	ldr	r2, [r7, #24]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f003 0203 	and.w	r2, r3, #3
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	005b      	lsls	r3, r3, #1
 8002d00:	fa02 f303 	lsl.w	r3, r2, r3
 8002d04:	69ba      	ldr	r2, [r7, #24]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	f000 80ae 	beq.w	8002e7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d1e:	2300      	movs	r3, #0
 8002d20:	60fb      	str	r3, [r7, #12]
 8002d22:	4b5d      	ldr	r3, [pc, #372]	; (8002e98 <HAL_GPIO_Init+0x300>)
 8002d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d26:	4a5c      	ldr	r2, [pc, #368]	; (8002e98 <HAL_GPIO_Init+0x300>)
 8002d28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d2e:	4b5a      	ldr	r3, [pc, #360]	; (8002e98 <HAL_GPIO_Init+0x300>)
 8002d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d36:	60fb      	str	r3, [r7, #12]
 8002d38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d3a:	4a58      	ldr	r2, [pc, #352]	; (8002e9c <HAL_GPIO_Init+0x304>)
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	3302      	adds	r3, #2
 8002d42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d48:	69fb      	ldr	r3, [r7, #28]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	220f      	movs	r2, #15
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a4f      	ldr	r2, [pc, #316]	; (8002ea0 <HAL_GPIO_Init+0x308>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d025      	beq.n	8002db2 <HAL_GPIO_Init+0x21a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a4e      	ldr	r2, [pc, #312]	; (8002ea4 <HAL_GPIO_Init+0x30c>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d01f      	beq.n	8002dae <HAL_GPIO_Init+0x216>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a4d      	ldr	r2, [pc, #308]	; (8002ea8 <HAL_GPIO_Init+0x310>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d019      	beq.n	8002daa <HAL_GPIO_Init+0x212>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a4c      	ldr	r2, [pc, #304]	; (8002eac <HAL_GPIO_Init+0x314>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d013      	beq.n	8002da6 <HAL_GPIO_Init+0x20e>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a4b      	ldr	r2, [pc, #300]	; (8002eb0 <HAL_GPIO_Init+0x318>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d00d      	beq.n	8002da2 <HAL_GPIO_Init+0x20a>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a4a      	ldr	r2, [pc, #296]	; (8002eb4 <HAL_GPIO_Init+0x31c>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d007      	beq.n	8002d9e <HAL_GPIO_Init+0x206>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a49      	ldr	r2, [pc, #292]	; (8002eb8 <HAL_GPIO_Init+0x320>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d101      	bne.n	8002d9a <HAL_GPIO_Init+0x202>
 8002d96:	2306      	movs	r3, #6
 8002d98:	e00c      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002d9a:	2307      	movs	r3, #7
 8002d9c:	e00a      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002d9e:	2305      	movs	r3, #5
 8002da0:	e008      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002da2:	2304      	movs	r3, #4
 8002da4:	e006      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002da6:	2303      	movs	r3, #3
 8002da8:	e004      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002daa:	2302      	movs	r3, #2
 8002dac:	e002      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <HAL_GPIO_Init+0x21c>
 8002db2:	2300      	movs	r3, #0
 8002db4:	69fa      	ldr	r2, [r7, #28]
 8002db6:	f002 0203 	and.w	r2, r2, #3
 8002dba:	0092      	lsls	r2, r2, #2
 8002dbc:	4093      	lsls	r3, r2
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dc4:	4935      	ldr	r1, [pc, #212]	; (8002e9c <HAL_GPIO_Init+0x304>)
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	089b      	lsrs	r3, r3, #2
 8002dca:	3302      	adds	r3, #2
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dd2:	4b3a      	ldr	r3, [pc, #232]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	43db      	mvns	r3, r3
 8002ddc:	69ba      	ldr	r2, [r7, #24]
 8002dde:	4013      	ands	r3, r2
 8002de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d003      	beq.n	8002df6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	693b      	ldr	r3, [r7, #16]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002df6:	4a31      	ldr	r2, [pc, #196]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002dfc:	4b2f      	ldr	r3, [pc, #188]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d003      	beq.n	8002e20 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	693b      	ldr	r3, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e20:	4a26      	ldr	r2, [pc, #152]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e26:	4b25      	ldr	r3, [pc, #148]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e4a:	4a1c      	ldr	r2, [pc, #112]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e50:	4b1a      	ldr	r3, [pc, #104]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e74:	4a11      	ldr	r2, [pc, #68]	; (8002ebc <HAL_GPIO_Init+0x324>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	3301      	adds	r3, #1
 8002e7e:	61fb      	str	r3, [r7, #28]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	2b0f      	cmp	r3, #15
 8002e84:	f67f ae96 	bls.w	8002bb4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002e88:	bf00      	nop
 8002e8a:	bf00      	nop
 8002e8c:	3724      	adds	r7, #36	; 0x24
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr
 8002e96:	bf00      	nop
 8002e98:	40023800 	.word	0x40023800
 8002e9c:	40013800 	.word	0x40013800
 8002ea0:	40020000 	.word	0x40020000
 8002ea4:	40020400 	.word	0x40020400
 8002ea8:	40020800 	.word	0x40020800
 8002eac:	40020c00 	.word	0x40020c00
 8002eb0:	40021000 	.word	0x40021000
 8002eb4:	40021400 	.word	0x40021400
 8002eb8:	40021800 	.word	0x40021800
 8002ebc:	40013c00 	.word	0x40013c00

08002ec0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
 8002ec8:	460b      	mov	r3, r1
 8002eca:	807b      	strh	r3, [r7, #2]
 8002ecc:	4613      	mov	r3, r2
 8002ece:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ed0:	787b      	ldrb	r3, [r7, #1]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d003      	beq.n	8002ede <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ed6:	887a      	ldrh	r2, [r7, #2]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002edc:	e003      	b.n	8002ee6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ede:	887b      	ldrh	r3, [r7, #2]
 8002ee0:	041a      	lsls	r2, r3, #16
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	619a      	str	r2, [r3, #24]
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr

08002ef2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b085      	sub	sp, #20
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
 8002efa:	460b      	mov	r3, r1
 8002efc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	695b      	ldr	r3, [r3, #20]
 8002f02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f04:	887a      	ldrh	r2, [r7, #2]
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	4013      	ands	r3, r2
 8002f0a:	041a      	lsls	r2, r3, #16
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	43d9      	mvns	r1, r3
 8002f10:	887b      	ldrh	r3, [r7, #2]
 8002f12:	400b      	ands	r3, r1
 8002f14:	431a      	orrs	r2, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	619a      	str	r2, [r3, #24]
}
 8002f1a:	bf00      	nop
 8002f1c:	3714      	adds	r7, #20
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
	...

08002f28 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002f32:	2300      	movs	r3, #0
 8002f34:	603b      	str	r3, [r7, #0]
 8002f36:	4b20      	ldr	r3, [pc, #128]	; (8002fb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3a:	4a1f      	ldr	r2, [pc, #124]	; (8002fb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f40:	6413      	str	r3, [r2, #64]	; 0x40
 8002f42:	4b1d      	ldr	r3, [pc, #116]	; (8002fb8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002f4e:	4b1b      	ldr	r3, [pc, #108]	; (8002fbc <HAL_PWREx_EnableOverDrive+0x94>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f54:	f7fe fe5a 	bl	8001c0c <HAL_GetTick>
 8002f58:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f5a:	e009      	b.n	8002f70 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f5c:	f7fe fe56 	bl	8001c0c <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f6a:	d901      	bls.n	8002f70 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e01f      	b.n	8002fb0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002f70:	4b13      	ldr	r3, [pc, #76]	; (8002fc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f7c:	d1ee      	bne.n	8002f5c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002f7e:	4b11      	ldr	r3, [pc, #68]	; (8002fc4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002f80:	2201      	movs	r2, #1
 8002f82:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002f84:	f7fe fe42 	bl	8001c0c <HAL_GetTick>
 8002f88:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002f8a:	e009      	b.n	8002fa0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002f8c:	f7fe fe3e 	bl	8001c0c <HAL_GetTick>
 8002f90:	4602      	mov	r2, r0
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f9a:	d901      	bls.n	8002fa0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e007      	b.n	8002fb0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002fa0:	4b07      	ldr	r3, [pc, #28]	; (8002fc0 <HAL_PWREx_EnableOverDrive+0x98>)
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fa8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002fac:	d1ee      	bne.n	8002f8c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002fae:	2300      	movs	r3, #0
}
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40023800 	.word	0x40023800
 8002fbc:	420e0040 	.word	0x420e0040
 8002fc0:	40007000 	.word	0x40007000
 8002fc4:	420e0044 	.word	0x420e0044

08002fc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d101      	bne.n	8002fdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd8:	2301      	movs	r3, #1
 8002fda:	e0cc      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002fdc:	4b68      	ldr	r3, [pc, #416]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 030f 	and.w	r3, r3, #15
 8002fe4:	683a      	ldr	r2, [r7, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d90c      	bls.n	8003004 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fea:	4b65      	ldr	r3, [pc, #404]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ff2:	4b63      	ldr	r3, [pc, #396]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	683a      	ldr	r2, [r7, #0]
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d001      	beq.n	8003004 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003000:	2301      	movs	r3, #1
 8003002:	e0b8      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f003 0302 	and.w	r3, r3, #2
 800300c:	2b00      	cmp	r3, #0
 800300e:	d020      	beq.n	8003052 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b00      	cmp	r3, #0
 800301a:	d005      	beq.n	8003028 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800301c:	4b59      	ldr	r3, [pc, #356]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	4a58      	ldr	r2, [pc, #352]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003022:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003026:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0308 	and.w	r3, r3, #8
 8003030:	2b00      	cmp	r3, #0
 8003032:	d005      	beq.n	8003040 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	689b      	ldr	r3, [r3, #8]
 8003038:	4a52      	ldr	r2, [pc, #328]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800303a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800303e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003040:	4b50      	ldr	r3, [pc, #320]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	494d      	ldr	r1, [pc, #308]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800304e:	4313      	orrs	r3, r2
 8003050:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0301 	and.w	r3, r3, #1
 800305a:	2b00      	cmp	r3, #0
 800305c:	d044      	beq.n	80030e8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d107      	bne.n	8003076 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003066:	4b47      	ldr	r3, [pc, #284]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800306e:	2b00      	cmp	r3, #0
 8003070:	d119      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e07f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b02      	cmp	r3, #2
 800307c:	d003      	beq.n	8003086 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003082:	2b03      	cmp	r3, #3
 8003084:	d107      	bne.n	8003096 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003086:	4b3f      	ldr	r3, [pc, #252]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d109      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e06f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003096:	4b3b      	ldr	r3, [pc, #236]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d101      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e067      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a6:	4b37      	ldr	r3, [pc, #220]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	689b      	ldr	r3, [r3, #8]
 80030aa:	f023 0203 	bic.w	r2, r3, #3
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4934      	ldr	r1, [pc, #208]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030b4:	4313      	orrs	r3, r2
 80030b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b8:	f7fe fda8 	bl	8001c0c <HAL_GetTick>
 80030bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030be:	e00a      	b.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030c0:	f7fe fda4 	bl	8001c0c <HAL_GetTick>
 80030c4:	4602      	mov	r2, r0
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	1ad3      	subs	r3, r2, r3
 80030ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e04f      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d6:	4b2b      	ldr	r3, [pc, #172]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f003 020c 	and.w	r2, r3, #12
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	009b      	lsls	r3, r3, #2
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d1eb      	bne.n	80030c0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80030e8:	4b25      	ldr	r3, [pc, #148]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f003 030f 	and.w	r3, r3, #15
 80030f0:	683a      	ldr	r2, [r7, #0]
 80030f2:	429a      	cmp	r2, r3
 80030f4:	d20c      	bcs.n	8003110 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f6:	4b22      	ldr	r3, [pc, #136]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 80030f8:	683a      	ldr	r2, [r7, #0]
 80030fa:	b2d2      	uxtb	r2, r2
 80030fc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <HAL_RCC_ClockConfig+0x1b8>)
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f003 030f 	and.w	r3, r3, #15
 8003106:	683a      	ldr	r2, [r7, #0]
 8003108:	429a      	cmp	r2, r3
 800310a:	d001      	beq.n	8003110 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	e032      	b.n	8003176 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f003 0304 	and.w	r3, r3, #4
 8003118:	2b00      	cmp	r3, #0
 800311a:	d008      	beq.n	800312e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800311c:	4b19      	ldr	r3, [pc, #100]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800311e:	689b      	ldr	r3, [r3, #8]
 8003120:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	4916      	ldr	r1, [pc, #88]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	4313      	orrs	r3, r2
 800312c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d009      	beq.n	800314e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800313a:	4b12      	ldr	r3, [pc, #72]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	00db      	lsls	r3, r3, #3
 8003148:	490e      	ldr	r1, [pc, #56]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 800314a:	4313      	orrs	r3, r2
 800314c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800314e:	f000 f855 	bl	80031fc <HAL_RCC_GetSysClockFreq>
 8003152:	4602      	mov	r2, r0
 8003154:	4b0b      	ldr	r3, [pc, #44]	; (8003184 <HAL_RCC_ClockConfig+0x1bc>)
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	091b      	lsrs	r3, r3, #4
 800315a:	f003 030f 	and.w	r3, r3, #15
 800315e:	490a      	ldr	r1, [pc, #40]	; (8003188 <HAL_RCC_ClockConfig+0x1c0>)
 8003160:	5ccb      	ldrb	r3, [r1, r3]
 8003162:	fa22 f303 	lsr.w	r3, r2, r3
 8003166:	4a09      	ldr	r2, [pc, #36]	; (800318c <HAL_RCC_ClockConfig+0x1c4>)
 8003168:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800316a:	4b09      	ldr	r3, [pc, #36]	; (8003190 <HAL_RCC_ClockConfig+0x1c8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4618      	mov	r0, r3
 8003170:	f7fe fd08 	bl	8001b84 <HAL_InitTick>

  return HAL_OK;
 8003174:	2300      	movs	r3, #0
}
 8003176:	4618      	mov	r0, r3
 8003178:	3710      	adds	r7, #16
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40023c00 	.word	0x40023c00
 8003184:	40023800 	.word	0x40023800
 8003188:	08004d48 	.word	0x08004d48
 800318c:	20000004 	.word	0x20000004
 8003190:	20000008 	.word	0x20000008

08003194 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003194:	b480      	push	{r7}
 8003196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003198:	4b03      	ldr	r3, [pc, #12]	; (80031a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800319a:	681b      	ldr	r3, [r3, #0]
}
 800319c:	4618      	mov	r0, r3
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000004 	.word	0x20000004

080031ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80031b0:	f7ff fff0 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031b4:	4602      	mov	r2, r0
 80031b6:	4b05      	ldr	r3, [pc, #20]	; (80031cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80031b8:	689b      	ldr	r3, [r3, #8]
 80031ba:	0a9b      	lsrs	r3, r3, #10
 80031bc:	f003 0307 	and.w	r3, r3, #7
 80031c0:	4903      	ldr	r1, [pc, #12]	; (80031d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80031c2:	5ccb      	ldrb	r3, [r1, r3]
 80031c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031c8:	4618      	mov	r0, r3
 80031ca:	bd80      	pop	{r7, pc}
 80031cc:	40023800 	.word	0x40023800
 80031d0:	08004d58 	.word	0x08004d58

080031d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80031d8:	f7ff ffdc 	bl	8003194 <HAL_RCC_GetHCLKFreq>
 80031dc:	4602      	mov	r2, r0
 80031de:	4b05      	ldr	r3, [pc, #20]	; (80031f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	0b5b      	lsrs	r3, r3, #13
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	4903      	ldr	r1, [pc, #12]	; (80031f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031ea:	5ccb      	ldrb	r3, [r1, r3]
 80031ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40023800 	.word	0x40023800
 80031f8:	08004d58 	.word	0x08004d58

080031fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003200:	b0ae      	sub	sp, #184	; 0xb8
 8003202:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003204:	2300      	movs	r3, #0
 8003206:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003210:	2300      	movs	r3, #0
 8003212:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800321c:	2300      	movs	r3, #0
 800321e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003222:	4bcb      	ldr	r3, [pc, #812]	; (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b0c      	cmp	r3, #12
 800322c:	f200 8206 	bhi.w	800363c <HAL_RCC_GetSysClockFreq+0x440>
 8003230:	a201      	add	r2, pc, #4	; (adr r2, 8003238 <HAL_RCC_GetSysClockFreq+0x3c>)
 8003232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003236:	bf00      	nop
 8003238:	0800326d 	.word	0x0800326d
 800323c:	0800363d 	.word	0x0800363d
 8003240:	0800363d 	.word	0x0800363d
 8003244:	0800363d 	.word	0x0800363d
 8003248:	08003275 	.word	0x08003275
 800324c:	0800363d 	.word	0x0800363d
 8003250:	0800363d 	.word	0x0800363d
 8003254:	0800363d 	.word	0x0800363d
 8003258:	0800327d 	.word	0x0800327d
 800325c:	0800363d 	.word	0x0800363d
 8003260:	0800363d 	.word	0x0800363d
 8003264:	0800363d 	.word	0x0800363d
 8003268:	0800346d 	.word	0x0800346d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800326c:	4bb9      	ldr	r3, [pc, #740]	; (8003554 <HAL_RCC_GetSysClockFreq+0x358>)
 800326e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003272:	e1e7      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003274:	4bb8      	ldr	r3, [pc, #736]	; (8003558 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003276:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800327a:	e1e3      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800327c:	4bb4      	ldr	r3, [pc, #720]	; (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003284:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003288:	4bb1      	ldr	r3, [pc, #708]	; (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003290:	2b00      	cmp	r3, #0
 8003292:	d071      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003294:	4bae      	ldr	r3, [pc, #696]	; (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	099b      	lsrs	r3, r3, #6
 800329a:	2200      	movs	r2, #0
 800329c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80032a0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80032a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80032b0:	2300      	movs	r3, #0
 80032b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80032ba:	4622      	mov	r2, r4
 80032bc:	462b      	mov	r3, r5
 80032be:	f04f 0000 	mov.w	r0, #0
 80032c2:	f04f 0100 	mov.w	r1, #0
 80032c6:	0159      	lsls	r1, r3, #5
 80032c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032cc:	0150      	lsls	r0, r2, #5
 80032ce:	4602      	mov	r2, r0
 80032d0:	460b      	mov	r3, r1
 80032d2:	4621      	mov	r1, r4
 80032d4:	1a51      	subs	r1, r2, r1
 80032d6:	6439      	str	r1, [r7, #64]	; 0x40
 80032d8:	4629      	mov	r1, r5
 80032da:	eb63 0301 	sbc.w	r3, r3, r1
 80032de:	647b      	str	r3, [r7, #68]	; 0x44
 80032e0:	f04f 0200 	mov.w	r2, #0
 80032e4:	f04f 0300 	mov.w	r3, #0
 80032e8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80032ec:	4649      	mov	r1, r9
 80032ee:	018b      	lsls	r3, r1, #6
 80032f0:	4641      	mov	r1, r8
 80032f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032f6:	4641      	mov	r1, r8
 80032f8:	018a      	lsls	r2, r1, #6
 80032fa:	4641      	mov	r1, r8
 80032fc:	1a51      	subs	r1, r2, r1
 80032fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8003300:	4649      	mov	r1, r9
 8003302:	eb63 0301 	sbc.w	r3, r3, r1
 8003306:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003308:	f04f 0200 	mov.w	r2, #0
 800330c:	f04f 0300 	mov.w	r3, #0
 8003310:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003314:	4649      	mov	r1, r9
 8003316:	00cb      	lsls	r3, r1, #3
 8003318:	4641      	mov	r1, r8
 800331a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800331e:	4641      	mov	r1, r8
 8003320:	00ca      	lsls	r2, r1, #3
 8003322:	4610      	mov	r0, r2
 8003324:	4619      	mov	r1, r3
 8003326:	4603      	mov	r3, r0
 8003328:	4622      	mov	r2, r4
 800332a:	189b      	adds	r3, r3, r2
 800332c:	633b      	str	r3, [r7, #48]	; 0x30
 800332e:	462b      	mov	r3, r5
 8003330:	460a      	mov	r2, r1
 8003332:	eb42 0303 	adc.w	r3, r2, r3
 8003336:	637b      	str	r3, [r7, #52]	; 0x34
 8003338:	f04f 0200 	mov.w	r2, #0
 800333c:	f04f 0300 	mov.w	r3, #0
 8003340:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003344:	4629      	mov	r1, r5
 8003346:	024b      	lsls	r3, r1, #9
 8003348:	4621      	mov	r1, r4
 800334a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800334e:	4621      	mov	r1, r4
 8003350:	024a      	lsls	r2, r1, #9
 8003352:	4610      	mov	r0, r2
 8003354:	4619      	mov	r1, r3
 8003356:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800335a:	2200      	movs	r2, #0
 800335c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003360:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003364:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003368:	f7fd fb42 	bl	80009f0 <__aeabi_uldivmod>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4613      	mov	r3, r2
 8003372:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003376:	e067      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003378:	4b75      	ldr	r3, [pc, #468]	; (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	099b      	lsrs	r3, r3, #6
 800337e:	2200      	movs	r2, #0
 8003380:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003384:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003388:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800338c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003390:	67bb      	str	r3, [r7, #120]	; 0x78
 8003392:	2300      	movs	r3, #0
 8003394:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003396:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800339a:	4622      	mov	r2, r4
 800339c:	462b      	mov	r3, r5
 800339e:	f04f 0000 	mov.w	r0, #0
 80033a2:	f04f 0100 	mov.w	r1, #0
 80033a6:	0159      	lsls	r1, r3, #5
 80033a8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ac:	0150      	lsls	r0, r2, #5
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4621      	mov	r1, r4
 80033b4:	1a51      	subs	r1, r2, r1
 80033b6:	62b9      	str	r1, [r7, #40]	; 0x28
 80033b8:	4629      	mov	r1, r5
 80033ba:	eb63 0301 	sbc.w	r3, r3, r1
 80033be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033c0:	f04f 0200 	mov.w	r2, #0
 80033c4:	f04f 0300 	mov.w	r3, #0
 80033c8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80033cc:	4649      	mov	r1, r9
 80033ce:	018b      	lsls	r3, r1, #6
 80033d0:	4641      	mov	r1, r8
 80033d2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033d6:	4641      	mov	r1, r8
 80033d8:	018a      	lsls	r2, r1, #6
 80033da:	4641      	mov	r1, r8
 80033dc:	ebb2 0a01 	subs.w	sl, r2, r1
 80033e0:	4649      	mov	r1, r9
 80033e2:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80033f2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80033f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80033fa:	4692      	mov	sl, r2
 80033fc:	469b      	mov	fp, r3
 80033fe:	4623      	mov	r3, r4
 8003400:	eb1a 0303 	adds.w	r3, sl, r3
 8003404:	623b      	str	r3, [r7, #32]
 8003406:	462b      	mov	r3, r5
 8003408:	eb4b 0303 	adc.w	r3, fp, r3
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	f04f 0300 	mov.w	r3, #0
 8003416:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800341a:	4629      	mov	r1, r5
 800341c:	028b      	lsls	r3, r1, #10
 800341e:	4621      	mov	r1, r4
 8003420:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003424:	4621      	mov	r1, r4
 8003426:	028a      	lsls	r2, r1, #10
 8003428:	4610      	mov	r0, r2
 800342a:	4619      	mov	r1, r3
 800342c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003430:	2200      	movs	r2, #0
 8003432:	673b      	str	r3, [r7, #112]	; 0x70
 8003434:	677a      	str	r2, [r7, #116]	; 0x74
 8003436:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800343a:	f7fd fad9 	bl	80009f0 <__aeabi_uldivmod>
 800343e:	4602      	mov	r2, r0
 8003440:	460b      	mov	r3, r1
 8003442:	4613      	mov	r3, r2
 8003444:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003448:	4b41      	ldr	r3, [pc, #260]	; (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	0c1b      	lsrs	r3, r3, #16
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	3301      	adds	r3, #1
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800345a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800345e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800346a:	e0eb      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800346c:	4b38      	ldr	r3, [pc, #224]	; (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003474:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003478:	4b35      	ldr	r3, [pc, #212]	; (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 800347a:	685b      	ldr	r3, [r3, #4]
 800347c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003480:	2b00      	cmp	r3, #0
 8003482:	d06b      	beq.n	800355c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003484:	4b32      	ldr	r3, [pc, #200]	; (8003550 <HAL_RCC_GetSysClockFreq+0x354>)
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	099b      	lsrs	r3, r3, #6
 800348a:	2200      	movs	r2, #0
 800348c:	66bb      	str	r3, [r7, #104]	; 0x68
 800348e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003490:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003496:	663b      	str	r3, [r7, #96]	; 0x60
 8003498:	2300      	movs	r3, #0
 800349a:	667b      	str	r3, [r7, #100]	; 0x64
 800349c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80034a0:	4622      	mov	r2, r4
 80034a2:	462b      	mov	r3, r5
 80034a4:	f04f 0000 	mov.w	r0, #0
 80034a8:	f04f 0100 	mov.w	r1, #0
 80034ac:	0159      	lsls	r1, r3, #5
 80034ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034b2:	0150      	lsls	r0, r2, #5
 80034b4:	4602      	mov	r2, r0
 80034b6:	460b      	mov	r3, r1
 80034b8:	4621      	mov	r1, r4
 80034ba:	1a51      	subs	r1, r2, r1
 80034bc:	61b9      	str	r1, [r7, #24]
 80034be:	4629      	mov	r1, r5
 80034c0:	eb63 0301 	sbc.w	r3, r3, r1
 80034c4:	61fb      	str	r3, [r7, #28]
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	f04f 0300 	mov.w	r3, #0
 80034ce:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80034d2:	4659      	mov	r1, fp
 80034d4:	018b      	lsls	r3, r1, #6
 80034d6:	4651      	mov	r1, sl
 80034d8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034dc:	4651      	mov	r1, sl
 80034de:	018a      	lsls	r2, r1, #6
 80034e0:	4651      	mov	r1, sl
 80034e2:	ebb2 0801 	subs.w	r8, r2, r1
 80034e6:	4659      	mov	r1, fp
 80034e8:	eb63 0901 	sbc.w	r9, r3, r1
 80034ec:	f04f 0200 	mov.w	r2, #0
 80034f0:	f04f 0300 	mov.w	r3, #0
 80034f4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034f8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034fc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003500:	4690      	mov	r8, r2
 8003502:	4699      	mov	r9, r3
 8003504:	4623      	mov	r3, r4
 8003506:	eb18 0303 	adds.w	r3, r8, r3
 800350a:	613b      	str	r3, [r7, #16]
 800350c:	462b      	mov	r3, r5
 800350e:	eb49 0303 	adc.w	r3, r9, r3
 8003512:	617b      	str	r3, [r7, #20]
 8003514:	f04f 0200 	mov.w	r2, #0
 8003518:	f04f 0300 	mov.w	r3, #0
 800351c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003520:	4629      	mov	r1, r5
 8003522:	024b      	lsls	r3, r1, #9
 8003524:	4621      	mov	r1, r4
 8003526:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800352a:	4621      	mov	r1, r4
 800352c:	024a      	lsls	r2, r1, #9
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003536:	2200      	movs	r2, #0
 8003538:	65bb      	str	r3, [r7, #88]	; 0x58
 800353a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800353c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003540:	f7fd fa56 	bl	80009f0 <__aeabi_uldivmod>
 8003544:	4602      	mov	r2, r0
 8003546:	460b      	mov	r3, r1
 8003548:	4613      	mov	r3, r2
 800354a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800354e:	e065      	b.n	800361c <HAL_RCC_GetSysClockFreq+0x420>
 8003550:	40023800 	.word	0x40023800
 8003554:	00f42400 	.word	0x00f42400
 8003558:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800355c:	4b3d      	ldr	r3, [pc, #244]	; (8003654 <HAL_RCC_GetSysClockFreq+0x458>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	099b      	lsrs	r3, r3, #6
 8003562:	2200      	movs	r2, #0
 8003564:	4618      	mov	r0, r3
 8003566:	4611      	mov	r1, r2
 8003568:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800356c:	653b      	str	r3, [r7, #80]	; 0x50
 800356e:	2300      	movs	r3, #0
 8003570:	657b      	str	r3, [r7, #84]	; 0x54
 8003572:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003576:	4642      	mov	r2, r8
 8003578:	464b      	mov	r3, r9
 800357a:	f04f 0000 	mov.w	r0, #0
 800357e:	f04f 0100 	mov.w	r1, #0
 8003582:	0159      	lsls	r1, r3, #5
 8003584:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003588:	0150      	lsls	r0, r2, #5
 800358a:	4602      	mov	r2, r0
 800358c:	460b      	mov	r3, r1
 800358e:	4641      	mov	r1, r8
 8003590:	1a51      	subs	r1, r2, r1
 8003592:	60b9      	str	r1, [r7, #8]
 8003594:	4649      	mov	r1, r9
 8003596:	eb63 0301 	sbc.w	r3, r3, r1
 800359a:	60fb      	str	r3, [r7, #12]
 800359c:	f04f 0200 	mov.w	r2, #0
 80035a0:	f04f 0300 	mov.w	r3, #0
 80035a4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80035a8:	4659      	mov	r1, fp
 80035aa:	018b      	lsls	r3, r1, #6
 80035ac:	4651      	mov	r1, sl
 80035ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80035b2:	4651      	mov	r1, sl
 80035b4:	018a      	lsls	r2, r1, #6
 80035b6:	4651      	mov	r1, sl
 80035b8:	1a54      	subs	r4, r2, r1
 80035ba:	4659      	mov	r1, fp
 80035bc:	eb63 0501 	sbc.w	r5, r3, r1
 80035c0:	f04f 0200 	mov.w	r2, #0
 80035c4:	f04f 0300 	mov.w	r3, #0
 80035c8:	00eb      	lsls	r3, r5, #3
 80035ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035ce:	00e2      	lsls	r2, r4, #3
 80035d0:	4614      	mov	r4, r2
 80035d2:	461d      	mov	r5, r3
 80035d4:	4643      	mov	r3, r8
 80035d6:	18e3      	adds	r3, r4, r3
 80035d8:	603b      	str	r3, [r7, #0]
 80035da:	464b      	mov	r3, r9
 80035dc:	eb45 0303 	adc.w	r3, r5, r3
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	f04f 0200 	mov.w	r2, #0
 80035e6:	f04f 0300 	mov.w	r3, #0
 80035ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035ee:	4629      	mov	r1, r5
 80035f0:	028b      	lsls	r3, r1, #10
 80035f2:	4621      	mov	r1, r4
 80035f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035f8:	4621      	mov	r1, r4
 80035fa:	028a      	lsls	r2, r1, #10
 80035fc:	4610      	mov	r0, r2
 80035fe:	4619      	mov	r1, r3
 8003600:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003604:	2200      	movs	r2, #0
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48
 8003608:	64fa      	str	r2, [r7, #76]	; 0x4c
 800360a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800360e:	f7fd f9ef 	bl	80009f0 <__aeabi_uldivmod>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	4613      	mov	r3, r2
 8003618:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800361c:	4b0d      	ldr	r3, [pc, #52]	; (8003654 <HAL_RCC_GetSysClockFreq+0x458>)
 800361e:	685b      	ldr	r3, [r3, #4]
 8003620:	0f1b      	lsrs	r3, r3, #28
 8003622:	f003 0307 	and.w	r3, r3, #7
 8003626:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800362a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800362e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003632:	fbb2 f3f3 	udiv	r3, r2, r3
 8003636:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800363a:	e003      	b.n	8003644 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800363c:	4b06      	ldr	r3, [pc, #24]	; (8003658 <HAL_RCC_GetSysClockFreq+0x45c>)
 800363e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003642:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003644:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003648:	4618      	mov	r0, r3
 800364a:	37b8      	adds	r7, #184	; 0xb8
 800364c:	46bd      	mov	sp, r7
 800364e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003652:	bf00      	nop
 8003654:	40023800 	.word	0x40023800
 8003658:	00f42400 	.word	0x00f42400

0800365c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b086      	sub	sp, #24
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2b00      	cmp	r3, #0
 8003668:	d101      	bne.n	800366e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800366a:	2301      	movs	r3, #1
 800366c:	e28d      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 0301 	and.w	r3, r3, #1
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 8083 	beq.w	8003782 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800367c:	4b94      	ldr	r3, [pc, #592]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	f003 030c 	and.w	r3, r3, #12
 8003684:	2b04      	cmp	r3, #4
 8003686:	d019      	beq.n	80036bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003688:	4b91      	ldr	r3, [pc, #580]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003690:	2b08      	cmp	r3, #8
 8003692:	d106      	bne.n	80036a2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003694:	4b8e      	ldr	r3, [pc, #568]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800369c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a0:	d00c      	beq.n	80036bc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036a2:	4b8b      	ldr	r3, [pc, #556]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80036aa:	2b0c      	cmp	r3, #12
 80036ac:	d112      	bne.n	80036d4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80036ae:	4b88      	ldr	r3, [pc, #544]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ba:	d10b      	bne.n	80036d4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036bc:	4b84      	ldr	r3, [pc, #528]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d05b      	beq.n	8003780 <HAL_RCC_OscConfig+0x124>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d157      	bne.n	8003780 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e25a      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036dc:	d106      	bne.n	80036ec <HAL_RCC_OscConfig+0x90>
 80036de:	4b7c      	ldr	r3, [pc, #496]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	4a7b      	ldr	r2, [pc, #492]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e01d      	b.n	8003728 <HAL_RCC_OscConfig+0xcc>
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80036f4:	d10c      	bne.n	8003710 <HAL_RCC_OscConfig+0xb4>
 80036f6:	4b76      	ldr	r3, [pc, #472]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	4a75      	ldr	r2, [pc, #468]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80036fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003700:	6013      	str	r3, [r2, #0]
 8003702:	4b73      	ldr	r3, [pc, #460]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4a72      	ldr	r2, [pc, #456]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003708:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800370c:	6013      	str	r3, [r2, #0]
 800370e:	e00b      	b.n	8003728 <HAL_RCC_OscConfig+0xcc>
 8003710:	4b6f      	ldr	r3, [pc, #444]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a6e      	ldr	r2, [pc, #440]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003716:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800371a:	6013      	str	r3, [r2, #0]
 800371c:	4b6c      	ldr	r3, [pc, #432]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4a6b      	ldr	r2, [pc, #428]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003722:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003726:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	2b00      	cmp	r3, #0
 800372e:	d013      	beq.n	8003758 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003730:	f7fe fa6c 	bl	8001c0c <HAL_GetTick>
 8003734:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003736:	e008      	b.n	800374a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003738:	f7fe fa68 	bl	8001c0c <HAL_GetTick>
 800373c:	4602      	mov	r2, r0
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	1ad3      	subs	r3, r2, r3
 8003742:	2b64      	cmp	r3, #100	; 0x64
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e21f      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4b61      	ldr	r3, [pc, #388]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0f0      	beq.n	8003738 <HAL_RCC_OscConfig+0xdc>
 8003756:	e014      	b.n	8003782 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fe fa58 	bl	8001c0c <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003760:	f7fe fa54 	bl	8001c0c <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b64      	cmp	r3, #100	; 0x64
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e20b      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003772:	4b57      	ldr	r3, [pc, #348]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x104>
 800377e:	e000      	b.n	8003782 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003780:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0302 	and.w	r3, r3, #2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d06f      	beq.n	800386e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800378e:	4b50      	ldr	r3, [pc, #320]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	f003 030c 	and.w	r3, r3, #12
 8003796:	2b00      	cmp	r3, #0
 8003798:	d017      	beq.n	80037ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800379a:	4b4d      	ldr	r3, [pc, #308]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80037a2:	2b08      	cmp	r3, #8
 80037a4:	d105      	bne.n	80037b2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037a6:	4b4a      	ldr	r3, [pc, #296]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037b2:	4b47      	ldr	r3, [pc, #284]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80037ba:	2b0c      	cmp	r3, #12
 80037bc:	d11c      	bne.n	80037f8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80037be:	4b44      	ldr	r3, [pc, #272]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d116      	bne.n	80037f8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037ca:	4b41      	ldr	r3, [pc, #260]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d005      	beq.n	80037e2 <HAL_RCC_OscConfig+0x186>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	68db      	ldr	r3, [r3, #12]
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d001      	beq.n	80037e2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e1d3      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037e2:	4b3b      	ldr	r3, [pc, #236]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	00db      	lsls	r3, r3, #3
 80037f0:	4937      	ldr	r1, [pc, #220]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80037f2:	4313      	orrs	r3, r2
 80037f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037f6:	e03a      	b.n	800386e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d020      	beq.n	8003842 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003800:	4b34      	ldr	r3, [pc, #208]	; (80038d4 <HAL_RCC_OscConfig+0x278>)
 8003802:	2201      	movs	r2, #1
 8003804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003806:	f7fe fa01 	bl	8001c0c <HAL_GetTick>
 800380a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800380c:	e008      	b.n	8003820 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380e:	f7fe f9fd 	bl	8001c0c <HAL_GetTick>
 8003812:	4602      	mov	r2, r0
 8003814:	693b      	ldr	r3, [r7, #16]
 8003816:	1ad3      	subs	r3, r2, r3
 8003818:	2b02      	cmp	r3, #2
 800381a:	d901      	bls.n	8003820 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	e1b4      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003820:	4b2b      	ldr	r3, [pc, #172]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	f003 0302 	and.w	r3, r3, #2
 8003828:	2b00      	cmp	r3, #0
 800382a:	d0f0      	beq.n	800380e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800382c:	4b28      	ldr	r3, [pc, #160]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	691b      	ldr	r3, [r3, #16]
 8003838:	00db      	lsls	r3, r3, #3
 800383a:	4925      	ldr	r1, [pc, #148]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 800383c:	4313      	orrs	r3, r2
 800383e:	600b      	str	r3, [r1, #0]
 8003840:	e015      	b.n	800386e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_OscConfig+0x278>)
 8003844:	2200      	movs	r2, #0
 8003846:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003848:	f7fe f9e0 	bl	8001c0c <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800384e:	e008      	b.n	8003862 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003850:	f7fe f9dc 	bl	8001c0c <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	2b02      	cmp	r3, #2
 800385c:	d901      	bls.n	8003862 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800385e:	2303      	movs	r3, #3
 8003860:	e193      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003862:	4b1b      	ldr	r3, [pc, #108]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f003 0302 	and.w	r3, r3, #2
 800386a:	2b00      	cmp	r3, #0
 800386c:	d1f0      	bne.n	8003850 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 0308 	and.w	r3, r3, #8
 8003876:	2b00      	cmp	r3, #0
 8003878:	d036      	beq.n	80038e8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d016      	beq.n	80038b0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003882:	4b15      	ldr	r3, [pc, #84]	; (80038d8 <HAL_RCC_OscConfig+0x27c>)
 8003884:	2201      	movs	r2, #1
 8003886:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003888:	f7fe f9c0 	bl	8001c0c <HAL_GetTick>
 800388c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800388e:	e008      	b.n	80038a2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003890:	f7fe f9bc 	bl	8001c0c <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	693b      	ldr	r3, [r7, #16]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	2b02      	cmp	r3, #2
 800389c:	d901      	bls.n	80038a2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800389e:	2303      	movs	r3, #3
 80038a0:	e173      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80038a2:	4b0b      	ldr	r3, [pc, #44]	; (80038d0 <HAL_RCC_OscConfig+0x274>)
 80038a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d0f0      	beq.n	8003890 <HAL_RCC_OscConfig+0x234>
 80038ae:	e01b      	b.n	80038e8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038b0:	4b09      	ldr	r3, [pc, #36]	; (80038d8 <HAL_RCC_OscConfig+0x27c>)
 80038b2:	2200      	movs	r2, #0
 80038b4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b6:	f7fe f9a9 	bl	8001c0c <HAL_GetTick>
 80038ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038bc:	e00e      	b.n	80038dc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80038be:	f7fe f9a5 	bl	8001c0c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	2b02      	cmp	r3, #2
 80038ca:	d907      	bls.n	80038dc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80038cc:	2303      	movs	r3, #3
 80038ce:	e15c      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
 80038d0:	40023800 	.word	0x40023800
 80038d4:	42470000 	.word	0x42470000
 80038d8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80038dc:	4b8a      	ldr	r3, [pc, #552]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 80038de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80038e0:	f003 0302 	and.w	r3, r3, #2
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d1ea      	bne.n	80038be <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f003 0304 	and.w	r3, r3, #4
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	f000 8097 	beq.w	8003a24 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f6:	2300      	movs	r3, #0
 80038f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80038fa:	4b83      	ldr	r3, [pc, #524]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 80038fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003902:	2b00      	cmp	r3, #0
 8003904:	d10f      	bne.n	8003926 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003906:	2300      	movs	r3, #0
 8003908:	60bb      	str	r3, [r7, #8]
 800390a:	4b7f      	ldr	r3, [pc, #508]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 800390c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800390e:	4a7e      	ldr	r2, [pc, #504]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003910:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003914:	6413      	str	r3, [r2, #64]	; 0x40
 8003916:	4b7c      	ldr	r3, [pc, #496]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800391a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800391e:	60bb      	str	r3, [r7, #8]
 8003920:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003922:	2301      	movs	r3, #1
 8003924:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003926:	4b79      	ldr	r3, [pc, #484]	; (8003b0c <HAL_RCC_OscConfig+0x4b0>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800392e:	2b00      	cmp	r3, #0
 8003930:	d118      	bne.n	8003964 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003932:	4b76      	ldr	r3, [pc, #472]	; (8003b0c <HAL_RCC_OscConfig+0x4b0>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a75      	ldr	r2, [pc, #468]	; (8003b0c <HAL_RCC_OscConfig+0x4b0>)
 8003938:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800393c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800393e:	f7fe f965 	bl	8001c0c <HAL_GetTick>
 8003942:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003944:	e008      	b.n	8003958 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003946:	f7fe f961 	bl	8001c0c <HAL_GetTick>
 800394a:	4602      	mov	r2, r0
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	1ad3      	subs	r3, r2, r3
 8003950:	2b02      	cmp	r3, #2
 8003952:	d901      	bls.n	8003958 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003954:	2303      	movs	r3, #3
 8003956:	e118      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003958:	4b6c      	ldr	r3, [pc, #432]	; (8003b0c <HAL_RCC_OscConfig+0x4b0>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003960:	2b00      	cmp	r3, #0
 8003962:	d0f0      	beq.n	8003946 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	2b01      	cmp	r3, #1
 800396a:	d106      	bne.n	800397a <HAL_RCC_OscConfig+0x31e>
 800396c:	4b66      	ldr	r3, [pc, #408]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 800396e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003970:	4a65      	ldr	r2, [pc, #404]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003972:	f043 0301 	orr.w	r3, r3, #1
 8003976:	6713      	str	r3, [r2, #112]	; 0x70
 8003978:	e01c      	b.n	80039b4 <HAL_RCC_OscConfig+0x358>
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	2b05      	cmp	r3, #5
 8003980:	d10c      	bne.n	800399c <HAL_RCC_OscConfig+0x340>
 8003982:	4b61      	ldr	r3, [pc, #388]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003986:	4a60      	ldr	r2, [pc, #384]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003988:	f043 0304 	orr.w	r3, r3, #4
 800398c:	6713      	str	r3, [r2, #112]	; 0x70
 800398e:	4b5e      	ldr	r3, [pc, #376]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003992:	4a5d      	ldr	r2, [pc, #372]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	6713      	str	r3, [r2, #112]	; 0x70
 800399a:	e00b      	b.n	80039b4 <HAL_RCC_OscConfig+0x358>
 800399c:	4b5a      	ldr	r3, [pc, #360]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 800399e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039a0:	4a59      	ldr	r2, [pc, #356]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 80039a2:	f023 0301 	bic.w	r3, r3, #1
 80039a6:	6713      	str	r3, [r2, #112]	; 0x70
 80039a8:	4b57      	ldr	r3, [pc, #348]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 80039aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039ac:	4a56      	ldr	r2, [pc, #344]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 80039ae:	f023 0304 	bic.w	r3, r3, #4
 80039b2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	689b      	ldr	r3, [r3, #8]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d015      	beq.n	80039e8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039bc:	f7fe f926 	bl	8001c0c <HAL_GetTick>
 80039c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039c2:	e00a      	b.n	80039da <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039c4:	f7fe f922 	bl	8001c0c <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d901      	bls.n	80039da <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e0d7      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039da:	4b4b      	ldr	r3, [pc, #300]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 80039dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d0ee      	beq.n	80039c4 <HAL_RCC_OscConfig+0x368>
 80039e6:	e014      	b.n	8003a12 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039e8:	f7fe f910 	bl	8001c0c <HAL_GetTick>
 80039ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80039f0:	f7fe f90c 	bl	8001c0c <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e0c1      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a06:	4b40      	ldr	r3, [pc, #256]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003a08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a0a:	f003 0302 	and.w	r3, r3, #2
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d1ee      	bne.n	80039f0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d105      	bne.n	8003a24 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a18:	4b3b      	ldr	r3, [pc, #236]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a1c:	4a3a      	ldr	r2, [pc, #232]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003a1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003a22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	f000 80ad 	beq.w	8003b88 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003a2e:	4b36      	ldr	r3, [pc, #216]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 030c 	and.w	r3, r3, #12
 8003a36:	2b08      	cmp	r3, #8
 8003a38:	d060      	beq.n	8003afc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d145      	bne.n	8003ace <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a42:	4b33      	ldr	r3, [pc, #204]	; (8003b10 <HAL_RCC_OscConfig+0x4b4>)
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a48:	f7fe f8e0 	bl	8001c0c <HAL_GetTick>
 8003a4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a4e:	e008      	b.n	8003a62 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a50:	f7fe f8dc 	bl	8001c0c <HAL_GetTick>
 8003a54:	4602      	mov	r2, r0
 8003a56:	693b      	ldr	r3, [r7, #16]
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b02      	cmp	r3, #2
 8003a5c:	d901      	bls.n	8003a62 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e093      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a62:	4b29      	ldr	r3, [pc, #164]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d1f0      	bne.n	8003a50 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69da      	ldr	r2, [r3, #28]
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a1b      	ldr	r3, [r3, #32]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7c:	019b      	lsls	r3, r3, #6
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	085b      	lsrs	r3, r3, #1
 8003a86:	3b01      	subs	r3, #1
 8003a88:	041b      	lsls	r3, r3, #16
 8003a8a:	431a      	orrs	r2, r3
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a90:	061b      	lsls	r3, r3, #24
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a98:	071b      	lsls	r3, r3, #28
 8003a9a:	491b      	ldr	r1, [pc, #108]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003a9c:	4313      	orrs	r3, r2
 8003a9e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003aa0:	4b1b      	ldr	r3, [pc, #108]	; (8003b10 <HAL_RCC_OscConfig+0x4b4>)
 8003aa2:	2201      	movs	r2, #1
 8003aa4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003aa6:	f7fe f8b1 	bl	8001c0c <HAL_GetTick>
 8003aaa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aac:	e008      	b.n	8003ac0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003aae:	f7fe f8ad 	bl	8001c0c <HAL_GetTick>
 8003ab2:	4602      	mov	r2, r0
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	1ad3      	subs	r3, r2, r3
 8003ab8:	2b02      	cmp	r3, #2
 8003aba:	d901      	bls.n	8003ac0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003abc:	2303      	movs	r3, #3
 8003abe:	e064      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0f0      	beq.n	8003aae <HAL_RCC_OscConfig+0x452>
 8003acc:	e05c      	b.n	8003b88 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <HAL_RCC_OscConfig+0x4b4>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ad4:	f7fe f89a 	bl	8001c0c <HAL_GetTick>
 8003ad8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ada:	e008      	b.n	8003aee <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003adc:	f7fe f896 	bl	8001c0c <HAL_GetTick>
 8003ae0:	4602      	mov	r2, r0
 8003ae2:	693b      	ldr	r3, [r7, #16]
 8003ae4:	1ad3      	subs	r3, r2, r3
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e04d      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003aee:	4b06      	ldr	r3, [pc, #24]	; (8003b08 <HAL_RCC_OscConfig+0x4ac>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d1f0      	bne.n	8003adc <HAL_RCC_OscConfig+0x480>
 8003afa:	e045      	b.n	8003b88 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	699b      	ldr	r3, [r3, #24]
 8003b00:	2b01      	cmp	r3, #1
 8003b02:	d107      	bne.n	8003b14 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e040      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
 8003b08:	40023800 	.word	0x40023800
 8003b0c:	40007000 	.word	0x40007000
 8003b10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003b14:	4b1f      	ldr	r3, [pc, #124]	; (8003b94 <HAL_RCC_OscConfig+0x538>)
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	699b      	ldr	r3, [r3, #24]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d030      	beq.n	8003b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d129      	bne.n	8003b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d122      	bne.n	8003b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b3e:	68fa      	ldr	r2, [r7, #12]
 8003b40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003b44:	4013      	ands	r3, r2
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003b4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d119      	bne.n	8003b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5a:	085b      	lsrs	r3, r3, #1
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003b60:	429a      	cmp	r2, r3
 8003b62:	d10f      	bne.n	8003b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003b70:	429a      	cmp	r2, r3
 8003b72:	d107      	bne.n	8003b84 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b7e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d001      	beq.n	8003b88 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003b84:	2301      	movs	r3, #1
 8003b86:	e000      	b.n	8003b8a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3718      	adds	r7, #24
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	40023800 	.word	0x40023800

08003b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b082      	sub	sp, #8
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e07b      	b.n	8003ca2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d108      	bne.n	8003bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	685b      	ldr	r3, [r3, #4]
 8003bb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bba:	d009      	beq.n	8003bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	61da      	str	r2, [r3, #28]
 8003bc2:	e005      	b.n	8003bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2200      	movs	r2, #0
 8003bce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bdc:	b2db      	uxtb	r3, r3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d106      	bne.n	8003bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd fe44 	bl	8001878 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2202      	movs	r2, #2
 8003bf4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	681a      	ldr	r2, [r3, #0]
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	689b      	ldr	r3, [r3, #8]
 8003c14:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c18:	431a      	orrs	r2, r3
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c22:	431a      	orrs	r2, r3
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	691b      	ldr	r3, [r3, #16]
 8003c28:	f003 0302 	and.w	r3, r3, #2
 8003c2c:	431a      	orrs	r2, r3
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	695b      	ldr	r3, [r3, #20]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	431a      	orrs	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	699b      	ldr	r3, [r3, #24]
 8003c3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c40:	431a      	orrs	r2, r3
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	69db      	ldr	r3, [r3, #28]
 8003c46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c54:	ea42 0103 	orr.w	r1, r2, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c5c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	430a      	orrs	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	0c1b      	lsrs	r3, r3, #16
 8003c6e:	f003 0104 	and.w	r1, r3, #4
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	f003 0210 	and.w	r2, r3, #16
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	69da      	ldr	r2, [r3, #28]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2200      	movs	r2, #0
 8003c96:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2201      	movs	r2, #1
 8003c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
	...

08003cac <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b086      	sub	sp, #24
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003cba:	2300      	movs	r3, #0
 8003cbc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d110      	bne.n	8003ce8 <HAL_SPI_Receive_IT+0x3c>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003cce:	d10b      	bne.n	8003ce8 <HAL_SPI_Receive_IT+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8003cd8:	88fb      	ldrh	r3, [r7, #6]
 8003cda:	68ba      	ldr	r2, [r7, #8]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	68f8      	ldr	r0, [r7, #12]
 8003ce0:	f000 f882 	bl	8003de8 <HAL_SPI_TransmitReceive_IT>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	e076      	b.n	8003dd6 <HAL_SPI_Receive_IT+0x12a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d101      	bne.n	8003cf6 <HAL_SPI_Receive_IT+0x4a>
 8003cf2:	2302      	movs	r3, #2
 8003cf4:	e06f      	b.n	8003dd6 <HAL_SPI_Receive_IT+0x12a>
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d04:	b2db      	uxtb	r3, r3
 8003d06:	2b01      	cmp	r3, #1
 8003d08:	d002      	beq.n	8003d10 <HAL_SPI_Receive_IT+0x64>
  {
    errorcode = HAL_BUSY;
 8003d0a:	2302      	movs	r3, #2
 8003d0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d0e:	e05d      	b.n	8003dcc <HAL_SPI_Receive_IT+0x120>
  }

  if ((pData == NULL) || (Size == 0U))
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_SPI_Receive_IT+0x70>
 8003d16:	88fb      	ldrh	r3, [r7, #6]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <HAL_SPI_Receive_IT+0x76>
  {
    errorcode = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003d20:	e054      	b.n	8003dcc <HAL_SPI_Receive_IT+0x120>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2204      	movs	r2, #4
 8003d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	68ba      	ldr	r2, [r7, #8]
 8003d34:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	88fa      	ldrh	r2, [r7, #6]
 8003d3a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	88fa      	ldrh	r2, [r7, #6]
 8003d40:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	2200      	movs	r2, #0
 8003d4c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	2200      	movs	r2, #0
 8003d52:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxISR       = NULL;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	645a      	str	r2, [r3, #68]	; 0x44

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	68db      	ldr	r3, [r3, #12]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_SPI_Receive_IT+0xbe>
  {
    hspi->RxISR = SPI_RxISR_16BIT;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4a1e      	ldr	r2, [pc, #120]	; (8003de0 <HAL_SPI_Receive_IT+0x134>)
 8003d66:	641a      	str	r2, [r3, #64]	; 0x40
 8003d68:	e002      	b.n	8003d70 <HAL_SPI_Receive_IT+0xc4>
  }
  else
  {
    hspi->RxISR = SPI_RxISR_8BIT;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	4a1d      	ldr	r2, [pc, #116]	; (8003de4 <HAL_SPI_Receive_IT+0x138>)
 8003d6e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d78:	d10f      	bne.n	8003d9a <HAL_SPI_Receive_IT+0xee>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	681a      	ldr	r2, [r3, #0]
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003d98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	685a      	ldr	r2, [r3, #4]
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8003da8:	605a      	str	r2, [r3, #4]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d008      	beq.n	8003dca <HAL_SPI_Receive_IT+0x11e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	e000      	b.n	8003dcc <HAL_SPI_Receive_IT+0x120>
  }

error :
 8003dca:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3718      	adds	r7, #24
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	08004349 	.word	0x08004349
 8003de4:	080042ff 	.word	0x080042ff

08003de8 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
 8003df4:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d101      	bne.n	8003e08 <HAL_SPI_TransmitReceive_IT+0x20>
 8003e04:	2302      	movs	r3, #2
 8003e06:	e075      	b.n	8003ef4 <HAL_SPI_TransmitReceive_IT+0x10c>
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e16:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003e1e:	7dbb      	ldrb	r3, [r7, #22]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d00d      	beq.n	8003e40 <HAL_SPI_TransmitReceive_IT+0x58>
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e2a:	d106      	bne.n	8003e3a <HAL_SPI_TransmitReceive_IT+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d102      	bne.n	8003e3a <HAL_SPI_TransmitReceive_IT+0x52>
 8003e34:	7dbb      	ldrb	r3, [r7, #22]
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d002      	beq.n	8003e40 <HAL_SPI_TransmitReceive_IT+0x58>
  {
    errorcode = HAL_BUSY;
 8003e3a:	2302      	movs	r3, #2
 8003e3c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e3e:	e054      	b.n	8003eea <HAL_SPI_TransmitReceive_IT+0x102>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d005      	beq.n	8003e52 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d002      	beq.n	8003e52 <HAL_SPI_TransmitReceive_IT+0x6a>
 8003e4c:	887b      	ldrh	r3, [r7, #2]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d102      	bne.n	8003e58 <HAL_SPI_TransmitReceive_IT+0x70>
  {
    errorcode = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e56:	e048      	b.n	8003eea <HAL_SPI_TransmitReceive_IT+0x102>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e5e:	b2db      	uxtb	r3, r3
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d003      	beq.n	8003e6c <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2205      	movs	r2, #5
 8003e68:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	68ba      	ldr	r2, [r7, #8]
 8003e76:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	887a      	ldrh	r2, [r7, #2]
 8003e7c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	887a      	ldrh	r2, [r7, #2]
 8003e82:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	687a      	ldr	r2, [r7, #4]
 8003e88:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	887a      	ldrh	r2, [r7, #2]
 8003e8e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	887a      	ldrh	r2, [r7, #2]
 8003e94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	68db      	ldr	r3, [r3, #12]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d006      	beq.n	8003eac <HAL_SPI_TransmitReceive_IT+0xc4>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	4a17      	ldr	r2, [pc, #92]	; (8003f00 <HAL_SPI_TransmitReceive_IT+0x118>)
 8003ea2:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a17      	ldr	r2, [pc, #92]	; (8003f04 <HAL_SPI_TransmitReceive_IT+0x11c>)
 8003ea8:	645a      	str	r2, [r3, #68]	; 0x44
 8003eaa:	e005      	b.n	8003eb8 <HAL_SPI_TransmitReceive_IT+0xd0>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	4a16      	ldr	r2, [pc, #88]	; (8003f08 <HAL_SPI_TransmitReceive_IT+0x120>)
 8003eb0:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a15      	ldr	r2, [pc, #84]	; (8003f0c <HAL_SPI_TransmitReceive_IT+0x124>)
 8003eb6:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	685a      	ldr	r2, [r3, #4]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8003ec6:	605a      	str	r2, [r3, #4]

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed2:	2b40      	cmp	r3, #64	; 0x40
 8003ed4:	d008      	beq.n	8003ee8 <HAL_SPI_TransmitReceive_IT+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e000      	b.n	8003eea <HAL_SPI_TransmitReceive_IT+0x102>
  }

error :
 8003ee8:	bf00      	nop
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	2200      	movs	r2, #0
 8003eee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003ef2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	371c      	adds	r7, #28
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr
 8003f00:	08004241 	.word	0x08004241
 8003f04:	080042a1 	.word	0x080042a1
 8003f08:	0800417d 	.word	0x0800417d
 8003f0c:	080041e1 	.word	0x080041e1

08003f10 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685b      	ldr	r3, [r3, #4]
 8003f1e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f28:	69bb      	ldr	r3, [r7, #24]
 8003f2a:	099b      	lsrs	r3, r3, #6
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d10f      	bne.n	8003f54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f34:	69bb      	ldr	r3, [r7, #24]
 8003f36:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d00a      	beq.n	8003f54 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f3e:	69fb      	ldr	r3, [r7, #28]
 8003f40:	099b      	lsrs	r3, r3, #6
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d004      	beq.n	8003f54 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	4798      	blx	r3
    return;
 8003f52:	e0d7      	b.n	8004104 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	085b      	lsrs	r3, r3, #1
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <HAL_SPI_IRQHandler+0x66>
 8003f60:	69fb      	ldr	r3, [r7, #28]
 8003f62:	09db      	lsrs	r3, r3, #7
 8003f64:	f003 0301 	and.w	r3, r3, #1
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d004      	beq.n	8003f76 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	4798      	blx	r3
    return;
 8003f74:	e0c6      	b.n	8004104 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f76:	69bb      	ldr	r3, [r7, #24]
 8003f78:	095b      	lsrs	r3, r3, #5
 8003f7a:	f003 0301 	and.w	r3, r3, #1
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d10c      	bne.n	8003f9c <HAL_SPI_IRQHandler+0x8c>
 8003f82:	69bb      	ldr	r3, [r7, #24]
 8003f84:	099b      	lsrs	r3, r3, #6
 8003f86:	f003 0301 	and.w	r3, r3, #1
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	0a1b      	lsrs	r3, r3, #8
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80b4 	beq.w	8004104 <HAL_SPI_IRQHandler+0x1f4>
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 80ad 	beq.w	8004104 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	099b      	lsrs	r3, r3, #6
 8003fae:	f003 0301 	and.w	r3, r3, #1
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d023      	beq.n	8003ffe <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b03      	cmp	r3, #3
 8003fc0:	d011      	beq.n	8003fe6 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fce:	2300      	movs	r3, #0
 8003fd0:	617b      	str	r3, [r7, #20]
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	617b      	str	r3, [r7, #20]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	617b      	str	r3, [r7, #20]
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	e00b      	b.n	8003ffe <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	613b      	str	r3, [r7, #16]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	613b      	str	r3, [r7, #16]
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	613b      	str	r3, [r7, #16]
 8003ffa:	693b      	ldr	r3, [r7, #16]
        return;
 8003ffc:	e082      	b.n	8004104 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	095b      	lsrs	r3, r3, #5
 8004002:	f003 0301 	and.w	r3, r3, #1
 8004006:	2b00      	cmp	r3, #0
 8004008:	d014      	beq.n	8004034 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800400e:	f043 0201 	orr.w	r2, r3, #1
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8004016:	2300      	movs	r3, #0
 8004018:	60fb      	str	r3, [r7, #12]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	60fb      	str	r3, [r7, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8004034:	69bb      	ldr	r3, [r7, #24]
 8004036:	0a1b      	lsrs	r3, r3, #8
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00c      	beq.n	800405a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	f043 0208 	orr.w	r2, r3, #8
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800404c:	2300      	movs	r3, #0
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800405e:	2b00      	cmp	r3, #0
 8004060:	d04f      	beq.n	8004102 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	685a      	ldr	r2, [r3, #4]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004070:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2201      	movs	r2, #1
 8004076:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f003 0302 	and.w	r3, r3, #2
 8004080:	2b00      	cmp	r3, #0
 8004082:	d104      	bne.n	800408e <HAL_SPI_IRQHandler+0x17e>
 8004084:	69fb      	ldr	r3, [r7, #28]
 8004086:	f003 0301 	and.w	r3, r3, #1
 800408a:	2b00      	cmp	r3, #0
 800408c:	d034      	beq.n	80040f8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	685a      	ldr	r2, [r3, #4]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f022 0203 	bic.w	r2, r2, #3
 800409c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d011      	beq.n	80040ca <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040aa:	4a18      	ldr	r2, [pc, #96]	; (800410c <HAL_SPI_IRQHandler+0x1fc>)
 80040ac:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fe fd4d 	bl	8002b52 <HAL_DMA_Abort_IT>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d005      	beq.n	80040ca <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040c2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d016      	beq.n	8004100 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040d6:	4a0d      	ldr	r2, [pc, #52]	; (800410c <HAL_SPI_IRQHandler+0x1fc>)
 80040d8:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80040de:	4618      	mov	r0, r3
 80040e0:	f7fe fd37 	bl	8002b52 <HAL_DMA_Abort_IT>
 80040e4:	4603      	mov	r3, r0
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00a      	beq.n	8004100 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ee:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80040f6:	e003      	b.n	8004100 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 f813 	bl	8004124 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80040fe:	e000      	b.n	8004102 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004100:	bf00      	nop
    return;
 8004102:	bf00      	nop
  }
}
 8004104:	3720      	adds	r7, #32
 8004106:	46bd      	mov	sp, r7
 8004108:	bd80      	pop	{r7, pc}
 800410a:	bf00      	nop
 800410c:	08004155 	.word	0x08004155

08004110 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 8004118:	bf00      	nop
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 800412c:	bf00      	nop
 800412e:	370c      	adds	r7, #12
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr

08004138 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004138:	b480      	push	{r7}
 800413a:	b083      	sub	sp, #12
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004146:	b2db      	uxtb	r3, r3
}
 8004148:	4618      	mov	r0, r3
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b084      	sub	sp, #16
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004160:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2200      	movs	r2, #0
 8004166:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	2200      	movs	r2, #0
 800416c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800416e:	68f8      	ldr	r0, [r7, #12]
 8004170:	f7ff ffd8 	bl	8004124 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004174:	bf00      	nop
 8004176:	3710      	adds	r7, #16
 8004178:	46bd      	mov	sp, r7
 800417a:	bd80      	pop	{r7, pc}

0800417c <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Receive data in 8bit mode */
  *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f103 020c 	add.w	r2, r3, #12
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004190:	7812      	ldrb	r2, [r2, #0]
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041a4:	b29b      	uxth	r3, r3
 80041a6:	3b01      	subs	r3, #1
 80041a8:	b29a      	uxth	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b2:	b29b      	uxth	r3, r3
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d10f      	bne.n	80041d8 <SPI_2linesRxISR_8BIT+0x5c>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	685a      	ldr	r2, [r3, #4]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041c6:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d102      	bne.n	80041d8 <SPI_2linesRxISR_8BIT+0x5c>
    {
      SPI_CloseRxTx_ISR(hspi);
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 fa0c 	bl	80045f0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80041d8:	bf00      	nop
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b082      	sub	sp, #8
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	330c      	adds	r3, #12
 80041f2:	7812      	ldrb	r2, [r2, #0]
 80041f4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004212:	b29b      	uxth	r3, r3
 8004214:	2b00      	cmp	r3, #0
 8004216:	d10f      	bne.n	8004238 <SPI_2linesTxISR_8BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	685a      	ldr	r2, [r3, #4]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004226:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <SPI_2linesTxISR_8BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f9dc 	bl	80045f0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004238:	bf00      	nop
 800423a:	3708      	adds	r7, #8
 800423c:	46bd      	mov	sp, r7
 800423e:	bd80      	pop	{r7, pc}

08004240 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004240:	b580      	push	{r7, lr}
 8004242:	b082      	sub	sp, #8
 8004244:	af00      	add	r7, sp, #0
 8004246:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004252:	b292      	uxth	r2, r2
 8004254:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425a:	1c9a      	adds	r2, r3, #2
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004264:	b29b      	uxth	r3, r3
 8004266:	3b01      	subs	r3, #1
 8004268:	b29a      	uxth	r2, r3
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->RxXferCount == 0U)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004272:	b29b      	uxth	r3, r3
 8004274:	2b00      	cmp	r3, #0
 8004276:	d10f      	bne.n	8004298 <SPI_2linesRxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004286:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800428c:	b29b      	uxth	r3, r3
 800428e:	2b00      	cmp	r3, #0
 8004290:	d102      	bne.n	8004298 <SPI_2linesRxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f000 f9ac 	bl	80045f0 <SPI_CloseRxTx_ISR>
    }
  }
}
 8004298:	bf00      	nop
 800429a:	3708      	adds	r7, #8
 800429c:	46bd      	mov	sp, r7
 800429e:	bd80      	pop	{r7, pc}

080042a0 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 80042a0:	b580      	push	{r7, lr}
 80042a2:	b082      	sub	sp, #8
 80042a4:	af00      	add	r7, sp, #0
 80042a6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ac:	881a      	ldrh	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b8:	1c9a      	adds	r2, r3, #2
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount--;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	3b01      	subs	r3, #1
 80042c6:	b29a      	uxth	r2, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d10f      	bne.n	80042f6 <SPI_2linesTxISR_16BIT+0x56>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042e4:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042ea:	b29b      	uxth	r3, r3
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d102      	bne.n	80042f6 <SPI_2linesTxISR_16BIT+0x56>
    {
      SPI_CloseRxTx_ISR(hspi);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f97d 	bl	80045f0 <SPI_CloseRxTx_ISR>
    }
  }
}
 80042f6:	bf00      	nop
 80042f8:	3708      	adds	r7, #8
 80042fa:	46bd      	mov	sp, r7
 80042fc:	bd80      	pop	{r7, pc}

080042fe <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 80042fe:	b580      	push	{r7, lr}
 8004300:	b082      	sub	sp, #8
 8004302:	af00      	add	r7, sp, #0
 8004304:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f103 020c 	add.w	r2, r3, #12
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004312:	7812      	ldrb	r2, [r2, #0]
 8004314:	b2d2      	uxtb	r2, r2
 8004316:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004334:	b29b      	uxth	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d102      	bne.n	8004340 <SPI_RxISR_8BIT+0x42>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	f000 f9cc 	bl	80046d8 <SPI_CloseRx_ISR>
  }
}
 8004340:	bf00      	nop
 8004342:	3708      	adds	r7, #8
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b082      	sub	sp, #8
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	68da      	ldr	r2, [r3, #12]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800435a:	b292      	uxth	r2, r2
 800435c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004362:	1c9a      	adds	r2, r3, #2
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount--;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800436c:	b29b      	uxth	r3, r3
 800436e:	3b01      	subs	r3, #1
 8004370:	b29a      	uxth	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	87da      	strh	r2, [r3, #62]	; 0x3e
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800437a:	b29b      	uxth	r3, r3
 800437c:	2b00      	cmp	r3, #0
 800437e:	d102      	bne.n	8004386 <SPI_RxISR_16BIT+0x3e>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 8004380:	6878      	ldr	r0, [r7, #4]
 8004382:	f000 f9a9 	bl	80046d8 <SPI_CloseRx_ISR>
  }
}
 8004386:	bf00      	nop
 8004388:	3708      	adds	r7, #8
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
	...

08004390 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b088      	sub	sp, #32
 8004394:	af00      	add	r7, sp, #0
 8004396:	60f8      	str	r0, [r7, #12]
 8004398:	60b9      	str	r1, [r7, #8]
 800439a:	603b      	str	r3, [r7, #0]
 800439c:	4613      	mov	r3, r2
 800439e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043a0:	f7fd fc34 	bl	8001c0c <HAL_GetTick>
 80043a4:	4602      	mov	r2, r0
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	1a9b      	subs	r3, r3, r2
 80043aa:	683a      	ldr	r2, [r7, #0]
 80043ac:	4413      	add	r3, r2
 80043ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043b0:	f7fd fc2c 	bl	8001c0c <HAL_GetTick>
 80043b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043b6:	4b39      	ldr	r3, [pc, #228]	; (800449c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	015b      	lsls	r3, r3, #5
 80043bc:	0d1b      	lsrs	r3, r3, #20
 80043be:	69fa      	ldr	r2, [r7, #28]
 80043c0:	fb02 f303 	mul.w	r3, r2, r3
 80043c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043c6:	e054      	b.n	8004472 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ce:	d050      	beq.n	8004472 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043d0:	f7fd fc1c 	bl	8001c0c <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	69bb      	ldr	r3, [r7, #24]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	69fa      	ldr	r2, [r7, #28]
 80043dc:	429a      	cmp	r2, r3
 80043de:	d902      	bls.n	80043e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80043e0:	69fb      	ldr	r3, [r7, #28]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d13d      	bne.n	8004462 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	685b      	ldr	r3, [r3, #4]
 80043fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043fe:	d111      	bne.n	8004424 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	689b      	ldr	r3, [r3, #8]
 8004404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004408:	d004      	beq.n	8004414 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004412:	d107      	bne.n	8004424 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004422:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800442c:	d10f      	bne.n	800444e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800444c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2200      	movs	r2, #0
 800445a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800445e:	2303      	movs	r3, #3
 8004460:	e017      	b.n	8004492 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d101      	bne.n	800446c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	3b01      	subs	r3, #1
 8004470:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	689a      	ldr	r2, [r3, #8]
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	4013      	ands	r3, r2
 800447c:	68ba      	ldr	r2, [r7, #8]
 800447e:	429a      	cmp	r2, r3
 8004480:	bf0c      	ite	eq
 8004482:	2301      	moveq	r3, #1
 8004484:	2300      	movne	r3, #0
 8004486:	b2db      	uxtb	r3, r3
 8004488:	461a      	mov	r2, r3
 800448a:	79fb      	ldrb	r3, [r7, #7]
 800448c:	429a      	cmp	r2, r3
 800448e:	d19b      	bne.n	80043c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004490:	2300      	movs	r3, #0
}
 8004492:	4618      	mov	r0, r3
 8004494:	3720      	adds	r7, #32
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	20000004 	.word	0x20000004

080044a0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af02      	add	r7, sp, #8
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044b4:	d111      	bne.n	80044da <SPI_EndRxTransaction+0x3a>
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044be:	d004      	beq.n	80044ca <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044c8:	d107      	bne.n	80044da <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	681a      	ldr	r2, [r3, #0]
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044d8:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	685b      	ldr	r3, [r3, #4]
 80044de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044e2:	d12a      	bne.n	800453a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044ec:	d012      	beq.n	8004514 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	9300      	str	r3, [sp, #0]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	2200      	movs	r2, #0
 80044f6:	2180      	movs	r1, #128	; 0x80
 80044f8:	68f8      	ldr	r0, [r7, #12]
 80044fa:	f7ff ff49 	bl	8004390 <SPI_WaitFlagStateUntilTimeout>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d02d      	beq.n	8004560 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004508:	f043 0220 	orr.w	r2, r3, #32
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004510:	2303      	movs	r3, #3
 8004512:	e026      	b.n	8004562 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	9300      	str	r3, [sp, #0]
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2200      	movs	r2, #0
 800451c:	2101      	movs	r1, #1
 800451e:	68f8      	ldr	r0, [r7, #12]
 8004520:	f7ff ff36 	bl	8004390 <SPI_WaitFlagStateUntilTimeout>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01a      	beq.n	8004560 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452e:	f043 0220 	orr.w	r2, r3, #32
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004536:	2303      	movs	r3, #3
 8004538:	e013      	b.n	8004562 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2200      	movs	r2, #0
 8004542:	2101      	movs	r1, #1
 8004544:	68f8      	ldr	r0, [r7, #12]
 8004546:	f7ff ff23 	bl	8004390 <SPI_WaitFlagStateUntilTimeout>
 800454a:	4603      	mov	r3, r0
 800454c:	2b00      	cmp	r3, #0
 800454e:	d007      	beq.n	8004560 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004554:	f043 0220 	orr.w	r2, r3, #32
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800455c:	2303      	movs	r3, #3
 800455e:	e000      	b.n	8004562 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004560:	2300      	movs	r3, #0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3710      	adds	r7, #16
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
	...

0800456c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b088      	sub	sp, #32
 8004570:	af02      	add	r7, sp, #8
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004578:	4b1b      	ldr	r3, [pc, #108]	; (80045e8 <SPI_EndRxTxTransaction+0x7c>)
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	4a1b      	ldr	r2, [pc, #108]	; (80045ec <SPI_EndRxTxTransaction+0x80>)
 800457e:	fba2 2303 	umull	r2, r3, r2, r3
 8004582:	0d5b      	lsrs	r3, r3, #21
 8004584:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004588:	fb02 f303 	mul.w	r3, r2, r3
 800458c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004596:	d112      	bne.n	80045be <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	9300      	str	r3, [sp, #0]
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	2200      	movs	r2, #0
 80045a0:	2180      	movs	r1, #128	; 0x80
 80045a2:	68f8      	ldr	r0, [r7, #12]
 80045a4:	f7ff fef4 	bl	8004390 <SPI_WaitFlagStateUntilTimeout>
 80045a8:	4603      	mov	r3, r0
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d016      	beq.n	80045dc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b2:	f043 0220 	orr.w	r2, r3, #32
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e00f      	b.n	80045de <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045be:	697b      	ldr	r3, [r7, #20]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d00a      	beq.n	80045da <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	3b01      	subs	r3, #1
 80045c8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	689b      	ldr	r3, [r3, #8]
 80045d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045d4:	2b80      	cmp	r3, #128	; 0x80
 80045d6:	d0f2      	beq.n	80045be <SPI_EndRxTxTransaction+0x52>
 80045d8:	e000      	b.n	80045dc <SPI_EndRxTxTransaction+0x70>
        break;
 80045da:	bf00      	nop
  }

  return HAL_OK;
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	3718      	adds	r7, #24
 80045e2:	46bd      	mov	sp, r7
 80045e4:	bd80      	pop	{r7, pc}
 80045e6:	bf00      	nop
 80045e8:	20000004 	.word	0x20000004
 80045ec:	165e9f81 	.word	0x165e9f81

080045f0 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b086      	sub	sp, #24
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 80045f8:	4b35      	ldr	r3, [pc, #212]	; (80046d0 <SPI_CloseRxTx_ISR+0xe0>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a35      	ldr	r2, [pc, #212]	; (80046d4 <SPI_CloseRxTx_ISR+0xe4>)
 80045fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004602:	0a5b      	lsrs	r3, r3, #9
 8004604:	2264      	movs	r2, #100	; 0x64
 8004606:	fb02 f303 	mul.w	r3, r2, r3
 800460a:	613b      	str	r3, [r7, #16]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800460c:	f7fd fafe 	bl	8001c0c <HAL_GetTick>
 8004610:	6178      	str	r0, [r7, #20]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	685a      	ldr	r2, [r3, #4]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f022 0220 	bic.w	r2, r2, #32
 8004620:	605a      	str	r2, [r3, #4]

  /* Wait until TXE flag is set */
  do
  {
    if (count == 0U)
 8004622:	693b      	ldr	r3, [r7, #16]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d106      	bne.n	8004636 <SPI_CloseRxTx_ISR+0x46>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800462c:	f043 0220 	orr.w	r2, r3, #32
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004634:	e009      	b.n	800464a <SPI_CloseRxTx_ISR+0x5a>
    }
    count--;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	3b01      	subs	r3, #1
 800463a:	613b      	str	r3, [r7, #16]
  } while ((hspi->Instance->SR & SPI_FLAG_TXE) == RESET);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f003 0302 	and.w	r3, r3, #2
 8004646:	2b00      	cmp	r3, #0
 8004648:	d0eb      	beq.n	8004622 <SPI_CloseRxTx_ISR+0x32>

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	2164      	movs	r1, #100	; 0x64
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f7ff ff8c 	bl	800456c <SPI_EndRxTxTransaction>
 8004654:	4603      	mov	r3, r0
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <SPI_CloseRxTx_ISR+0x76>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800465e:	f043 0220 	orr.w	r2, r3, #32
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d10a      	bne.n	8004684 <SPI_CloseRxTx_ISR+0x94>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800466e:	2300      	movs	r3, #0
 8004670:	60fb      	str	r3, [r7, #12]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68db      	ldr	r3, [r3, #12]
 8004678:	60fb      	str	r3, [r7, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	60fb      	str	r3, [r7, #12]
 8004682:	68fb      	ldr	r3, [r7, #12]
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	2b00      	cmp	r3, #0
 800468a:	d115      	bne.n	80046b8 <SPI_CloseRxTx_ISR+0xc8>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b04      	cmp	r3, #4
 8004696:	d107      	bne.n	80046a8 <SPI_CloseRxTx_ISR+0xb8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2201      	movs	r2, #1
 800469c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f7fc ff7f 	bl	80015a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 80046a6:	e00e      	b.n	80046c6 <SPI_CloseRxTx_ISR+0xd6>
        hspi->State = HAL_SPI_STATE_READY;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2201      	movs	r2, #1
 80046ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        HAL_SPI_TxRxCpltCallback(hspi);
 80046b0:	6878      	ldr	r0, [r7, #4]
 80046b2:	f7ff fd2d 	bl	8004110 <HAL_SPI_TxRxCpltCallback>
}
 80046b6:	e006      	b.n	80046c6 <SPI_CloseRxTx_ISR+0xd6>
      hspi->State = HAL_SPI_STATE_READY;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2201      	movs	r2, #1
 80046bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      HAL_SPI_ErrorCallback(hspi);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff fd2f 	bl	8004124 <HAL_SPI_ErrorCallback>
}
 80046c6:	bf00      	nop
 80046c8:	3718      	adds	r7, #24
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
 80046ce:	bf00      	nop
 80046d0:	20000004 	.word	0x20000004
 80046d4:	057619f1 	.word	0x057619f1

080046d8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	685a      	ldr	r2, [r3, #4]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80046ee:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 80046f0:	f7fd fa8c 	bl	8001c0c <HAL_GetTick>
 80046f4:	4603      	mov	r3, r0
 80046f6:	461a      	mov	r2, r3
 80046f8:	2164      	movs	r1, #100	; 0x64
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fed0 	bl	80044a0 <SPI_EndRxTransaction>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	f043 0220 	orr.w	r2, r3, #32
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	2b00      	cmp	r3, #0
 8004718:	d10a      	bne.n	8004730 <SPI_CloseRx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800471a:	2300      	movs	r3, #0
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	60fb      	str	r3, [r7, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	60fb      	str	r3, [r7, #12]
 800472e:	68fb      	ldr	r3, [r7, #12]
  }
  hspi->State = HAL_SPI_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800473c:	2b00      	cmp	r3, #0
 800473e:	d103      	bne.n	8004748 <SPI_CloseRx_ISR+0x70>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f7fc ff2f 	bl	80015a4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 8004746:	e002      	b.n	800474e <SPI_CloseRx_ISR+0x76>
      HAL_SPI_ErrorCallback(hspi);
 8004748:	6878      	ldr	r0, [r7, #4]
 800474a:	f7ff fceb 	bl	8004124 <HAL_SPI_ErrorCallback>
}
 800474e:	bf00      	nop
 8004750:	3710      	adds	r7, #16
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}

08004756 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004764:	2301      	movs	r3, #1
 8004766:	e03f      	b.n	80047e8 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800476e:	b2db      	uxtb	r3, r3
 8004770:	2b00      	cmp	r3, #0
 8004772:	d106      	bne.n	8004782 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f7fd f96d 	bl	8001a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2224      	movs	r2, #36	; 0x24
 8004786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	68da      	ldr	r2, [r3, #12]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004798:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f828 	bl	80047f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	691a      	ldr	r2, [r3, #16]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695a      	ldr	r2, [r3, #20]
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	68da      	ldr	r2, [r3, #12]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80047e6:	2300      	movs	r3, #0
}
 80047e8:	4618      	mov	r0, r3
 80047ea:	3708      	adds	r7, #8
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}

080047f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80047f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047f4:	b0c0      	sub	sp, #256	; 0x100
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800480c:	68d9      	ldr	r1, [r3, #12]
 800480e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	ea40 0301 	orr.w	r3, r0, r1
 8004818:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800481e:	689a      	ldr	r2, [r3, #8]
 8004820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	431a      	orrs	r2, r3
 8004828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	431a      	orrs	r2, r3
 8004830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004834:	69db      	ldr	r3, [r3, #28]
 8004836:	4313      	orrs	r3, r2
 8004838:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800483c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	68db      	ldr	r3, [r3, #12]
 8004844:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004848:	f021 010c 	bic.w	r1, r1, #12
 800484c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004850:	681a      	ldr	r2, [r3, #0]
 8004852:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004856:	430b      	orrs	r3, r1
 8004858:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800485a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004866:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800486a:	6999      	ldr	r1, [r3, #24]
 800486c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004870:	681a      	ldr	r2, [r3, #0]
 8004872:	ea40 0301 	orr.w	r3, r0, r1
 8004876:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004878:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	4b8f      	ldr	r3, [pc, #572]	; (8004abc <UART_SetConfig+0x2cc>)
 8004880:	429a      	cmp	r2, r3
 8004882:	d005      	beq.n	8004890 <UART_SetConfig+0xa0>
 8004884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004888:	681a      	ldr	r2, [r3, #0]
 800488a:	4b8d      	ldr	r3, [pc, #564]	; (8004ac0 <UART_SetConfig+0x2d0>)
 800488c:	429a      	cmp	r2, r3
 800488e:	d104      	bne.n	800489a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004890:	f7fe fca0 	bl	80031d4 <HAL_RCC_GetPCLK2Freq>
 8004894:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004898:	e003      	b.n	80048a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800489a:	f7fe fc87 	bl	80031ac <HAL_RCC_GetPCLK1Freq>
 800489e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80048a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048a6:	69db      	ldr	r3, [r3, #28]
 80048a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80048ac:	f040 810c 	bne.w	8004ac8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80048b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80048b4:	2200      	movs	r2, #0
 80048b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80048ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80048be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80048c2:	4622      	mov	r2, r4
 80048c4:	462b      	mov	r3, r5
 80048c6:	1891      	adds	r1, r2, r2
 80048c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80048ca:	415b      	adcs	r3, r3
 80048cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80048ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80048d2:	4621      	mov	r1, r4
 80048d4:	eb12 0801 	adds.w	r8, r2, r1
 80048d8:	4629      	mov	r1, r5
 80048da:	eb43 0901 	adc.w	r9, r3, r1
 80048de:	f04f 0200 	mov.w	r2, #0
 80048e2:	f04f 0300 	mov.w	r3, #0
 80048e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80048ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80048ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80048f2:	4690      	mov	r8, r2
 80048f4:	4699      	mov	r9, r3
 80048f6:	4623      	mov	r3, r4
 80048f8:	eb18 0303 	adds.w	r3, r8, r3
 80048fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004900:	462b      	mov	r3, r5
 8004902:	eb49 0303 	adc.w	r3, r9, r3
 8004906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490e:	685b      	ldr	r3, [r3, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004916:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800491a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800491e:	460b      	mov	r3, r1
 8004920:	18db      	adds	r3, r3, r3
 8004922:	653b      	str	r3, [r7, #80]	; 0x50
 8004924:	4613      	mov	r3, r2
 8004926:	eb42 0303 	adc.w	r3, r2, r3
 800492a:	657b      	str	r3, [r7, #84]	; 0x54
 800492c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004930:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004934:	f7fc f85c 	bl	80009f0 <__aeabi_uldivmod>
 8004938:	4602      	mov	r2, r0
 800493a:	460b      	mov	r3, r1
 800493c:	4b61      	ldr	r3, [pc, #388]	; (8004ac4 <UART_SetConfig+0x2d4>)
 800493e:	fba3 2302 	umull	r2, r3, r3, r2
 8004942:	095b      	lsrs	r3, r3, #5
 8004944:	011c      	lsls	r4, r3, #4
 8004946:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800494a:	2200      	movs	r2, #0
 800494c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004950:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004954:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004958:	4642      	mov	r2, r8
 800495a:	464b      	mov	r3, r9
 800495c:	1891      	adds	r1, r2, r2
 800495e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004960:	415b      	adcs	r3, r3
 8004962:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004964:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004968:	4641      	mov	r1, r8
 800496a:	eb12 0a01 	adds.w	sl, r2, r1
 800496e:	4649      	mov	r1, r9
 8004970:	eb43 0b01 	adc.w	fp, r3, r1
 8004974:	f04f 0200 	mov.w	r2, #0
 8004978:	f04f 0300 	mov.w	r3, #0
 800497c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004980:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004984:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004988:	4692      	mov	sl, r2
 800498a:	469b      	mov	fp, r3
 800498c:	4643      	mov	r3, r8
 800498e:	eb1a 0303 	adds.w	r3, sl, r3
 8004992:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004996:	464b      	mov	r3, r9
 8004998:	eb4b 0303 	adc.w	r3, fp, r3
 800499c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049a4:	685b      	ldr	r3, [r3, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80049b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80049b4:	460b      	mov	r3, r1
 80049b6:	18db      	adds	r3, r3, r3
 80049b8:	643b      	str	r3, [r7, #64]	; 0x40
 80049ba:	4613      	mov	r3, r2
 80049bc:	eb42 0303 	adc.w	r3, r2, r3
 80049c0:	647b      	str	r3, [r7, #68]	; 0x44
 80049c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80049ca:	f7fc f811 	bl	80009f0 <__aeabi_uldivmod>
 80049ce:	4602      	mov	r2, r0
 80049d0:	460b      	mov	r3, r1
 80049d2:	4611      	mov	r1, r2
 80049d4:	4b3b      	ldr	r3, [pc, #236]	; (8004ac4 <UART_SetConfig+0x2d4>)
 80049d6:	fba3 2301 	umull	r2, r3, r3, r1
 80049da:	095b      	lsrs	r3, r3, #5
 80049dc:	2264      	movs	r2, #100	; 0x64
 80049de:	fb02 f303 	mul.w	r3, r2, r3
 80049e2:	1acb      	subs	r3, r1, r3
 80049e4:	00db      	lsls	r3, r3, #3
 80049e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80049ea:	4b36      	ldr	r3, [pc, #216]	; (8004ac4 <UART_SetConfig+0x2d4>)
 80049ec:	fba3 2302 	umull	r2, r3, r3, r2
 80049f0:	095b      	lsrs	r3, r3, #5
 80049f2:	005b      	lsls	r3, r3, #1
 80049f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80049f8:	441c      	add	r4, r3
 80049fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049fe:	2200      	movs	r2, #0
 8004a00:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004a04:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004a08:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004a0c:	4642      	mov	r2, r8
 8004a0e:	464b      	mov	r3, r9
 8004a10:	1891      	adds	r1, r2, r2
 8004a12:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a14:	415b      	adcs	r3, r3
 8004a16:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a18:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a1c:	4641      	mov	r1, r8
 8004a1e:	1851      	adds	r1, r2, r1
 8004a20:	6339      	str	r1, [r7, #48]	; 0x30
 8004a22:	4649      	mov	r1, r9
 8004a24:	414b      	adcs	r3, r1
 8004a26:	637b      	str	r3, [r7, #52]	; 0x34
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004a34:	4659      	mov	r1, fp
 8004a36:	00cb      	lsls	r3, r1, #3
 8004a38:	4651      	mov	r1, sl
 8004a3a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a3e:	4651      	mov	r1, sl
 8004a40:	00ca      	lsls	r2, r1, #3
 8004a42:	4610      	mov	r0, r2
 8004a44:	4619      	mov	r1, r3
 8004a46:	4603      	mov	r3, r0
 8004a48:	4642      	mov	r2, r8
 8004a4a:	189b      	adds	r3, r3, r2
 8004a4c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004a50:	464b      	mov	r3, r9
 8004a52:	460a      	mov	r2, r1
 8004a54:	eb42 0303 	adc.w	r3, r2, r3
 8004a58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004a5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004a68:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004a6c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004a70:	460b      	mov	r3, r1
 8004a72:	18db      	adds	r3, r3, r3
 8004a74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004a76:	4613      	mov	r3, r2
 8004a78:	eb42 0303 	adc.w	r3, r2, r3
 8004a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a7e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a82:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004a86:	f7fb ffb3 	bl	80009f0 <__aeabi_uldivmod>
 8004a8a:	4602      	mov	r2, r0
 8004a8c:	460b      	mov	r3, r1
 8004a8e:	4b0d      	ldr	r3, [pc, #52]	; (8004ac4 <UART_SetConfig+0x2d4>)
 8004a90:	fba3 1302 	umull	r1, r3, r3, r2
 8004a94:	095b      	lsrs	r3, r3, #5
 8004a96:	2164      	movs	r1, #100	; 0x64
 8004a98:	fb01 f303 	mul.w	r3, r1, r3
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	00db      	lsls	r3, r3, #3
 8004aa0:	3332      	adds	r3, #50	; 0x32
 8004aa2:	4a08      	ldr	r2, [pc, #32]	; (8004ac4 <UART_SetConfig+0x2d4>)
 8004aa4:	fba2 2303 	umull	r2, r3, r2, r3
 8004aa8:	095b      	lsrs	r3, r3, #5
 8004aaa:	f003 0207 	and.w	r2, r3, #7
 8004aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4422      	add	r2, r4
 8004ab6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ab8:	e105      	b.n	8004cc6 <UART_SetConfig+0x4d6>
 8004aba:	bf00      	nop
 8004abc:	40011000 	.word	0x40011000
 8004ac0:	40011400 	.word	0x40011400
 8004ac4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ac8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004acc:	2200      	movs	r2, #0
 8004ace:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004ad2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004ad6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004ada:	4642      	mov	r2, r8
 8004adc:	464b      	mov	r3, r9
 8004ade:	1891      	adds	r1, r2, r2
 8004ae0:	6239      	str	r1, [r7, #32]
 8004ae2:	415b      	adcs	r3, r3
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ae6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004aea:	4641      	mov	r1, r8
 8004aec:	1854      	adds	r4, r2, r1
 8004aee:	4649      	mov	r1, r9
 8004af0:	eb43 0501 	adc.w	r5, r3, r1
 8004af4:	f04f 0200 	mov.w	r2, #0
 8004af8:	f04f 0300 	mov.w	r3, #0
 8004afc:	00eb      	lsls	r3, r5, #3
 8004afe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b02:	00e2      	lsls	r2, r4, #3
 8004b04:	4614      	mov	r4, r2
 8004b06:	461d      	mov	r5, r3
 8004b08:	4643      	mov	r3, r8
 8004b0a:	18e3      	adds	r3, r4, r3
 8004b0c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b10:	464b      	mov	r3, r9
 8004b12:	eb45 0303 	adc.w	r3, r5, r3
 8004b16:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	2200      	movs	r2, #0
 8004b22:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004b26:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b2a:	f04f 0200 	mov.w	r2, #0
 8004b2e:	f04f 0300 	mov.w	r3, #0
 8004b32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004b36:	4629      	mov	r1, r5
 8004b38:	008b      	lsls	r3, r1, #2
 8004b3a:	4621      	mov	r1, r4
 8004b3c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b40:	4621      	mov	r1, r4
 8004b42:	008a      	lsls	r2, r1, #2
 8004b44:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004b48:	f7fb ff52 	bl	80009f0 <__aeabi_uldivmod>
 8004b4c:	4602      	mov	r2, r0
 8004b4e:	460b      	mov	r3, r1
 8004b50:	4b60      	ldr	r3, [pc, #384]	; (8004cd4 <UART_SetConfig+0x4e4>)
 8004b52:	fba3 2302 	umull	r2, r3, r3, r2
 8004b56:	095b      	lsrs	r3, r3, #5
 8004b58:	011c      	lsls	r4, r3, #4
 8004b5a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b5e:	2200      	movs	r2, #0
 8004b60:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004b64:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004b68:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004b6c:	4642      	mov	r2, r8
 8004b6e:	464b      	mov	r3, r9
 8004b70:	1891      	adds	r1, r2, r2
 8004b72:	61b9      	str	r1, [r7, #24]
 8004b74:	415b      	adcs	r3, r3
 8004b76:	61fb      	str	r3, [r7, #28]
 8004b78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b7c:	4641      	mov	r1, r8
 8004b7e:	1851      	adds	r1, r2, r1
 8004b80:	6139      	str	r1, [r7, #16]
 8004b82:	4649      	mov	r1, r9
 8004b84:	414b      	adcs	r3, r1
 8004b86:	617b      	str	r3, [r7, #20]
 8004b88:	f04f 0200 	mov.w	r2, #0
 8004b8c:	f04f 0300 	mov.w	r3, #0
 8004b90:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004b94:	4659      	mov	r1, fp
 8004b96:	00cb      	lsls	r3, r1, #3
 8004b98:	4651      	mov	r1, sl
 8004b9a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b9e:	4651      	mov	r1, sl
 8004ba0:	00ca      	lsls	r2, r1, #3
 8004ba2:	4610      	mov	r0, r2
 8004ba4:	4619      	mov	r1, r3
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4642      	mov	r2, r8
 8004baa:	189b      	adds	r3, r3, r2
 8004bac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bb0:	464b      	mov	r3, r9
 8004bb2:	460a      	mov	r2, r1
 8004bb4:	eb42 0303 	adc.w	r3, r2, r3
 8004bb8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004bc6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004bc8:	f04f 0200 	mov.w	r2, #0
 8004bcc:	f04f 0300 	mov.w	r3, #0
 8004bd0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004bd4:	4649      	mov	r1, r9
 8004bd6:	008b      	lsls	r3, r1, #2
 8004bd8:	4641      	mov	r1, r8
 8004bda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bde:	4641      	mov	r1, r8
 8004be0:	008a      	lsls	r2, r1, #2
 8004be2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004be6:	f7fb ff03 	bl	80009f0 <__aeabi_uldivmod>
 8004bea:	4602      	mov	r2, r0
 8004bec:	460b      	mov	r3, r1
 8004bee:	4b39      	ldr	r3, [pc, #228]	; (8004cd4 <UART_SetConfig+0x4e4>)
 8004bf0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bf4:	095b      	lsrs	r3, r3, #5
 8004bf6:	2164      	movs	r1, #100	; 0x64
 8004bf8:	fb01 f303 	mul.w	r3, r1, r3
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	011b      	lsls	r3, r3, #4
 8004c00:	3332      	adds	r3, #50	; 0x32
 8004c02:	4a34      	ldr	r2, [pc, #208]	; (8004cd4 <UART_SetConfig+0x4e4>)
 8004c04:	fba2 2303 	umull	r2, r3, r2, r3
 8004c08:	095b      	lsrs	r3, r3, #5
 8004c0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c0e:	441c      	add	r4, r3
 8004c10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c14:	2200      	movs	r2, #0
 8004c16:	673b      	str	r3, [r7, #112]	; 0x70
 8004c18:	677a      	str	r2, [r7, #116]	; 0x74
 8004c1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004c1e:	4642      	mov	r2, r8
 8004c20:	464b      	mov	r3, r9
 8004c22:	1891      	adds	r1, r2, r2
 8004c24:	60b9      	str	r1, [r7, #8]
 8004c26:	415b      	adcs	r3, r3
 8004c28:	60fb      	str	r3, [r7, #12]
 8004c2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004c2e:	4641      	mov	r1, r8
 8004c30:	1851      	adds	r1, r2, r1
 8004c32:	6039      	str	r1, [r7, #0]
 8004c34:	4649      	mov	r1, r9
 8004c36:	414b      	adcs	r3, r1
 8004c38:	607b      	str	r3, [r7, #4]
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004c46:	4659      	mov	r1, fp
 8004c48:	00cb      	lsls	r3, r1, #3
 8004c4a:	4651      	mov	r1, sl
 8004c4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c50:	4651      	mov	r1, sl
 8004c52:	00ca      	lsls	r2, r1, #3
 8004c54:	4610      	mov	r0, r2
 8004c56:	4619      	mov	r1, r3
 8004c58:	4603      	mov	r3, r0
 8004c5a:	4642      	mov	r2, r8
 8004c5c:	189b      	adds	r3, r3, r2
 8004c5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c60:	464b      	mov	r3, r9
 8004c62:	460a      	mov	r2, r1
 8004c64:	eb42 0303 	adc.w	r3, r2, r3
 8004c68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	2200      	movs	r2, #0
 8004c72:	663b      	str	r3, [r7, #96]	; 0x60
 8004c74:	667a      	str	r2, [r7, #100]	; 0x64
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004c82:	4649      	mov	r1, r9
 8004c84:	008b      	lsls	r3, r1, #2
 8004c86:	4641      	mov	r1, r8
 8004c88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	008a      	lsls	r2, r1, #2
 8004c90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004c94:	f7fb feac 	bl	80009f0 <__aeabi_uldivmod>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	460b      	mov	r3, r1
 8004c9c:	4b0d      	ldr	r3, [pc, #52]	; (8004cd4 <UART_SetConfig+0x4e4>)
 8004c9e:	fba3 1302 	umull	r1, r3, r3, r2
 8004ca2:	095b      	lsrs	r3, r3, #5
 8004ca4:	2164      	movs	r1, #100	; 0x64
 8004ca6:	fb01 f303 	mul.w	r3, r1, r3
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	011b      	lsls	r3, r3, #4
 8004cae:	3332      	adds	r3, #50	; 0x32
 8004cb0:	4a08      	ldr	r2, [pc, #32]	; (8004cd4 <UART_SetConfig+0x4e4>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	f003 020f 	and.w	r2, r3, #15
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4422      	add	r2, r4
 8004cc4:	609a      	str	r2, [r3, #8]
}
 8004cc6:	bf00      	nop
 8004cc8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004cd2:	bf00      	nop
 8004cd4:	51eb851f 	.word	0x51eb851f

08004cd8 <__libc_init_array>:
 8004cd8:	b570      	push	{r4, r5, r6, lr}
 8004cda:	4d0d      	ldr	r5, [pc, #52]	; (8004d10 <__libc_init_array+0x38>)
 8004cdc:	4c0d      	ldr	r4, [pc, #52]	; (8004d14 <__libc_init_array+0x3c>)
 8004cde:	1b64      	subs	r4, r4, r5
 8004ce0:	10a4      	asrs	r4, r4, #2
 8004ce2:	2600      	movs	r6, #0
 8004ce4:	42a6      	cmp	r6, r4
 8004ce6:	d109      	bne.n	8004cfc <__libc_init_array+0x24>
 8004ce8:	4d0b      	ldr	r5, [pc, #44]	; (8004d18 <__libc_init_array+0x40>)
 8004cea:	4c0c      	ldr	r4, [pc, #48]	; (8004d1c <__libc_init_array+0x44>)
 8004cec:	f000 f820 	bl	8004d30 <_init>
 8004cf0:	1b64      	subs	r4, r4, r5
 8004cf2:	10a4      	asrs	r4, r4, #2
 8004cf4:	2600      	movs	r6, #0
 8004cf6:	42a6      	cmp	r6, r4
 8004cf8:	d105      	bne.n	8004d06 <__libc_init_array+0x2e>
 8004cfa:	bd70      	pop	{r4, r5, r6, pc}
 8004cfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d00:	4798      	blx	r3
 8004d02:	3601      	adds	r6, #1
 8004d04:	e7ee      	b.n	8004ce4 <__libc_init_array+0xc>
 8004d06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d0a:	4798      	blx	r3
 8004d0c:	3601      	adds	r6, #1
 8004d0e:	e7f2      	b.n	8004cf6 <__libc_init_array+0x1e>
 8004d10:	08004d68 	.word	0x08004d68
 8004d14:	08004d68 	.word	0x08004d68
 8004d18:	08004d68 	.word	0x08004d68
 8004d1c:	08004d6c 	.word	0x08004d6c

08004d20 <memset>:
 8004d20:	4402      	add	r2, r0
 8004d22:	4603      	mov	r3, r0
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d100      	bne.n	8004d2a <memset+0xa>
 8004d28:	4770      	bx	lr
 8004d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004d2e:	e7f9      	b.n	8004d24 <memset+0x4>

08004d30 <_init>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr

08004d3c <_fini>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr
