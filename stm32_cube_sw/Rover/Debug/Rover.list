
Rover.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004880  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e30  08004e30  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08004e30  08004e30  00014e30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004e38  08004e38  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e38  08004e38  00014e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e3c  08004e3c  00014e3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004e40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000014c  2000000c  08004e4c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08004e4c  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf23  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e1  00000000  00000000  0002cf5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c0  00000000  00000000  0002f040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e8  00000000  00000000  0002f900  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000246ed  00000000  00000000  000300e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c48c  00000000  00000000  000547d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce022  00000000  00000000  00060c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012ec83  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000024b0  00000000  00000000  0012ecd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004a30 	.word	0x08004a30

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08004a30 	.word	0x08004a30

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2f>:
 80009f4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009fc:	bf24      	itt	cs
 80009fe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a02:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a06:	d90d      	bls.n	8000a24 <__aeabi_d2f+0x30>
 8000a08:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a0c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a10:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a14:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a18:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a1c:	bf08      	it	eq
 8000a1e:	f020 0001 	biceq.w	r0, r0, #1
 8000a22:	4770      	bx	lr
 8000a24:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a28:	d121      	bne.n	8000a6e <__aeabi_d2f+0x7a>
 8000a2a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a2e:	bfbc      	itt	lt
 8000a30:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a34:	4770      	bxlt	lr
 8000a36:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a3a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a3e:	f1c2 0218 	rsb	r2, r2, #24
 8000a42:	f1c2 0c20 	rsb	ip, r2, #32
 8000a46:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a4a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a4e:	bf18      	it	ne
 8000a50:	f040 0001 	orrne.w	r0, r0, #1
 8000a54:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a58:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a5c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a60:	ea40 000c 	orr.w	r0, r0, ip
 8000a64:	fa23 f302 	lsr.w	r3, r3, r2
 8000a68:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a6c:	e7cc      	b.n	8000a08 <__aeabi_d2f+0x14>
 8000a6e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a72:	d107      	bne.n	8000a84 <__aeabi_d2f+0x90>
 8000a74:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a78:	bf1e      	ittt	ne
 8000a7a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a7e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a82:	4770      	bxne	lr
 8000a84:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a88:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a8c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop

08000a94 <__aeabi_uldivmod>:
 8000a94:	b953      	cbnz	r3, 8000aac <__aeabi_uldivmod+0x18>
 8000a96:	b94a      	cbnz	r2, 8000aac <__aeabi_uldivmod+0x18>
 8000a98:	2900      	cmp	r1, #0
 8000a9a:	bf08      	it	eq
 8000a9c:	2800      	cmpeq	r0, #0
 8000a9e:	bf1c      	itt	ne
 8000aa0:	f04f 31ff 	movne.w	r1, #4294967295
 8000aa4:	f04f 30ff 	movne.w	r0, #4294967295
 8000aa8:	f000 b974 	b.w	8000d94 <__aeabi_idiv0>
 8000aac:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ab0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ab4:	f000 f806 	bl	8000ac4 <__udivmoddi4>
 8000ab8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000abc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ac0:	b004      	add	sp, #16
 8000ac2:	4770      	bx	lr

08000ac4 <__udivmoddi4>:
 8000ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ac8:	9d08      	ldr	r5, [sp, #32]
 8000aca:	4604      	mov	r4, r0
 8000acc:	468e      	mov	lr, r1
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d14d      	bne.n	8000b6e <__udivmoddi4+0xaa>
 8000ad2:	428a      	cmp	r2, r1
 8000ad4:	4694      	mov	ip, r2
 8000ad6:	d969      	bls.n	8000bac <__udivmoddi4+0xe8>
 8000ad8:	fab2 f282 	clz	r2, r2
 8000adc:	b152      	cbz	r2, 8000af4 <__udivmoddi4+0x30>
 8000ade:	fa01 f302 	lsl.w	r3, r1, r2
 8000ae2:	f1c2 0120 	rsb	r1, r2, #32
 8000ae6:	fa20 f101 	lsr.w	r1, r0, r1
 8000aea:	fa0c fc02 	lsl.w	ip, ip, r2
 8000aee:	ea41 0e03 	orr.w	lr, r1, r3
 8000af2:	4094      	lsls	r4, r2
 8000af4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000af8:	0c21      	lsrs	r1, r4, #16
 8000afa:	fbbe f6f8 	udiv	r6, lr, r8
 8000afe:	fa1f f78c 	uxth.w	r7, ip
 8000b02:	fb08 e316 	mls	r3, r8, r6, lr
 8000b06:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b0a:	fb06 f107 	mul.w	r1, r6, r7
 8000b0e:	4299      	cmp	r1, r3
 8000b10:	d90a      	bls.n	8000b28 <__udivmoddi4+0x64>
 8000b12:	eb1c 0303 	adds.w	r3, ip, r3
 8000b16:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b1a:	f080 811f 	bcs.w	8000d5c <__udivmoddi4+0x298>
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	f240 811c 	bls.w	8000d5c <__udivmoddi4+0x298>
 8000b24:	3e02      	subs	r6, #2
 8000b26:	4463      	add	r3, ip
 8000b28:	1a5b      	subs	r3, r3, r1
 8000b2a:	b2a4      	uxth	r4, r4
 8000b2c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b30:	fb08 3310 	mls	r3, r8, r0, r3
 8000b34:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b38:	fb00 f707 	mul.w	r7, r0, r7
 8000b3c:	42a7      	cmp	r7, r4
 8000b3e:	d90a      	bls.n	8000b56 <__udivmoddi4+0x92>
 8000b40:	eb1c 0404 	adds.w	r4, ip, r4
 8000b44:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b48:	f080 810a 	bcs.w	8000d60 <__udivmoddi4+0x29c>
 8000b4c:	42a7      	cmp	r7, r4
 8000b4e:	f240 8107 	bls.w	8000d60 <__udivmoddi4+0x29c>
 8000b52:	4464      	add	r4, ip
 8000b54:	3802      	subs	r0, #2
 8000b56:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b5a:	1be4      	subs	r4, r4, r7
 8000b5c:	2600      	movs	r6, #0
 8000b5e:	b11d      	cbz	r5, 8000b68 <__udivmoddi4+0xa4>
 8000b60:	40d4      	lsrs	r4, r2
 8000b62:	2300      	movs	r3, #0
 8000b64:	e9c5 4300 	strd	r4, r3, [r5]
 8000b68:	4631      	mov	r1, r6
 8000b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b6e:	428b      	cmp	r3, r1
 8000b70:	d909      	bls.n	8000b86 <__udivmoddi4+0xc2>
 8000b72:	2d00      	cmp	r5, #0
 8000b74:	f000 80ef 	beq.w	8000d56 <__udivmoddi4+0x292>
 8000b78:	2600      	movs	r6, #0
 8000b7a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b7e:	4630      	mov	r0, r6
 8000b80:	4631      	mov	r1, r6
 8000b82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b86:	fab3 f683 	clz	r6, r3
 8000b8a:	2e00      	cmp	r6, #0
 8000b8c:	d14a      	bne.n	8000c24 <__udivmoddi4+0x160>
 8000b8e:	428b      	cmp	r3, r1
 8000b90:	d302      	bcc.n	8000b98 <__udivmoddi4+0xd4>
 8000b92:	4282      	cmp	r2, r0
 8000b94:	f200 80f9 	bhi.w	8000d8a <__udivmoddi4+0x2c6>
 8000b98:	1a84      	subs	r4, r0, r2
 8000b9a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	469e      	mov	lr, r3
 8000ba2:	2d00      	cmp	r5, #0
 8000ba4:	d0e0      	beq.n	8000b68 <__udivmoddi4+0xa4>
 8000ba6:	e9c5 4e00 	strd	r4, lr, [r5]
 8000baa:	e7dd      	b.n	8000b68 <__udivmoddi4+0xa4>
 8000bac:	b902      	cbnz	r2, 8000bb0 <__udivmoddi4+0xec>
 8000bae:	deff      	udf	#255	; 0xff
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	2a00      	cmp	r2, #0
 8000bb6:	f040 8092 	bne.w	8000cde <__udivmoddi4+0x21a>
 8000bba:	eba1 010c 	sub.w	r1, r1, ip
 8000bbe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bc2:	fa1f fe8c 	uxth.w	lr, ip
 8000bc6:	2601      	movs	r6, #1
 8000bc8:	0c20      	lsrs	r0, r4, #16
 8000bca:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bce:	fb07 1113 	mls	r1, r7, r3, r1
 8000bd2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bd6:	fb0e f003 	mul.w	r0, lr, r3
 8000bda:	4288      	cmp	r0, r1
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x12c>
 8000bde:	eb1c 0101 	adds.w	r1, ip, r1
 8000be2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x12a>
 8000be8:	4288      	cmp	r0, r1
 8000bea:	f200 80cb 	bhi.w	8000d84 <__udivmoddi4+0x2c0>
 8000bee:	4643      	mov	r3, r8
 8000bf0:	1a09      	subs	r1, r1, r0
 8000bf2:	b2a4      	uxth	r4, r4
 8000bf4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bf8:	fb07 1110 	mls	r1, r7, r0, r1
 8000bfc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c00:	fb0e fe00 	mul.w	lr, lr, r0
 8000c04:	45a6      	cmp	lr, r4
 8000c06:	d908      	bls.n	8000c1a <__udivmoddi4+0x156>
 8000c08:	eb1c 0404 	adds.w	r4, ip, r4
 8000c0c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c10:	d202      	bcs.n	8000c18 <__udivmoddi4+0x154>
 8000c12:	45a6      	cmp	lr, r4
 8000c14:	f200 80bb 	bhi.w	8000d8e <__udivmoddi4+0x2ca>
 8000c18:	4608      	mov	r0, r1
 8000c1a:	eba4 040e 	sub.w	r4, r4, lr
 8000c1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c22:	e79c      	b.n	8000b5e <__udivmoddi4+0x9a>
 8000c24:	f1c6 0720 	rsb	r7, r6, #32
 8000c28:	40b3      	lsls	r3, r6
 8000c2a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c2e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c32:	fa20 f407 	lsr.w	r4, r0, r7
 8000c36:	fa01 f306 	lsl.w	r3, r1, r6
 8000c3a:	431c      	orrs	r4, r3
 8000c3c:	40f9      	lsrs	r1, r7
 8000c3e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c42:	fa00 f306 	lsl.w	r3, r0, r6
 8000c46:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c4a:	0c20      	lsrs	r0, r4, #16
 8000c4c:	fa1f fe8c 	uxth.w	lr, ip
 8000c50:	fb09 1118 	mls	r1, r9, r8, r1
 8000c54:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c58:	fb08 f00e 	mul.w	r0, r8, lr
 8000c5c:	4288      	cmp	r0, r1
 8000c5e:	fa02 f206 	lsl.w	r2, r2, r6
 8000c62:	d90b      	bls.n	8000c7c <__udivmoddi4+0x1b8>
 8000c64:	eb1c 0101 	adds.w	r1, ip, r1
 8000c68:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c6c:	f080 8088 	bcs.w	8000d80 <__udivmoddi4+0x2bc>
 8000c70:	4288      	cmp	r0, r1
 8000c72:	f240 8085 	bls.w	8000d80 <__udivmoddi4+0x2bc>
 8000c76:	f1a8 0802 	sub.w	r8, r8, #2
 8000c7a:	4461      	add	r1, ip
 8000c7c:	1a09      	subs	r1, r1, r0
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c84:	fb09 1110 	mls	r1, r9, r0, r1
 8000c88:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c8c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c90:	458e      	cmp	lr, r1
 8000c92:	d908      	bls.n	8000ca6 <__udivmoddi4+0x1e2>
 8000c94:	eb1c 0101 	adds.w	r1, ip, r1
 8000c98:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c9c:	d26c      	bcs.n	8000d78 <__udivmoddi4+0x2b4>
 8000c9e:	458e      	cmp	lr, r1
 8000ca0:	d96a      	bls.n	8000d78 <__udivmoddi4+0x2b4>
 8000ca2:	3802      	subs	r0, #2
 8000ca4:	4461      	add	r1, ip
 8000ca6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000caa:	fba0 9402 	umull	r9, r4, r0, r2
 8000cae:	eba1 010e 	sub.w	r1, r1, lr
 8000cb2:	42a1      	cmp	r1, r4
 8000cb4:	46c8      	mov	r8, r9
 8000cb6:	46a6      	mov	lr, r4
 8000cb8:	d356      	bcc.n	8000d68 <__udivmoddi4+0x2a4>
 8000cba:	d053      	beq.n	8000d64 <__udivmoddi4+0x2a0>
 8000cbc:	b15d      	cbz	r5, 8000cd6 <__udivmoddi4+0x212>
 8000cbe:	ebb3 0208 	subs.w	r2, r3, r8
 8000cc2:	eb61 010e 	sbc.w	r1, r1, lr
 8000cc6:	fa01 f707 	lsl.w	r7, r1, r7
 8000cca:	fa22 f306 	lsr.w	r3, r2, r6
 8000cce:	40f1      	lsrs	r1, r6
 8000cd0:	431f      	orrs	r7, r3
 8000cd2:	e9c5 7100 	strd	r7, r1, [r5]
 8000cd6:	2600      	movs	r6, #0
 8000cd8:	4631      	mov	r1, r6
 8000cda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cde:	f1c2 0320 	rsb	r3, r2, #32
 8000ce2:	40d8      	lsrs	r0, r3
 8000ce4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce8:	fa21 f303 	lsr.w	r3, r1, r3
 8000cec:	4091      	lsls	r1, r2
 8000cee:	4301      	orrs	r1, r0
 8000cf0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf4:	fa1f fe8c 	uxth.w	lr, ip
 8000cf8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cfc:	fb07 3610 	mls	r6, r7, r0, r3
 8000d00:	0c0b      	lsrs	r3, r1, #16
 8000d02:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d06:	fb00 f60e 	mul.w	r6, r0, lr
 8000d0a:	429e      	cmp	r6, r3
 8000d0c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d10:	d908      	bls.n	8000d24 <__udivmoddi4+0x260>
 8000d12:	eb1c 0303 	adds.w	r3, ip, r3
 8000d16:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d1a:	d22f      	bcs.n	8000d7c <__udivmoddi4+0x2b8>
 8000d1c:	429e      	cmp	r6, r3
 8000d1e:	d92d      	bls.n	8000d7c <__udivmoddi4+0x2b8>
 8000d20:	3802      	subs	r0, #2
 8000d22:	4463      	add	r3, ip
 8000d24:	1b9b      	subs	r3, r3, r6
 8000d26:	b289      	uxth	r1, r1
 8000d28:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d2c:	fb07 3316 	mls	r3, r7, r6, r3
 8000d30:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d34:	fb06 f30e 	mul.w	r3, r6, lr
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d908      	bls.n	8000d4e <__udivmoddi4+0x28a>
 8000d3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d40:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d44:	d216      	bcs.n	8000d74 <__udivmoddi4+0x2b0>
 8000d46:	428b      	cmp	r3, r1
 8000d48:	d914      	bls.n	8000d74 <__udivmoddi4+0x2b0>
 8000d4a:	3e02      	subs	r6, #2
 8000d4c:	4461      	add	r1, ip
 8000d4e:	1ac9      	subs	r1, r1, r3
 8000d50:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d54:	e738      	b.n	8000bc8 <__udivmoddi4+0x104>
 8000d56:	462e      	mov	r6, r5
 8000d58:	4628      	mov	r0, r5
 8000d5a:	e705      	b.n	8000b68 <__udivmoddi4+0xa4>
 8000d5c:	4606      	mov	r6, r0
 8000d5e:	e6e3      	b.n	8000b28 <__udivmoddi4+0x64>
 8000d60:	4618      	mov	r0, r3
 8000d62:	e6f8      	b.n	8000b56 <__udivmoddi4+0x92>
 8000d64:	454b      	cmp	r3, r9
 8000d66:	d2a9      	bcs.n	8000cbc <__udivmoddi4+0x1f8>
 8000d68:	ebb9 0802 	subs.w	r8, r9, r2
 8000d6c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d70:	3801      	subs	r0, #1
 8000d72:	e7a3      	b.n	8000cbc <__udivmoddi4+0x1f8>
 8000d74:	4646      	mov	r6, r8
 8000d76:	e7ea      	b.n	8000d4e <__udivmoddi4+0x28a>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	e794      	b.n	8000ca6 <__udivmoddi4+0x1e2>
 8000d7c:	4640      	mov	r0, r8
 8000d7e:	e7d1      	b.n	8000d24 <__udivmoddi4+0x260>
 8000d80:	46d0      	mov	r8, sl
 8000d82:	e77b      	b.n	8000c7c <__udivmoddi4+0x1b8>
 8000d84:	3b02      	subs	r3, #2
 8000d86:	4461      	add	r1, ip
 8000d88:	e732      	b.n	8000bf0 <__udivmoddi4+0x12c>
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	e709      	b.n	8000ba2 <__udivmoddi4+0xde>
 8000d8e:	4464      	add	r4, ip
 8000d90:	3802      	subs	r0, #2
 8000d92:	e742      	b.n	8000c1a <__udivmoddi4+0x156>

08000d94 <__aeabi_idiv0>:
 8000d94:	4770      	bx	lr
 8000d96:	bf00      	nop

08000d98 <MX_CAN1_Init>:

CAN_HandleTypeDef hcan1;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8000d9c:	4b17      	ldr	r3, [pc, #92]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000d9e:	4a18      	ldr	r2, [pc, #96]	; (8000e00 <MX_CAN1_Init+0x68>)
 8000da0:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 3;
 8000da2:	4b16      	ldr	r3, [pc, #88]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000da4:	2203      	movs	r2, #3
 8000da6:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8000da8:	4b14      	ldr	r3, [pc, #80]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000dae:	4b13      	ldr	r3, [pc, #76]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_12TQ;
 8000db4:	4b11      	ldr	r3, [pc, #68]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000db6:	f44f 2230 	mov.w	r2, #720896	; 0xb0000
 8000dba:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8000dbc:	4b0f      	ldr	r3, [pc, #60]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000dbe:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000dc2:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8000dc4:	4b0d      	ldr	r3, [pc, #52]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8000dca:	4b0c      	ldr	r3, [pc, #48]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000dd0:	4b0a      	ldr	r3, [pc, #40]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8000dd6:	4b09      	ldr	r3, [pc, #36]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000ddc:	4b07      	ldr	r3, [pc, #28]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000de2:	4b06      	ldr	r3, [pc, #24]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8000de8:	4804      	ldr	r0, [pc, #16]	; (8000dfc <MX_CAN1_Init+0x64>)
 8000dea:	f000 fe63 	bl	8001ab4 <HAL_CAN_Init>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000df4:	f000 fbd4 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	bd80      	pop	{r7, pc}
 8000dfc:	20000028 	.word	0x20000028
 8000e00:	40006400 	.word	0x40006400

08000e04 <HAL_CAN_MspInit>:

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a1d      	ldr	r2, [pc, #116]	; (8000e98 <HAL_CAN_MspInit+0x94>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d134      	bne.n	8000e90 <HAL_CAN_MspInit+0x8c>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	; (8000e9c <HAL_CAN_MspInit+0x98>)
 8000e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2e:	4a1b      	ldr	r2, [pc, #108]	; (8000e9c <HAL_CAN_MspInit+0x98>)
 8000e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000e34:	6413      	str	r3, [r2, #64]	; 0x40
 8000e36:	4b19      	ldr	r3, [pc, #100]	; (8000e9c <HAL_CAN_MspInit+0x98>)
 8000e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b15      	ldr	r3, [pc, #84]	; (8000e9c <HAL_CAN_MspInit+0x98>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a14      	ldr	r2, [pc, #80]	; (8000e9c <HAL_CAN_MspInit+0x98>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b12      	ldr	r3, [pc, #72]	; (8000e9c <HAL_CAN_MspInit+0x98>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0301 	and.w	r3, r3, #1
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000e5e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000e62:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e64:	2302      	movs	r3, #2
 8000e66:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000e70:	2309      	movs	r3, #9
 8000e72:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e74:	f107 0314 	add.w	r3, r7, #20
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4809      	ldr	r0, [pc, #36]	; (8000ea0 <HAL_CAN_MspInit+0x9c>)
 8000e7c:	f001 fd8e 	bl	800299c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	2014      	movs	r0, #20
 8000e86:	f001 fd52 	bl	800292e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000e8a:	2014      	movs	r0, #20
 8000e8c:	f001 fd6b 	bl	8002966 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }
}
 8000e90:	bf00      	nop
 8000e92:	3728      	adds	r7, #40	; 0x28
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40006400 	.word	0x40006400
 8000e9c:	40023800 	.word	0x40023800
 8000ea0:	40020000 	.word	0x40020000

08000ea4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eaa:	f107 0314 	add.w	r3, r7, #20
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
 8000eb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
 8000ebe:	4b2d      	ldr	r3, [pc, #180]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ec2:	4a2c      	ldr	r2, [pc, #176]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000ec4:	f043 0304 	orr.w	r3, r3, #4
 8000ec8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eca:	4b2a      	ldr	r3, [pc, #168]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ece:	f003 0304 	and.w	r3, r3, #4
 8000ed2:	613b      	str	r3, [r7, #16]
 8000ed4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	60fb      	str	r3, [r7, #12]
 8000eda:	4b26      	ldr	r3, [pc, #152]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	4a25      	ldr	r2, [pc, #148]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee6:	4b23      	ldr	r3, [pc, #140]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000eee:	60fb      	str	r3, [r7, #12]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	60bb      	str	r3, [r7, #8]
 8000ef6:	4b1f      	ldr	r3, [pc, #124]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	4a1e      	ldr	r2, [pc, #120]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6313      	str	r3, [r2, #48]	; 0x30
 8000f02:	4b1c      	ldr	r3, [pc, #112]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	60bb      	str	r3, [r7, #8]
 8000f0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f0e:	2300      	movs	r3, #0
 8000f10:	607b      	str	r3, [r7, #4]
 8000f12:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	4a17      	ldr	r2, [pc, #92]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000f18:	f043 0302 	orr.w	r3, r3, #2
 8000f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1e:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_GPIO_Init+0xd0>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f22:	f003 0302 	and.w	r3, r3, #2
 8000f26:	607b      	str	r3, [r7, #4]
 8000f28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2120      	movs	r1, #32
 8000f2e:	4812      	ldr	r0, [pc, #72]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000f30:	f001 fec8 	bl	8002cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f34:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f3a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000f3e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480c      	ldr	r0, [pc, #48]	; (8000f7c <MX_GPIO_Init+0xd8>)
 8000f4c:	f001 fd26 	bl	800299c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f50:	2320      	movs	r3, #32
 8000f52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f54:	2301      	movs	r3, #1
 8000f56:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f60:	f107 0314 	add.w	r3, r7, #20
 8000f64:	4619      	mov	r1, r3
 8000f66:	4804      	ldr	r0, [pc, #16]	; (8000f78 <MX_GPIO_Init+0xd4>)
 8000f68:	f001 fd18 	bl	800299c <HAL_GPIO_Init>

}
 8000f6c:	bf00      	nop
 8000f6e:	3728      	adds	r7, #40	; 0x28
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}
 8000f74:	40023800 	.word	0x40023800
 8000f78:	40020000 	.word	0x40020000
 8000f7c:	40020800 	.word	0x40020800

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b5b0      	push	{r4, r5, r7, lr}
 8000f82:	b092      	sub	sp, #72	; 0x48
 8000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  datacheck = 0;
 8000f86:	4bba      	ldr	r3, [pc, #744]	; (8001270 <main+0x2f0>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	701a      	strb	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f8c:	f000 fcfc 	bl	8001988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f90:	f000 fa02 	bl	8001398 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f94:	f7ff ff86 	bl	8000ea4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f98:	f000 fc5a 	bl	8001850 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8000f9c:	f7ff fefc 	bl	8000d98 <MX_CAN1_Init>
  /* USER CODE BEGIN 2 */

  CAN_FilterTypeDef sFilterConfig;
  sFilterConfig.FilterBank = 10;
 8000fa0:	230a      	movs	r3, #10
 8000fa2:	617b      	str	r3, [r7, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	61bb      	str	r3, [r7, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	61fb      	str	r3, [r7, #28]
  sFilterConfig.FilterIdHigh = 0x0000;
 8000fac:	2300      	movs	r3, #0
 8000fae:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIdLow = 0x0000;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterActivation = CAN_FILTER_ENABLE;
 8000fc0:	2301      	movs	r3, #1
 8000fc2:	623b      	str	r3, [r7, #32]
  sFilterConfig.SlaveStartFilterBank = 0;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig);
 8000fc8:	463b      	mov	r3, r7
 8000fca:	4619      	mov	r1, r3
 8000fcc:	48a9      	ldr	r0, [pc, #676]	; (8001274 <main+0x2f4>)
 8000fce:	f000 fe6d 	bl	8001cac <HAL_CAN_ConfigFilter>

  HAL_CAN_Start(&hcan1);
 8000fd2:	48a8      	ldr	r0, [pc, #672]	; (8001274 <main+0x2f4>)
 8000fd4:	f000 ff4a 	bl	8001e6c <HAL_CAN_Start>
  HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000fd8:	2102      	movs	r1, #2
 8000fda:	48a6      	ldr	r0, [pc, #664]	; (8001274 <main+0x2f4>)
 8000fdc:	f001 f977 	bl	80022ce <HAL_CAN_ActivateNotification>

  TxHeader.IDE = CAN_ID_STD;			//Type of Identifier (Standard)
 8000fe0:	4ba5      	ldr	r3, [pc, #660]	; (8001278 <main+0x2f8>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  TxHeader.StdId = 0x200;				//Standard ID
 8000fe6:	4ba4      	ldr	r3, [pc, #656]	; (8001278 <main+0x2f8>)
 8000fe8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000fec:	601a      	str	r2, [r3, #0]
  TxHeader.RTR = CAN_RTR_DATA;			//
 8000fee:	4ba2      	ldr	r3, [pc, #648]	; (8001278 <main+0x2f8>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	60da      	str	r2, [r3, #12]
  TxHeader.DLC = 8; 					//Data Length
 8000ff4:	4ba0      	ldr	r3, [pc, #640]	; (8001278 <main+0x2f8>)
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	611a      	str	r2, [r3, #16]
  TxHeader.TransmitGlobalTime = DISABLE;
 8000ffa:	4b9f      	ldr	r3, [pc, #636]	; (8001278 <main+0x2f8>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	751a      	strb	r2, [r3, #20]

  float current1 = 1.0;
 8001000:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001004:	647b      	str	r3, [r7, #68]	; 0x44
  float current2 = 1.0;
 8001006:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800100a:	643b      	str	r3, [r7, #64]	; 0x40
  float target_vel1 = 0.0;
 800100c:	f04f 0300 	mov.w	r3, #0
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  float target_vel2 = 0.0;
 8001012:	f04f 0300 	mov.w	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
  int16_t current_word1 = (int16_t)(current1/20.0*16384);
 8001018:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800101a:	f7ff fa59 	bl	80004d0 <__aeabi_f2d>
 800101e:	f04f 0200 	mov.w	r2, #0
 8001022:	4b96      	ldr	r3, [pc, #600]	; (800127c <main+0x2fc>)
 8001024:	f7ff fbd6 	bl	80007d4 <__aeabi_ddiv>
 8001028:	4602      	mov	r2, r0
 800102a:	460b      	mov	r3, r1
 800102c:	4610      	mov	r0, r2
 800102e:	4619      	mov	r1, r3
 8001030:	f04f 0200 	mov.w	r2, #0
 8001034:	4b92      	ldr	r3, [pc, #584]	; (8001280 <main+0x300>)
 8001036:	f7ff faa3 	bl	8000580 <__aeabi_dmul>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	f7ff fcaf 	bl	80009a4 <__aeabi_d2iz>
 8001046:	4603      	mov	r3, r0
 8001048:	867b      	strh	r3, [r7, #50]	; 0x32
  int16_t current_word2 = (int16_t)(current2/20.0*16384);
 800104a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800104c:	f7ff fa40 	bl	80004d0 <__aeabi_f2d>
 8001050:	f04f 0200 	mov.w	r2, #0
 8001054:	4b89      	ldr	r3, [pc, #548]	; (800127c <main+0x2fc>)
 8001056:	f7ff fbbd 	bl	80007d4 <__aeabi_ddiv>
 800105a:	4602      	mov	r2, r0
 800105c:	460b      	mov	r3, r1
 800105e:	4610      	mov	r0, r2
 8001060:	4619      	mov	r1, r3
 8001062:	f04f 0200 	mov.w	r2, #0
 8001066:	4b86      	ldr	r3, [pc, #536]	; (8001280 <main+0x300>)
 8001068:	f7ff fa8a 	bl	8000580 <__aeabi_dmul>
 800106c:	4602      	mov	r2, r0
 800106e:	460b      	mov	r3, r1
 8001070:	4610      	mov	r0, r2
 8001072:	4619      	mov	r1, r3
 8001074:	f7ff fc96 	bl	80009a4 <__aeabi_d2iz>
 8001078:	4603      	mov	r3, r0
 800107a:	863b      	strh	r3, [r7, #48]	; 0x30

  TxData[0] = current_word1 >> 8;
 800107c:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8001080:	121b      	asrs	r3, r3, #8
 8001082:	b21b      	sxth	r3, r3
 8001084:	b2da      	uxtb	r2, r3
 8001086:	4b7f      	ldr	r3, [pc, #508]	; (8001284 <main+0x304>)
 8001088:	701a      	strb	r2, [r3, #0]
  TxData[1] = (int8_t)(current_word1 & 0x00ff);
 800108a:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800108c:	b2da      	uxtb	r2, r3
 800108e:	4b7d      	ldr	r3, [pc, #500]	; (8001284 <main+0x304>)
 8001090:	705a      	strb	r2, [r3, #1]
  TxData[2] = current_word2 >> 8;
 8001092:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001096:	121b      	asrs	r3, r3, #8
 8001098:	b21b      	sxth	r3, r3
 800109a:	b2da      	uxtb	r2, r3
 800109c:	4b79      	ldr	r3, [pc, #484]	; (8001284 <main+0x304>)
 800109e:	709a      	strb	r2, [r3, #2]
  TxData[3] = (int8_t)(current_word2 & 0x00ff);
 80010a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80010a2:	b2da      	uxtb	r2, r3
 80010a4:	4b77      	ldr	r3, [pc, #476]	; (8001284 <main+0x304>)
 80010a6:	70da      	strb	r2, [r3, #3]
  TxData[4] = current_word1 >> 8;
 80010a8:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 80010ac:	121b      	asrs	r3, r3, #8
 80010ae:	b21b      	sxth	r3, r3
 80010b0:	b2da      	uxtb	r2, r3
 80010b2:	4b74      	ldr	r3, [pc, #464]	; (8001284 <main+0x304>)
 80010b4:	711a      	strb	r2, [r3, #4]
  TxData[5] = (int8_t)(current_word1 & 0x00ff);
 80010b6:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b72      	ldr	r3, [pc, #456]	; (8001284 <main+0x304>)
 80010bc:	715a      	strb	r2, [r3, #5]
  TxData[6] = current_word2 >> 8;
 80010be:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 80010c2:	121b      	asrs	r3, r3, #8
 80010c4:	b21b      	sxth	r3, r3
 80010c6:	b2da      	uxtb	r2, r3
 80010c8:	4b6e      	ldr	r3, [pc, #440]	; (8001284 <main+0x304>)
 80010ca:	719a      	strb	r2, [r3, #6]
  TxData[7] = (int8_t)(current_word2 & 0x00ff);
 80010cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80010ce:	b2da      	uxtb	r2, r3
 80010d0:	4b6c      	ldr	r3, [pc, #432]	; (8001284 <main+0x304>)
 80010d2:	71da      	strb	r2, [r3, #7]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t loop_count = 0;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  float dt = 0.001;
 80010d8:	4b6b      	ldr	r3, [pc, #428]	; (8001288 <main+0x308>)
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c

  motor1.PID_Init(0.001, 0.000001, 0.0001, 1.0);
 80010dc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80010e0:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 800128c <main+0x30c>
 80010e4:	eddf 0a6a 	vldr	s1, [pc, #424]	; 8001290 <main+0x310>
 80010e8:	ed9f 0a6a 	vldr	s0, [pc, #424]	; 8001294 <main+0x314>
 80010ec:	486a      	ldr	r0, [pc, #424]	; (8001298 <main+0x318>)
 80010ee:	f000 fa5c 	bl	80015aa <_ZN5Motor8PID_InitEffff>
  motor2.PID_Init(0.001, 0.000001, 0.0001, 1.0);
 80010f2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 80010f6:	ed9f 1a65 	vldr	s2, [pc, #404]	; 800128c <main+0x30c>
 80010fa:	eddf 0a65 	vldr	s1, [pc, #404]	; 8001290 <main+0x310>
 80010fe:	ed9f 0a65 	vldr	s0, [pc, #404]	; 8001294 <main+0x314>
 8001102:	4866      	ldr	r0, [pc, #408]	; (800129c <main+0x31c>)
 8001104:	f000 fa51 	bl	80015aa <_ZN5Motor8PID_InitEffff>
//	  if(datacheck)
//	  {
//		  HAL_Delay(2);
//	  }

	  if(dt*loop_count < 10)
 8001108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800110a:	ee07 3a90 	vmov	s15, r3
 800110e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001112:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8001116:	ee67 7a27 	vmul.f32	s15, s14, s15
 800111a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800111e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001126:	d562      	bpl.n	80011ee <main+0x26e>
	  {
		  float freq = 0.25;
 8001128:	f04f 537a 	mov.w	r3, #1048576000	; 0x3e800000
 800112c:	62bb      	str	r3, [r7, #40]	; 0x28
	      target_vel1 = sinf(2.0*M_PI*loop_count*dt*freq)*4000;
 800112e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001130:	f7ff f9ac 	bl	800048c <__aeabi_ui2d>
 8001134:	a34c      	add	r3, pc, #304	; (adr r3, 8001268 <main+0x2e8>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	f7ff fa21 	bl	8000580 <__aeabi_dmul>
 800113e:	4602      	mov	r2, r0
 8001140:	460b      	mov	r3, r1
 8001142:	4614      	mov	r4, r2
 8001144:	461d      	mov	r5, r3
 8001146:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001148:	f7ff f9c2 	bl	80004d0 <__aeabi_f2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	4620      	mov	r0, r4
 8001152:	4629      	mov	r1, r5
 8001154:	f7ff fa14 	bl	8000580 <__aeabi_dmul>
 8001158:	4602      	mov	r2, r0
 800115a:	460b      	mov	r3, r1
 800115c:	4614      	mov	r4, r2
 800115e:	461d      	mov	r5, r3
 8001160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001162:	f7ff f9b5 	bl	80004d0 <__aeabi_f2d>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4620      	mov	r0, r4
 800116c:	4629      	mov	r1, r5
 800116e:	f7ff fa07 	bl	8000580 <__aeabi_dmul>
 8001172:	4602      	mov	r2, r0
 8001174:	460b      	mov	r3, r1
 8001176:	4610      	mov	r0, r2
 8001178:	4619      	mov	r1, r3
 800117a:	f7ff fc3b 	bl	80009f4 <__aeabi_d2f>
 800117e:	4603      	mov	r3, r0
 8001180:	ee00 3a10 	vmov	s0, r3
 8001184:	f002 fecc 	bl	8003f20 <sinf>
 8001188:	eef0 7a40 	vmov.f32	s15, s0
 800118c:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80012a0 <main+0x320>
 8001190:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001194:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
		  target_vel2 = -target_vel1;
 8001198:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800119c:	eef1 7a67 	vneg.f32	s15, s15
 80011a0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
//		  current = sinf(2.0*M_PI*loop_count*dt)*1.0;
		  current1 = motor1.PID_Controller(target_vel1 - motor1.state.Vel);
 80011a4:	4b3c      	ldr	r3, [pc, #240]	; (8001298 <main+0x318>)
 80011a6:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80011aa:	ee07 3a90 	vmov	s15, r3
 80011ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011b2:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 80011b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011ba:	eeb0 0a67 	vmov.f32	s0, s15
 80011be:	4836      	ldr	r0, [pc, #216]	; (8001298 <main+0x318>)
 80011c0:	f000 fa44 	bl	800164c <_ZN5Motor14PID_ControllerEf>
 80011c4:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		  current2 = motor2.PID_Controller(target_vel2 - motor2.state.Vel);
 80011c8:	4b34      	ldr	r3, [pc, #208]	; (800129c <main+0x31c>)
 80011ca:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 80011ce:	ee07 3a90 	vmov	s15, r3
 80011d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80011d6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80011da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011de:	eeb0 0a67 	vmov.f32	s0, s15
 80011e2:	482e      	ldr	r0, [pc, #184]	; (800129c <main+0x31c>)
 80011e4:	f000 fa32 	bl	800164c <_ZN5Motor14PID_ControllerEf>
 80011e8:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 80011ec:	e062      	b.n	80012b4 <main+0x334>
	  }
	  else if (dt*loop_count < 15)
 80011ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80011f0:	ee07 3a90 	vmov	s15, r3
 80011f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80011f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80011fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001200:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001204:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800120c:	d54c      	bpl.n	80012a8 <main+0x328>
	  {
		  target_vel1 = 2000;
 800120e:	4b25      	ldr	r3, [pc, #148]	; (80012a4 <main+0x324>)
 8001210:	63bb      	str	r3, [r7, #56]	; 0x38
		  target_vel2 = -target_vel1;
 8001212:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 8001216:	eef1 7a67 	vneg.f32	s15, s15
 800121a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
		  current1 = motor1.PID_Controller(target_vel1 - motor1.state.Vel);
 800121e:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <main+0x318>)
 8001220:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001224:	ee07 3a90 	vmov	s15, r3
 8001228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800122c:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 8001230:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001234:	eeb0 0a67 	vmov.f32	s0, s15
 8001238:	4817      	ldr	r0, [pc, #92]	; (8001298 <main+0x318>)
 800123a:	f000 fa07 	bl	800164c <_ZN5Motor14PID_ControllerEf>
 800123e:	ed87 0a11 	vstr	s0, [r7, #68]	; 0x44
		  current2 = motor2.PID_Controller(target_vel2 - motor2.state.Vel);
 8001242:	4b16      	ldr	r3, [pc, #88]	; (800129c <main+0x31c>)
 8001244:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	; 0x32
 8001248:	ee07 3a90 	vmov	s15, r3
 800124c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001250:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8001254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001258:	eeb0 0a67 	vmov.f32	s0, s15
 800125c:	480f      	ldr	r0, [pc, #60]	; (800129c <main+0x31c>)
 800125e:	f000 f9f5 	bl	800164c <_ZN5Motor14PID_ControllerEf>
 8001262:	ed87 0a10 	vstr	s0, [r7, #64]	; 0x40
 8001266:	e025      	b.n	80012b4 <main+0x334>
 8001268:	54442d18 	.word	0x54442d18
 800126c:	401921fb 	.word	0x401921fb
 8001270:	20000098 	.word	0x20000098
 8001274:	20000028 	.word	0x20000028
 8001278:	20000050 	.word	0x20000050
 800127c:	40340000 	.word	0x40340000
 8001280:	40d00000 	.word	0x40d00000
 8001284:	20000088 	.word	0x20000088
 8001288:	3a83126f 	.word	0x3a83126f
 800128c:	38d1b717 	.word	0x38d1b717
 8001290:	358637bd 	.word	0x358637bd
 8001294:	3a83126f 	.word	0x3a83126f
 8001298:	200000a0 	.word	0x200000a0
 800129c:	200000d8 	.word	0x200000d8
 80012a0:	457a0000 	.word	0x457a0000
 80012a4:	44fa0000 	.word	0x44fa0000
	  }
	  else
	  {
		  current1 = 0.0;
 80012a8:	f04f 0300 	mov.w	r3, #0
 80012ac:	647b      	str	r3, [r7, #68]	; 0x44
		  current2 = 0.0;
 80012ae:	f04f 0300 	mov.w	r3, #0
 80012b2:	643b      	str	r3, [r7, #64]	; 0x40
	  }
	  current_word1 = (int16_t)(current1/20.0*16384);
 80012b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80012b6:	f7ff f90b 	bl	80004d0 <__aeabi_f2d>
 80012ba:	f04f 0200 	mov.w	r2, #0
 80012be:	4b2f      	ldr	r3, [pc, #188]	; (800137c <main+0x3fc>)
 80012c0:	f7ff fa88 	bl	80007d4 <__aeabi_ddiv>
 80012c4:	4602      	mov	r2, r0
 80012c6:	460b      	mov	r3, r1
 80012c8:	4610      	mov	r0, r2
 80012ca:	4619      	mov	r1, r3
 80012cc:	f04f 0200 	mov.w	r2, #0
 80012d0:	4b2b      	ldr	r3, [pc, #172]	; (8001380 <main+0x400>)
 80012d2:	f7ff f955 	bl	8000580 <__aeabi_dmul>
 80012d6:	4602      	mov	r2, r0
 80012d8:	460b      	mov	r3, r1
 80012da:	4610      	mov	r0, r2
 80012dc:	4619      	mov	r1, r3
 80012de:	f7ff fb61 	bl	80009a4 <__aeabi_d2iz>
 80012e2:	4603      	mov	r3, r0
 80012e4:	867b      	strh	r3, [r7, #50]	; 0x32
	  current_word2 = (int16_t)(current2/20.0*16384);
 80012e6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80012e8:	f7ff f8f2 	bl	80004d0 <__aeabi_f2d>
 80012ec:	f04f 0200 	mov.w	r2, #0
 80012f0:	4b22      	ldr	r3, [pc, #136]	; (800137c <main+0x3fc>)
 80012f2:	f7ff fa6f 	bl	80007d4 <__aeabi_ddiv>
 80012f6:	4602      	mov	r2, r0
 80012f8:	460b      	mov	r3, r1
 80012fa:	4610      	mov	r0, r2
 80012fc:	4619      	mov	r1, r3
 80012fe:	f04f 0200 	mov.w	r2, #0
 8001302:	4b1f      	ldr	r3, [pc, #124]	; (8001380 <main+0x400>)
 8001304:	f7ff f93c 	bl	8000580 <__aeabi_dmul>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fb48 	bl	80009a4 <__aeabi_d2iz>
 8001314:	4603      	mov	r3, r0
 8001316:	863b      	strh	r3, [r7, #48]	; 0x30
	  TxData[0] = current_word1 >> 8;
 8001318:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800131c:	121b      	asrs	r3, r3, #8
 800131e:	b21b      	sxth	r3, r3
 8001320:	b2da      	uxtb	r2, r3
 8001322:	4b18      	ldr	r3, [pc, #96]	; (8001384 <main+0x404>)
 8001324:	701a      	strb	r2, [r3, #0]
	  TxData[1] = (int8_t)(current_word1 & 0x00ff);
 8001326:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8001328:	b2da      	uxtb	r2, r3
 800132a:	4b16      	ldr	r3, [pc, #88]	; (8001384 <main+0x404>)
 800132c:	705a      	strb	r2, [r3, #1]
	  TxData[2] = current_word2 >> 8;
 800132e:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001332:	121b      	asrs	r3, r3, #8
 8001334:	b21b      	sxth	r3, r3
 8001336:	b2da      	uxtb	r2, r3
 8001338:	4b12      	ldr	r3, [pc, #72]	; (8001384 <main+0x404>)
 800133a:	709a      	strb	r2, [r3, #2]
	  TxData[3] = (int8_t)(current_word2 & 0x00ff);
 800133c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800133e:	b2da      	uxtb	r2, r3
 8001340:	4b10      	ldr	r3, [pc, #64]	; (8001384 <main+0x404>)
 8001342:	70da      	strb	r2, [r3, #3]
//	  TxData[4] = current_word >> 8;
//	  TxData[5] = (int8_t)(current_word & 0x00ff);
//	  TxData[6] = current_word >> 8;
//	  TxData[7] = (int8_t)(current_word & 0x00ff);

	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8001344:	2120      	movs	r1, #32
 8001346:	4810      	ldr	r0, [pc, #64]	; (8001388 <main+0x408>)
 8001348:	f001 fcd5 	bl	8002cf6 <HAL_GPIO_TogglePin>


	  if (HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox) != HAL_OK)
 800134c:	4b0f      	ldr	r3, [pc, #60]	; (800138c <main+0x40c>)
 800134e:	4a0d      	ldr	r2, [pc, #52]	; (8001384 <main+0x404>)
 8001350:	490f      	ldr	r1, [pc, #60]	; (8001390 <main+0x410>)
 8001352:	4810      	ldr	r0, [pc, #64]	; (8001394 <main+0x414>)
 8001354:	f000 fdce 	bl	8001ef4 <HAL_CAN_AddTxMessage>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	bf14      	ite	ne
 800135e:	2301      	movne	r3, #1
 8001360:	2300      	moveq	r3, #0
 8001362:	b2db      	uxtb	r3, r3
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <main+0x3ec>
	  {
		 Error_Handler ();
 8001368:	f000 f91a 	bl	80015a0 <Error_Handler>
	  }



	  /* Wait 1 second */
	  HAL_Delay(1);
 800136c:	2001      	movs	r0, #1
 800136e:	f000 fb7d 	bl	8001a6c <HAL_Delay>
	  loop_count++;
 8001372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001374:	3301      	adds	r3, #1
 8001376:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
 8001378:	e6c6      	b.n	8001108 <main+0x188>
 800137a:	bf00      	nop
 800137c:	40340000 	.word	0x40340000
 8001380:	40d00000 	.word	0x40d00000
 8001384:	20000088 	.word	0x20000088
 8001388:	40020000 	.word	0x40020000
 800138c:	20000084 	.word	0x20000084
 8001390:	20000050 	.word	0x20000050
 8001394:	20000028 	.word	0x20000028

08001398 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b094      	sub	sp, #80	; 0x50
 800139c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	2234      	movs	r2, #52	; 0x34
 80013a4:	2100      	movs	r1, #0
 80013a6:	4618      	mov	r0, r3
 80013a8:	f003 fb3a 	bl	8004a20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	2200      	movs	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
 80013b4:	605a      	str	r2, [r3, #4]
 80013b6:	609a      	str	r2, [r3, #8]
 80013b8:	60da      	str	r2, [r3, #12]
 80013ba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
 80013c0:	4b34      	ldr	r3, [pc, #208]	; (8001494 <_Z18SystemClock_Configv+0xfc>)
 80013c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c4:	4a33      	ldr	r2, [pc, #204]	; (8001494 <_Z18SystemClock_Configv+0xfc>)
 80013c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ca:	6413      	str	r3, [r2, #64]	; 0x40
 80013cc:	4b31      	ldr	r3, [pc, #196]	; (8001494 <_Z18SystemClock_Configv+0xfc>)
 80013ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013d4:	607b      	str	r3, [r7, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013d8:	2300      	movs	r3, #0
 80013da:	603b      	str	r3, [r7, #0]
 80013dc:	4b2e      	ldr	r3, [pc, #184]	; (8001498 <_Z18SystemClock_Configv+0x100>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a2d      	ldr	r2, [pc, #180]	; (8001498 <_Z18SystemClock_Configv+0x100>)
 80013e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b2b      	ldr	r3, [pc, #172]	; (8001498 <_Z18SystemClock_Configv+0x100>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013f0:	603b      	str	r3, [r7, #0]
 80013f2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f4:	2302      	movs	r3, #2
 80013f6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013f8:	2301      	movs	r3, #1
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013fc:	2310      	movs	r3, #16
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001400:	2302      	movs	r3, #2
 8001402:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001404:	2300      	movs	r3, #0
 8001406:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001408:	2308      	movs	r3, #8
 800140a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 800140c:	23b4      	movs	r3, #180	; 0xb4
 800140e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001410:	2302      	movs	r3, #2
 8001412:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001414:	2302      	movs	r3, #2
 8001416:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001418:	2302      	movs	r3, #2
 800141a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4618      	mov	r0, r3
 8001422:	f002 f81d 	bl	8003460 <HAL_RCC_OscConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	bf14      	ite	ne
 800142c:	2301      	movne	r3, #1
 800142e:	2300      	moveq	r3, #0
 8001430:	b2db      	uxtb	r3, r3
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8001436:	f000 f8b3 	bl	80015a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800143a:	f001 fc77 	bl	8002d2c <HAL_PWREx_EnableOverDrive>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	bf14      	ite	ne
 8001444:	2301      	movne	r3, #1
 8001446:	2300      	moveq	r3, #0
 8001448:	b2db      	uxtb	r3, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 800144e:	f000 f8a7 	bl	80015a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001452:	230f      	movs	r3, #15
 8001454:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001456:	2302      	movs	r3, #2
 8001458:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800145a:	2300      	movs	r3, #0
 800145c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800145e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001462:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001468:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	2105      	movs	r1, #5
 8001470:	4618      	mov	r0, r3
 8001472:	f001 fcab 	bl	8002dcc <HAL_RCC_ClockConfig>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	bf14      	ite	ne
 800147c:	2301      	movne	r3, #1
 800147e:	2300      	moveq	r3, #0
 8001480:	b2db      	uxtb	r3, r3
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 8001486:	f000 f88b 	bl	80015a0 <Error_Handler>
  }
}
 800148a:	bf00      	nop
 800148c:	3750      	adds	r7, #80	; 0x50
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	40023800 	.word	0x40023800
 8001498:	40007000 	.word	0x40007000

0800149c <HAL_CAN_RxFifo0MsgPendingCallback>:

/* USER CODE BEGIN 4 */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b082      	sub	sp, #8
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
	count++;
 80014a4:	4b39      	ldr	r3, [pc, #228]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	3301      	adds	r3, #1
 80014aa:	4a38      	ldr	r2, [pc, #224]	; (800158c <HAL_CAN_RxFifo0MsgPendingCallback+0xf0>)
 80014ac:	6013      	str	r3, [r2, #0]
  if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80014ae:	4b38      	ldr	r3, [pc, #224]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80014b0:	4a38      	ldr	r2, [pc, #224]	; (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 80014b2:	2100      	movs	r1, #0
 80014b4:	6878      	ldr	r0, [r7, #4]
 80014b6:	f000 fdf8 	bl	80020aa <HAL_CAN_GetRxMessage>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	bf14      	ite	ne
 80014c0:	2301      	movne	r3, #1
 80014c2:	2300      	moveq	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <HAL_CAN_RxFifo0MsgPendingCallback+0x32>
  {
    Error_Handler();
 80014ca:	f000 f869 	bl	80015a0 <Error_Handler>
  }
//
  if ((RxHeader.StdId == 0x201))
 80014ce:	4b31      	ldr	r3, [pc, #196]	; (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f240 2201 	movw	r2, #513	; 0x201
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d127      	bne.n	800152a <HAL_CAN_RxFifo0MsgPendingCallback+0x8e>
  {
	  motor1.state.Ang = RxData[0]<<8 | RxData[1];
 80014da:	4b2d      	ldr	r3, [pc, #180]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80014dc:	781b      	ldrb	r3, [r3, #0]
 80014de:	021b      	lsls	r3, r3, #8
 80014e0:	b21a      	sxth	r2, r3
 80014e2:	4b2b      	ldr	r3, [pc, #172]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80014e4:	785b      	ldrb	r3, [r3, #1]
 80014e6:	b21b      	sxth	r3, r3
 80014e8:	4313      	orrs	r3, r2
 80014ea:	b21a      	sxth	r2, r3
 80014ec:	4b2a      	ldr	r3, [pc, #168]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 80014ee:	861a      	strh	r2, [r3, #48]	; 0x30
	  motor1.state.Vel = RxData[2]<<8 | RxData[3];
 80014f0:	4b27      	ldr	r3, [pc, #156]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80014f2:	789b      	ldrb	r3, [r3, #2]
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	4b25      	ldr	r3, [pc, #148]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 80014fa:	78db      	ldrb	r3, [r3, #3]
 80014fc:	b21b      	sxth	r3, r3
 80014fe:	4313      	orrs	r3, r2
 8001500:	b21a      	sxth	r2, r3
 8001502:	4b25      	ldr	r3, [pc, #148]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8001504:	865a      	strh	r2, [r3, #50]	; 0x32
	  motor1.state.Torq = RxData[4]<<8 | RxData[5];
 8001506:	4b22      	ldr	r3, [pc, #136]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001508:	791b      	ldrb	r3, [r3, #4]
 800150a:	021b      	lsls	r3, r3, #8
 800150c:	b21a      	sxth	r2, r3
 800150e:	4b20      	ldr	r3, [pc, #128]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001510:	795b      	ldrb	r3, [r3, #5]
 8001512:	b21b      	sxth	r3, r3
 8001514:	4313      	orrs	r3, r2
 8001516:	b21a      	sxth	r2, r3
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 800151a:	869a      	strh	r2, [r3, #52]	; 0x34
	  motor1.state.Temp = RxData[6];
 800151c:	4b1c      	ldr	r3, [pc, #112]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800151e:	799b      	ldrb	r3, [r3, #6]
 8001520:	b25a      	sxtb	r2, r3
 8001522:	4b1d      	ldr	r3, [pc, #116]	; (8001598 <HAL_CAN_RxFifo0MsgPendingCallback+0xfc>)
 8001524:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
	  motor2.state.Ang = RxData[0]<<8 | RxData[1];
	  motor2.state.Vel = RxData[2]<<8 | RxData[3];
	  motor2.state.Torq = RxData[4]<<8 | RxData[5];
	  motor2.state.Temp = RxData[6];
  }
}
 8001528:	e02c      	b.n	8001584 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
  else if((RxHeader.StdId == 0x202))
 800152a:	4b1a      	ldr	r3, [pc, #104]	; (8001594 <HAL_CAN_RxFifo0MsgPendingCallback+0xf8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f240 2202 	movw	r2, #514	; 0x202
 8001532:	4293      	cmp	r3, r2
 8001534:	d126      	bne.n	8001584 <HAL_CAN_RxFifo0MsgPendingCallback+0xe8>
	  motor2.state.Ang = RxData[0]<<8 | RxData[1];
 8001536:	4b16      	ldr	r3, [pc, #88]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001538:	781b      	ldrb	r3, [r3, #0]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	b21a      	sxth	r2, r3
 800153e:	4b14      	ldr	r3, [pc, #80]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001540:	785b      	ldrb	r3, [r3, #1]
 8001542:	b21b      	sxth	r3, r3
 8001544:	4313      	orrs	r3, r2
 8001546:	b21a      	sxth	r2, r3
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 800154a:	861a      	strh	r2, [r3, #48]	; 0x30
	  motor2.state.Vel = RxData[2]<<8 | RxData[3];
 800154c:	4b10      	ldr	r3, [pc, #64]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800154e:	789b      	ldrb	r3, [r3, #2]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	b21a      	sxth	r2, r3
 8001554:	4b0e      	ldr	r3, [pc, #56]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001556:	78db      	ldrb	r3, [r3, #3]
 8001558:	b21b      	sxth	r3, r3
 800155a:	4313      	orrs	r3, r2
 800155c:	b21a      	sxth	r2, r3
 800155e:	4b0f      	ldr	r3, [pc, #60]	; (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8001560:	865a      	strh	r2, [r3, #50]	; 0x32
	  motor2.state.Torq = RxData[4]<<8 | RxData[5];
 8001562:	4b0b      	ldr	r3, [pc, #44]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 8001564:	791b      	ldrb	r3, [r3, #4]
 8001566:	021b      	lsls	r3, r3, #8
 8001568:	b21a      	sxth	r2, r3
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800156c:	795b      	ldrb	r3, [r3, #5]
 800156e:	b21b      	sxth	r3, r3
 8001570:	4313      	orrs	r3, r2
 8001572:	b21a      	sxth	r2, r3
 8001574:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8001576:	869a      	strh	r2, [r3, #52]	; 0x34
	  motor2.state.Temp = RxData[6];
 8001578:	4b05      	ldr	r3, [pc, #20]	; (8001590 <HAL_CAN_RxFifo0MsgPendingCallback+0xf4>)
 800157a:	799b      	ldrb	r3, [r3, #6]
 800157c:	b25a      	sxtb	r2, r3
 800157e:	4b07      	ldr	r3, [pc, #28]	; (800159c <HAL_CAN_RxFifo0MsgPendingCallback+0x100>)
 8001580:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
}
 8001584:	bf00      	nop
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}
 800158c:	2000009c 	.word	0x2000009c
 8001590:	20000090 	.word	0x20000090
 8001594:	20000068 	.word	0x20000068
 8001598:	200000a0 	.word	0x200000a0
 800159c:	200000d8 	.word	0x200000d8

080015a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a4:	b672      	cpsid	i
}
 80015a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <Error_Handler+0x8>

080015aa <_ZN5Motor8PID_InitEffff>:
	Kp = kp;
	Ki = ki;
	Kd = kd;
}
void Motor::PID_Init(float kp, float ki, float kd, float out_thresh)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b087      	sub	sp, #28
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6178      	str	r0, [r7, #20]
 80015b2:	ed87 0a04 	vstr	s0, [r7, #16]
 80015b6:	edc7 0a03 	vstr	s1, [r7, #12]
 80015ba:	ed87 1a02 	vstr	s2, [r7, #8]
 80015be:	edc7 1a01 	vstr	s3, [r7, #4]
	Kp = kp;
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	693a      	ldr	r2, [r7, #16]
 80015c6:	621a      	str	r2, [r3, #32]
	Ki = ki;
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	61da      	str	r2, [r3, #28]
	Kd = kd;
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	68ba      	ldr	r2, [r7, #8]
 80015d2:	619a      	str	r2, [r3, #24]
	A0 = Kp + Ki + Kd;
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	ed93 7a08 	vldr	s14, [r3, #32]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	edd3 7a07 	vldr	s15, [r3, #28]
 80015e0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	edd3 7a06 	vldr	s15, [r3, #24]
 80015ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	edc3 7a00 	vstr	s15, [r3]
	A1 = (-Kp ) - (2 * Kd );
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	edd3 7a08 	vldr	s15, [r3, #32]
 80015fa:	eeb1 7a67 	vneg.f32	s14, s15
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	edd3 7a06 	vldr	s15, [r3, #24]
 8001604:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	edc3 7a01 	vstr	s15, [r3, #4]
	A2 = Kd;
 8001612:	697b      	ldr	r3, [r7, #20]
 8001614:	699a      	ldr	r2, [r3, #24]
 8001616:	697b      	ldr	r3, [r7, #20]
 8001618:	609a      	str	r2, [r3, #8]
	pid_state[0] = 0.0;
 800161a:	697b      	ldr	r3, [r7, #20]
 800161c:	f04f 0200 	mov.w	r2, #0
 8001620:	60da      	str	r2, [r3, #12]
	pid_state[1] = 0.0;
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	f04f 0200 	mov.w	r2, #0
 8001628:	611a      	str	r2, [r3, #16]
	pid_state[2] = 0.0;
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	f04f 0200 	mov.w	r2, #0
 8001630:	615a      	str	r2, [r3, #20]
	output = 0.0;
 8001632:	697b      	ldr	r3, [r7, #20]
 8001634:	f04f 0200 	mov.w	r2, #0
 8001638:	625a      	str	r2, [r3, #36]	; 0x24
	output_threshold = out_thresh;
 800163a:	697b      	ldr	r3, [r7, #20]
 800163c:	687a      	ldr	r2, [r7, #4]
 800163e:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001640:	bf00      	nop
 8001642:	371c      	adds	r7, #28
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_ZN5Motor14PID_ControllerEf>:
float Motor::PID_Controller(float error)
{
 800164c:	b480      	push	{r7}
 800164e:	b089      	sub	sp, #36	; 0x24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	ed87 0a00 	vstr	s0, [r7]

//	y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2];

	output = pid_state[2] + A0 * error + A1 * pid_state[0] + A2 * pid_state[1];
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	ed93 7a05 	vldr	s14, [r3, #20]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	edd3 6a00 	vldr	s13, [r3]
 8001664:	edd7 7a00 	vldr	s15, [r7]
 8001668:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800166c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	edd3 6a01 	vldr	s13, [r3, #4]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	edd3 7a03 	vldr	s15, [r3, #12]
 800167c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001680:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	edd3 6a02 	vldr	s13, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001690:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001694:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
	float part1 = pid_state[2];
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	695b      	ldr	r3, [r3, #20]
 80016a2:	61fb      	str	r3, [r7, #28]
	float part2 = A0 * error;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ed97 7a00 	vldr	s14, [r7]
 80016ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016b2:	edc7 7a06 	vstr	s15, [r7, #24]
	float part3 = A1 * pid_state[0];
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	ed93 7a01 	vldr	s14, [r3, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	edd3 7a03 	vldr	s15, [r3, #12]
 80016c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016c6:	edc7 7a05 	vstr	s15, [r7, #20]
	float part4 = A2 * pid_state[1];
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	edd3 7a04 	vldr	s15, [r3, #16]
 80016d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016da:	edc7 7a04 	vstr	s15, [r7, #16]
	float total = part1 + part2 + part3 + part4;
 80016de:	ed97 7a07 	vldr	s14, [r7, #28]
 80016e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80016e6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80016ea:	edd7 7a05 	vldr	s15, [r7, #20]
 80016ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f2:	ed97 7a04 	vldr	s14, [r7, #16]
 80016f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016fa:	edc7 7a03 	vstr	s15, [r7, #12]
//	output = total*output_scale;
//	output = output*output_scale;
	// Thresholding
	if(output > output_threshold)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800170a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800170e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001712:	dd03      	ble.n	800171c <_ZN5Motor14PID_ControllerEf+0xd0>
		output = output_threshold;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	625a      	str	r2, [r3, #36]	; 0x24
	if(output < - output_threshold)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8001728:	eef1 7a67 	vneg.f32	s15, s15
 800172c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001730:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001734:	d507      	bpl.n	8001746 <_ZN5Motor14PID_ControllerEf+0xfa>
		output = -output_threshold;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 800173c:	eef1 7a67 	vneg.f32	s15, s15
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24

	pid_state[1] = pid_state[0];
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	611a      	str	r2, [r3, #16]
	pid_state[0] = error;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	60da      	str	r2, [r3, #12]
	pid_state[2] = output;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	615a      	str	r2, [r3, #20]

	return output;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	ee07 3a90 	vmov	s15, r3
}
 8001764:	eeb0 0a67 	vmov.f32	s0, s15
 8001768:	3724      	adds	r7, #36	; 0x24
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
	...

08001774 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	607b      	str	r3, [r7, #4]
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <HAL_MspInit+0x4c>)
 8001780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001782:	4a0f      	ldr	r2, [pc, #60]	; (80017c0 <HAL_MspInit+0x4c>)
 8001784:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001788:	6453      	str	r3, [r2, #68]	; 0x44
 800178a:	4b0d      	ldr	r3, [pc, #52]	; (80017c0 <HAL_MspInit+0x4c>)
 800178c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800178e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	603b      	str	r3, [r7, #0]
 800179a:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <HAL_MspInit+0x4c>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	4a08      	ldr	r2, [pc, #32]	; (80017c0 <HAL_MspInit+0x4c>)
 80017a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017a4:	6413      	str	r3, [r2, #64]	; 0x40
 80017a6:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <HAL_MspInit+0x4c>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ae:	603b      	str	r3, [r7, #0]
 80017b0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80017b2:	2007      	movs	r0, #7
 80017b4:	f001 f8b0 	bl	8002918 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b8:	bf00      	nop
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	40023800 	.word	0x40023800

080017c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017c8:	e7fe      	b.n	80017c8 <NMI_Handler+0x4>

080017ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ca:	b480      	push	{r7}
 80017cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ce:	e7fe      	b.n	80017ce <HardFault_Handler+0x4>

080017d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017d4:	e7fe      	b.n	80017d4 <MemManage_Handler+0x4>

080017d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017d6:	b480      	push	{r7}
 80017d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017da:	e7fe      	b.n	80017da <BusFault_Handler+0x4>

080017dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017e0:	e7fe      	b.n	80017e0 <UsageFault_Handler+0x4>

080017e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017e2:	b480      	push	{r7}
 80017e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017e6:	bf00      	nop
 80017e8:	46bd      	mov	sp, r7
 80017ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ee:	4770      	bx	lr

080017f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001810:	f000 f90c 	bl	8001a2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001814:	bf00      	nop
 8001816:	bd80      	pop	{r7, pc}

08001818 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <CAN1_RX0_IRQHandler+0x10>)
 800181e:	f000 fd7c 	bl	800231a <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20000028 	.word	0x20000028

0800182c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <SystemInit+0x20>)
 8001832:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001836:	4a05      	ldr	r2, [pc, #20]	; (800184c <SystemInit+0x20>)
 8001838:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800183c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001840:	bf00      	nop
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001854:	4b11      	ldr	r3, [pc, #68]	; (800189c <MX_USART2_UART_Init+0x4c>)
 8001856:	4a12      	ldr	r2, [pc, #72]	; (80018a0 <MX_USART2_UART_Init+0x50>)
 8001858:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800185a:	4b10      	ldr	r3, [pc, #64]	; (800189c <MX_USART2_UART_Init+0x4c>)
 800185c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001860:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001862:	4b0e      	ldr	r3, [pc, #56]	; (800189c <MX_USART2_UART_Init+0x4c>)
 8001864:	2200      	movs	r2, #0
 8001866:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001868:	4b0c      	ldr	r3, [pc, #48]	; (800189c <MX_USART2_UART_Init+0x4c>)
 800186a:	2200      	movs	r2, #0
 800186c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <MX_USART2_UART_Init+0x4c>)
 8001870:	2200      	movs	r2, #0
 8001872:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001874:	4b09      	ldr	r3, [pc, #36]	; (800189c <MX_USART2_UART_Init+0x4c>)
 8001876:	220c      	movs	r2, #12
 8001878:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <MX_USART2_UART_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <MX_USART2_UART_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001886:	4805      	ldr	r0, [pc, #20]	; (800189c <MX_USART2_UART_Init+0x4c>)
 8001888:	f002 f888 	bl	800399c <HAL_UART_Init>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001892:	f7ff fe85 	bl	80015a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001896:	bf00      	nop
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000110 	.word	0x20000110
 80018a0:	40004400 	.word	0x40004400

080018a4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b08a      	sub	sp, #40	; 0x28
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ac:	f107 0314 	add.w	r3, r7, #20
 80018b0:	2200      	movs	r2, #0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	605a      	str	r2, [r3, #4]
 80018b6:	609a      	str	r2, [r3, #8]
 80018b8:	60da      	str	r2, [r3, #12]
 80018ba:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a19      	ldr	r2, [pc, #100]	; (8001928 <HAL_UART_MspInit+0x84>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d12b      	bne.n	800191e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	613b      	str	r3, [r7, #16]
 80018ca:	4b18      	ldr	r3, [pc, #96]	; (800192c <HAL_UART_MspInit+0x88>)
 80018cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ce:	4a17      	ldr	r2, [pc, #92]	; (800192c <HAL_UART_MspInit+0x88>)
 80018d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018d4:	6413      	str	r3, [r2, #64]	; 0x40
 80018d6:	4b15      	ldr	r3, [pc, #84]	; (800192c <HAL_UART_MspInit+0x88>)
 80018d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018de:	613b      	str	r3, [r7, #16]
 80018e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_UART_MspInit+0x88>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	4a10      	ldr	r2, [pc, #64]	; (800192c <HAL_UART_MspInit+0x88>)
 80018ec:	f043 0301 	orr.w	r3, r3, #1
 80018f0:	6313      	str	r3, [r2, #48]	; 0x30
 80018f2:	4b0e      	ldr	r3, [pc, #56]	; (800192c <HAL_UART_MspInit+0x88>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	f003 0301 	and.w	r3, r3, #1
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80018fe:	230c      	movs	r3, #12
 8001900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001902:	2302      	movs	r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001906:	2300      	movs	r3, #0
 8001908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800190a:	2303      	movs	r3, #3
 800190c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800190e:	2307      	movs	r3, #7
 8001910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001912:	f107 0314 	add.w	r3, r7, #20
 8001916:	4619      	mov	r1, r3
 8001918:	4805      	ldr	r0, [pc, #20]	; (8001930 <HAL_UART_MspInit+0x8c>)
 800191a:	f001 f83f 	bl	800299c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800191e:	bf00      	nop
 8001920:	3728      	adds	r7, #40	; 0x28
 8001922:	46bd      	mov	sp, r7
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	40004400 	.word	0x40004400
 800192c:	40023800 	.word	0x40023800
 8001930:	40020000 	.word	0x40020000

08001934 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001934:	f8df d034 	ldr.w	sp, [pc, #52]	; 800196c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001938:	480d      	ldr	r0, [pc, #52]	; (8001970 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800193a:	490e      	ldr	r1, [pc, #56]	; (8001974 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800193c:	4a0e      	ldr	r2, [pc, #56]	; (8001978 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800193e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001940:	e002      	b.n	8001948 <LoopCopyDataInit>

08001942 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001942:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001944:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001946:	3304      	adds	r3, #4

08001948 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001948:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800194a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800194c:	d3f9      	bcc.n	8001942 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800194e:	4a0b      	ldr	r2, [pc, #44]	; (800197c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001950:	4c0b      	ldr	r4, [pc, #44]	; (8001980 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001954:	e001      	b.n	800195a <LoopFillZerobss>

08001956 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001956:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001958:	3204      	adds	r2, #4

0800195a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800195a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800195c:	d3fb      	bcc.n	8001956 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800195e:	f7ff ff65 	bl	800182c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001962:	f003 f839 	bl	80049d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001966:	f7ff fb0b 	bl	8000f80 <main>
  bx  lr    
 800196a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800196c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001974:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001978:	08004e40 	.word	0x08004e40
  ldr r2, =_sbss
 800197c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001980:	20000158 	.word	0x20000158

08001984 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001984:	e7fe      	b.n	8001984 <ADC_IRQHandler>
	...

08001988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800198c:	4b0e      	ldr	r3, [pc, #56]	; (80019c8 <HAL_Init+0x40>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	4a0d      	ldr	r2, [pc, #52]	; (80019c8 <HAL_Init+0x40>)
 8001992:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001996:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001998:	4b0b      	ldr	r3, [pc, #44]	; (80019c8 <HAL_Init+0x40>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <HAL_Init+0x40>)
 800199e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019a4:	4b08      	ldr	r3, [pc, #32]	; (80019c8 <HAL_Init+0x40>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a07      	ldr	r2, [pc, #28]	; (80019c8 <HAL_Init+0x40>)
 80019aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019b0:	2003      	movs	r0, #3
 80019b2:	f000 ffb1 	bl	8002918 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019b6:	2000      	movs	r0, #0
 80019b8:	f000 f808 	bl	80019cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019bc:	f7ff feda 	bl	8001774 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	40023c00 	.word	0x40023c00

080019cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <HAL_InitTick+0x54>)
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	4b12      	ldr	r3, [pc, #72]	; (8001a24 <HAL_InitTick+0x58>)
 80019da:	781b      	ldrb	r3, [r3, #0]
 80019dc:	4619      	mov	r1, r3
 80019de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80019e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80019ea:	4618      	mov	r0, r3
 80019ec:	f000 ffc9 	bl	8002982 <HAL_SYSTICK_Config>
 80019f0:	4603      	mov	r3, r0
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d001      	beq.n	80019fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019f6:	2301      	movs	r3, #1
 80019f8:	e00e      	b.n	8001a18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b0f      	cmp	r3, #15
 80019fe:	d80a      	bhi.n	8001a16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a00:	2200      	movs	r2, #0
 8001a02:	6879      	ldr	r1, [r7, #4]
 8001a04:	f04f 30ff 	mov.w	r0, #4294967295
 8001a08:	f000 ff91 	bl	800292e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a0c:	4a06      	ldr	r2, [pc, #24]	; (8001a28 <HAL_InitTick+0x5c>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	e000      	b.n	8001a18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3708      	adds	r7, #8
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000000 	.word	0x20000000
 8001a24:	20000008 	.word	0x20000008
 8001a28:	20000004 	.word	0x20000004

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x20>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_IncTick+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000154 	.word	0x20000154

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000154 	.word	0x20000154

08001a6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b084      	sub	sp, #16
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff ffee 	bl	8001a54 <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a84:	d005      	beq.n	8001a92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a86:	4b0a      	ldr	r3, [pc, #40]	; (8001ab0 <HAL_Delay+0x44>)
 8001a88:	781b      	ldrb	r3, [r3, #0]
 8001a8a:	461a      	mov	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4413      	add	r3, r2
 8001a90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a92:	bf00      	nop
 8001a94:	f7ff ffde 	bl	8001a54 <HAL_GetTick>
 8001a98:	4602      	mov	r2, r0
 8001a9a:	68bb      	ldr	r3, [r7, #8]
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	68fa      	ldr	r2, [r7, #12]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d8f7      	bhi.n	8001a94 <HAL_Delay+0x28>
  {
  }
}
 8001aa4:	bf00      	nop
 8001aa6:	bf00      	nop
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	20000008 	.word	0x20000008

08001ab4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b084      	sub	sp, #16
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d101      	bne.n	8001ac6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	e0ed      	b.n	8001ca2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d102      	bne.n	8001ad8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001ad2:	6878      	ldr	r0, [r7, #4]
 8001ad4:	f7ff f996 	bl	8000e04 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f042 0201 	orr.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ae8:	f7ff ffb4 	bl	8001a54 <HAL_GetTick>
 8001aec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001aee:	e012      	b.n	8001b16 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001af0:	f7ff ffb0 	bl	8001a54 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b0a      	cmp	r3, #10
 8001afc:	d90b      	bls.n	8001b16 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b02:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	2205      	movs	r2, #5
 8001b0e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e0c5      	b.n	8001ca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0301 	and.w	r3, r3, #1
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d0e5      	beq.n	8001af0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0202 	bic.w	r2, r2, #2
 8001b32:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001b34:	f7ff ff8e 	bl	8001a54 <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b3a:	e012      	b.n	8001b62 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001b3c:	f7ff ff8a 	bl	8001a54 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b0a      	cmp	r3, #10
 8001b48:	d90b      	bls.n	8001b62 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b4e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	2205      	movs	r2, #5
 8001b5a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e09f      	b.n	8001ca2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d1e5      	bne.n	8001b3c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	7e1b      	ldrb	r3, [r3, #24]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d108      	bne.n	8001b8a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	681a      	ldr	r2, [r3, #0]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	e007      	b.n	8001b9a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b98:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	7e5b      	ldrb	r3, [r3, #25]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d108      	bne.n	8001bb4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	681a      	ldr	r2, [r3, #0]
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	e007      	b.n	8001bc4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	681a      	ldr	r2, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001bc2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	7e9b      	ldrb	r3, [r3, #26]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d108      	bne.n	8001bde <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	681a      	ldr	r2, [r3, #0]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f042 0220 	orr.w	r2, r2, #32
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	e007      	b.n	8001bee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0220 	bic.w	r2, r2, #32
 8001bec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	7edb      	ldrb	r3, [r3, #27]
 8001bf2:	2b01      	cmp	r3, #1
 8001bf4:	d108      	bne.n	8001c08 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f022 0210 	bic.w	r2, r2, #16
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	e007      	b.n	8001c18 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	681a      	ldr	r2, [r3, #0]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f042 0210 	orr.w	r2, r2, #16
 8001c16:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	7f1b      	ldrb	r3, [r3, #28]
 8001c1c:	2b01      	cmp	r3, #1
 8001c1e:	d108      	bne.n	8001c32 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f042 0208 	orr.w	r2, r2, #8
 8001c2e:	601a      	str	r2, [r3, #0]
 8001c30:	e007      	b.n	8001c42 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	681a      	ldr	r2, [r3, #0]
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f022 0208 	bic.w	r2, r2, #8
 8001c40:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	7f5b      	ldrb	r3, [r3, #29]
 8001c46:	2b01      	cmp	r3, #1
 8001c48:	d108      	bne.n	8001c5c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f042 0204 	orr.w	r2, r2, #4
 8001c58:	601a      	str	r2, [r3, #0]
 8001c5a:	e007      	b.n	8001c6c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f022 0204 	bic.w	r2, r2, #4
 8001c6a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	689a      	ldr	r2, [r3, #8]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	691b      	ldr	r3, [r3, #16]
 8001c7a:	431a      	orrs	r2, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	695b      	ldr	r3, [r3, #20]
 8001c80:	ea42 0103 	orr.w	r1, r2, r3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	1e5a      	subs	r2, r3, #1
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	430a      	orrs	r2, r1
 8001c90:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2200      	movs	r2, #0
 8001c96:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	2201      	movs	r2, #1
 8001c9c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}
	...

08001cac <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001cc2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8001cc4:	7cfb      	ldrb	r3, [r7, #19]
 8001cc6:	2b01      	cmp	r3, #1
 8001cc8:	d003      	beq.n	8001cd2 <HAL_CAN_ConfigFilter+0x26>
 8001cca:	7cfb      	ldrb	r3, [r7, #19]
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	f040 80be 	bne.w	8001e4e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001cd2:	4b65      	ldr	r3, [pc, #404]	; (8001e68 <HAL_CAN_ConfigFilter+0x1bc>)
 8001cd4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cdc:	f043 0201 	orr.w	r2, r3, #1
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001cec:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 8001cf0:	697b      	ldr	r3, [r7, #20]
 8001cf2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	021b      	lsls	r3, r3, #8
 8001d02:	431a      	orrs	r2, r3
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	f003 031f 	and.w	r3, r3, #31
 8001d12:	2201      	movs	r2, #1
 8001d14:	fa02 f303 	lsl.w	r3, r2, r3
 8001d18:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	43db      	mvns	r3, r3
 8001d24:	401a      	ands	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	69db      	ldr	r3, [r3, #28]
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d123      	bne.n	8001d7c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	43db      	mvns	r3, r3
 8001d3e:	401a      	ands	r2, r3
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	68db      	ldr	r3, [r3, #12]
 8001d4a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d52:	683a      	ldr	r2, [r7, #0]
 8001d54:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001d56:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	3248      	adds	r2, #72	; 0x48
 8001d5c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001d70:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001d72:	6979      	ldr	r1, [r7, #20]
 8001d74:	3348      	adds	r3, #72	; 0x48
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	440b      	add	r3, r1
 8001d7a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d122      	bne.n	8001dca <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001d84:	697b      	ldr	r3, [r7, #20]
 8001d86:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	431a      	orrs	r2, r3
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001da4:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	3248      	adds	r2, #72	; 0x48
 8001daa:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	68db      	ldr	r3, [r3, #12]
 8001db8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001dbe:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001dc0:	6979      	ldr	r1, [r7, #20]
 8001dc2:	3348      	adds	r3, #72	; 0x48
 8001dc4:	00db      	lsls	r3, r3, #3
 8001dc6:	440b      	add	r3, r1
 8001dc8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	699b      	ldr	r3, [r3, #24]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d109      	bne.n	8001de6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	401a      	ands	r2, r3
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001de4:	e007      	b.n	8001df6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001de6:	697b      	ldr	r3, [r7, #20]
 8001de8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	431a      	orrs	r2, r3
 8001df0:	697b      	ldr	r3, [r7, #20]
 8001df2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d109      	bne.n	8001e12 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	401a      	ands	r2, r3
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8001e10:	e007      	b.n	8001e22 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	431a      	orrs	r2, r3
 8001e1c:	697b      	ldr	r3, [r7, #20]
 8001e1e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	6a1b      	ldr	r3, [r3, #32]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d107      	bne.n	8001e3a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001e2a:	697b      	ldr	r3, [r7, #20]
 8001e2c:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	431a      	orrs	r2, r3
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001e40:	f023 0201 	bic.w	r2, r3, #1
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
 8001e4c:	e006      	b.n	8001e5c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001e5a:	2301      	movs	r3, #1
  }
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	371c      	adds	r7, #28
 8001e60:	46bd      	mov	sp, r7
 8001e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e66:	4770      	bx	lr
 8001e68:	40006400 	.word	0x40006400

08001e6c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b084      	sub	sp, #16
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e7a:	b2db      	uxtb	r3, r3
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d12e      	bne.n	8001ede <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2202      	movs	r2, #2
 8001e84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	681a      	ldr	r2, [r3, #0]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f022 0201 	bic.w	r2, r2, #1
 8001e96:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001e98:	f7ff fddc 	bl	8001a54 <HAL_GetTick>
 8001e9c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001e9e:	e012      	b.n	8001ec6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ea0:	f7ff fdd8 	bl	8001a54 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b0a      	cmp	r3, #10
 8001eac:	d90b      	bls.n	8001ec6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb2:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2205      	movs	r2, #5
 8001ebe:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	e012      	b.n	8001eec <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	f003 0301 	and.w	r3, r3, #1
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d1e5      	bne.n	8001ea0 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8001eda:	2300      	movs	r3, #0
 8001edc:	e006      	b.n	8001eec <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ee2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
  }
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8001ef4:	b480      	push	{r7}
 8001ef6:	b089      	sub	sp, #36	; 0x24
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	60f8      	str	r0, [r7, #12]
 8001efc:	60b9      	str	r1, [r7, #8]
 8001efe:	607a      	str	r2, [r7, #4]
 8001f00:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f08:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	689b      	ldr	r3, [r3, #8]
 8001f10:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8001f12:	7ffb      	ldrb	r3, [r7, #31]
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	d003      	beq.n	8001f20 <HAL_CAN_AddTxMessage+0x2c>
 8001f18:	7ffb      	ldrb	r3, [r7, #31]
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	f040 80b8 	bne.w	8002090 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f20:	69bb      	ldr	r3, [r7, #24]
 8001f22:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10a      	bne.n	8001f40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d105      	bne.n	8001f40 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	f000 80a0 	beq.w	8002080 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8001f40:	69bb      	ldr	r3, [r7, #24]
 8001f42:	0e1b      	lsrs	r3, r3, #24
 8001f44:	f003 0303 	and.w	r3, r3, #3
 8001f48:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8001f4a:	697b      	ldr	r3, [r7, #20]
 8001f4c:	2b02      	cmp	r3, #2
 8001f4e:	d907      	bls.n	8001f60 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f54:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e09e      	b.n	800209e <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8001f60:	2201      	movs	r2, #1
 8001f62:	697b      	ldr	r3, [r7, #20]
 8001f64:	409a      	lsls	r2, r3
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8001f6a:	68bb      	ldr	r3, [r7, #8]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d10d      	bne.n	8001f8e <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8001f7c:	68f9      	ldr	r1, [r7, #12]
 8001f7e:	6809      	ldr	r1, [r1, #0]
 8001f80:	431a      	orrs	r2, r3
 8001f82:	697b      	ldr	r3, [r7, #20]
 8001f84:	3318      	adds	r3, #24
 8001f86:	011b      	lsls	r3, r3, #4
 8001f88:	440b      	add	r3, r1
 8001f8a:	601a      	str	r2, [r3, #0]
 8001f8c:	e00f      	b.n	8001fae <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f98:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001f9e:	68f9      	ldr	r1, [r7, #12]
 8001fa0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8001fa2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	3318      	adds	r3, #24
 8001fa8:	011b      	lsls	r3, r3, #4
 8001faa:	440b      	add	r3, r1
 8001fac:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	6819      	ldr	r1, [r3, #0]
 8001fb2:	68bb      	ldr	r3, [r7, #8]
 8001fb4:	691a      	ldr	r2, [r3, #16]
 8001fb6:	697b      	ldr	r3, [r7, #20]
 8001fb8:	3318      	adds	r3, #24
 8001fba:	011b      	lsls	r3, r3, #4
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	7d1b      	ldrb	r3, [r3, #20]
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d111      	bne.n	8001fee <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	3318      	adds	r3, #24
 8001fd2:	011b      	lsls	r3, r3, #4
 8001fd4:	4413      	add	r3, r2
 8001fd6:	3304      	adds	r3, #4
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68fa      	ldr	r2, [r7, #12]
 8001fdc:	6811      	ldr	r1, [r2, #0]
 8001fde:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	3318      	adds	r3, #24
 8001fe6:	011b      	lsls	r3, r3, #4
 8001fe8:	440b      	add	r3, r1
 8001fea:	3304      	adds	r3, #4
 8001fec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	3307      	adds	r3, #7
 8001ff2:	781b      	ldrb	r3, [r3, #0]
 8001ff4:	061a      	lsls	r2, r3, #24
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3306      	adds	r3, #6
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	041b      	lsls	r3, r3, #16
 8001ffe:	431a      	orrs	r2, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	3305      	adds	r3, #5
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	021b      	lsls	r3, r3, #8
 8002008:	4313      	orrs	r3, r2
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	3204      	adds	r2, #4
 800200e:	7812      	ldrb	r2, [r2, #0]
 8002010:	4610      	mov	r0, r2
 8002012:	68fa      	ldr	r2, [r7, #12]
 8002014:	6811      	ldr	r1, [r2, #0]
 8002016:	ea43 0200 	orr.w	r2, r3, r0
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	011b      	lsls	r3, r3, #4
 800201e:	440b      	add	r3, r1
 8002020:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8002024:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3303      	adds	r3, #3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	061a      	lsls	r2, r3, #24
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	3302      	adds	r3, #2
 8002032:	781b      	ldrb	r3, [r3, #0]
 8002034:	041b      	lsls	r3, r3, #16
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3301      	adds	r3, #1
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	021b      	lsls	r3, r3, #8
 8002040:	4313      	orrs	r3, r2
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	7812      	ldrb	r2, [r2, #0]
 8002046:	4610      	mov	r0, r2
 8002048:	68fa      	ldr	r2, [r7, #12]
 800204a:	6811      	ldr	r1, [r2, #0]
 800204c:	ea43 0200 	orr.w	r2, r3, r0
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	011b      	lsls	r3, r3, #4
 8002054:	440b      	add	r3, r1
 8002056:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800205a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	3318      	adds	r3, #24
 8002064:	011b      	lsls	r3, r3, #4
 8002066:	4413      	add	r3, r2
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	6811      	ldr	r1, [r2, #0]
 800206e:	f043 0201 	orr.w	r2, r3, #1
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	3318      	adds	r3, #24
 8002076:	011b      	lsls	r3, r3, #4
 8002078:	440b      	add	r3, r1
 800207a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800207c:	2300      	movs	r3, #0
 800207e:	e00e      	b.n	800209e <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002084:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800208c:	2301      	movs	r3, #1
 800208e:	e006      	b.n	800209e <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002094:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800209c:	2301      	movs	r3, #1
  }
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3724      	adds	r7, #36	; 0x24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a8:	4770      	bx	lr

080020aa <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80020aa:	b480      	push	{r7}
 80020ac:	b087      	sub	sp, #28
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	60f8      	str	r0, [r7, #12]
 80020b2:	60b9      	str	r1, [r7, #8]
 80020b4:	607a      	str	r2, [r7, #4]
 80020b6:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020be:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80020c0:	7dfb      	ldrb	r3, [r7, #23]
 80020c2:	2b01      	cmp	r3, #1
 80020c4:	d003      	beq.n	80020ce <HAL_CAN_GetRxMessage+0x24>
 80020c6:	7dfb      	ldrb	r3, [r7, #23]
 80020c8:	2b02      	cmp	r3, #2
 80020ca:	f040 80f3 	bne.w	80022b4 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d10e      	bne.n	80020f2 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	68db      	ldr	r3, [r3, #12]
 80020da:	f003 0303 	and.w	r3, r3, #3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d116      	bne.n	8002110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 80020ee:	2301      	movs	r3, #1
 80020f0:	e0e7      	b.n	80022c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691b      	ldr	r3, [r3, #16]
 80020f8:	f003 0303 	and.w	r3, r3, #3
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d107      	bne.n	8002110 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800210c:	2301      	movs	r3, #1
 800210e:	e0d8      	b.n	80022c2 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	331b      	adds	r3, #27
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	4413      	add	r3, r2
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0204 	and.w	r2, r3, #4
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d10c      	bne.n	8002148 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	331b      	adds	r3, #27
 8002136:	011b      	lsls	r3, r3, #4
 8002138:	4413      	add	r3, r2
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	0d5b      	lsrs	r3, r3, #21
 800213e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	601a      	str	r2, [r3, #0]
 8002146:	e00b      	b.n	8002160 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	331b      	adds	r3, #27
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	4413      	add	r3, r2
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	08db      	lsrs	r3, r3, #3
 8002158:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	331b      	adds	r3, #27
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	4413      	add	r3, r2
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 0202 	and.w	r2, r3, #2
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	331b      	adds	r3, #27
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	4413      	add	r3, r2
 8002182:	3304      	adds	r3, #4
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f003 020f 	and.w	r2, r3, #15
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	331b      	adds	r3, #27
 8002196:	011b      	lsls	r3, r3, #4
 8002198:	4413      	add	r3, r2
 800219a:	3304      	adds	r3, #4
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	0a1b      	lsrs	r3, r3, #8
 80021a0:	b2da      	uxtb	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681a      	ldr	r2, [r3, #0]
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	331b      	adds	r3, #27
 80021ae:	011b      	lsls	r3, r3, #4
 80021b0:	4413      	add	r3, r2
 80021b2:	3304      	adds	r3, #4
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	0c1b      	lsrs	r3, r3, #16
 80021b8:	b29a      	uxth	r2, r3
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	68bb      	ldr	r3, [r7, #8]
 80021c4:	011b      	lsls	r3, r3, #4
 80021c6:	4413      	add	r3, r2
 80021c8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	b2da      	uxtb	r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	4413      	add	r3, r2
 80021de:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	0a1a      	lsrs	r2, r3, #8
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	3301      	adds	r3, #1
 80021ea:	b2d2      	uxtb	r2, r2
 80021ec:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	011b      	lsls	r3, r3, #4
 80021f6:	4413      	add	r3, r2
 80021f8:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	0c1a      	lsrs	r2, r3, #16
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3302      	adds	r3, #2
 8002204:	b2d2      	uxtb	r2, r2
 8002206:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681a      	ldr	r2, [r3, #0]
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	011b      	lsls	r3, r3, #4
 8002210:	4413      	add	r3, r2
 8002212:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	0e1a      	lsrs	r2, r3, #24
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	3303      	adds	r3, #3
 800221e:	b2d2      	uxtb	r2, r2
 8002220:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	4413      	add	r3, r2
 800222c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	3304      	adds	r3, #4
 8002236:	b2d2      	uxtb	r2, r2
 8002238:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681a      	ldr	r2, [r3, #0]
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	4413      	add	r3, r2
 8002244:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	0a1a      	lsrs	r2, r3, #8
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	3305      	adds	r3, #5
 8002250:	b2d2      	uxtb	r2, r2
 8002252:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681a      	ldr	r2, [r3, #0]
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	4413      	add	r3, r2
 800225e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	0c1a      	lsrs	r2, r3, #16
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	3306      	adds	r3, #6
 800226a:	b2d2      	uxtb	r2, r2
 800226c:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681a      	ldr	r2, [r3, #0]
 8002272:	68bb      	ldr	r3, [r7, #8]
 8002274:	011b      	lsls	r3, r3, #4
 8002276:	4413      	add	r3, r2
 8002278:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	0e1a      	lsrs	r2, r3, #24
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	3307      	adds	r3, #7
 8002284:	b2d2      	uxtb	r2, r2
 8002286:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d108      	bne.n	80022a0 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	68da      	ldr	r2, [r3, #12]
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f042 0220 	orr.w	r2, r2, #32
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	e007      	b.n	80022b0 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	691a      	ldr	r2, [r3, #16]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0220 	orr.w	r2, r2, #32
 80022ae:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80022b0:	2300      	movs	r3, #0
 80022b2:	e006      	b.n	80022c2 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022b8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80022c0:	2301      	movs	r3, #1
  }
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	371c      	adds	r7, #28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022cc:	4770      	bx	lr

080022ce <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80022ce:	b480      	push	{r7}
 80022d0:	b085      	sub	sp, #20
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	6078      	str	r0, [r7, #4]
 80022d6:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	f893 3020 	ldrb.w	r3, [r3, #32]
 80022de:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d002      	beq.n	80022ec <HAL_CAN_ActivateNotification+0x1e>
 80022e6:	7bfb      	ldrb	r3, [r7, #15]
 80022e8:	2b02      	cmp	r3, #2
 80022ea:	d109      	bne.n	8002300 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6959      	ldr	r1, [r3, #20]
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	430a      	orrs	r2, r1
 80022fa:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e006      	b.n	800230e <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002304:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
  }
}
 800230e:	4618      	mov	r0, r3
 8002310:	3714      	adds	r7, #20
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b08a      	sub	sp, #40	; 0x28
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8002322:	2300      	movs	r3, #0
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695b      	ldr	r3, [r3, #20]
 800232c:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	f003 0301 	and.w	r3, r3, #1
 800235c:	2b00      	cmp	r3, #0
 800235e:	d07c      	beq.n	800245a <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f003 0301 	and.w	r3, r3, #1
 8002366:	2b00      	cmp	r3, #0
 8002368:	d023      	beq.n	80023b2 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	2201      	movs	r2, #1
 8002370:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 f983 	bl	8002688 <HAL_CAN_TxMailbox0CompleteCallback>
 8002382:	e016      	b.n	80023b2 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	d004      	beq.n	8002398 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002394:	627b      	str	r3, [r7, #36]	; 0x24
 8002396:	e00c      	b.n	80023b2 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002398:	69bb      	ldr	r3, [r7, #24]
 800239a:	f003 0308 	and.w	r3, r3, #8
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d004      	beq.n	80023ac <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 80023a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
 80023aa:	e002      	b.n	80023b2 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	f000 f989 	bl	80026c4 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d024      	beq.n	8002406 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80023c4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80023c6:	69bb      	ldr	r3, [r7, #24]
 80023c8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	f000 f963 	bl	800269c <HAL_CAN_TxMailbox1CompleteCallback>
 80023d6:	e016      	b.n	8002406 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d004      	beq.n	80023ec <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80023e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80023e8:	627b      	str	r3, [r7, #36]	; 0x24
 80023ea:	e00c      	b.n	8002406 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80023f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fc:	627b      	str	r3, [r7, #36]	; 0x24
 80023fe:	e002      	b.n	8002406 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	f000 f969 	bl	80026d8 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800240c:	2b00      	cmp	r3, #0
 800240e:	d024      	beq.n	800245a <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002418:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800241a:	69bb      	ldr	r3, [r7, #24]
 800241c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 f943 	bl	80026b0 <HAL_CAN_TxMailbox2CompleteCallback>
 800242a:	e016      	b.n	800245a <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d004      	beq.n	8002440 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002438:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800243c:	627b      	str	r3, [r7, #36]	; 0x24
 800243e:	e00c      	b.n	800245a <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002440:	69bb      	ldr	r3, [r7, #24]
 8002442:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002446:	2b00      	cmp	r3, #0
 8002448:	d004      	beq.n	8002454 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800244a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800244c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002450:	627b      	str	r3, [r7, #36]	; 0x24
 8002452:	e002      	b.n	800245a <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002454:	6878      	ldr	r0, [r7, #4]
 8002456:	f000 f949 	bl	80026ec <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800245a:	6a3b      	ldr	r3, [r7, #32]
 800245c:	f003 0308 	and.w	r3, r3, #8
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00c      	beq.n	800247e <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f003 0310 	and.w	r3, r3, #16
 800246a:	2b00      	cmp	r3, #0
 800246c:	d007      	beq.n	800247e <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800246e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002470:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002474:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2210      	movs	r2, #16
 800247c:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800247e:	6a3b      	ldr	r3, [r7, #32]
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	2b00      	cmp	r3, #0
 8002486:	d00b      	beq.n	80024a0 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	f003 0308 	and.w	r3, r3, #8
 800248e:	2b00      	cmp	r3, #0
 8002490:	d006      	beq.n	80024a0 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2208      	movs	r2, #8
 8002498:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800249a:	6878      	ldr	r0, [r7, #4]
 800249c:	f000 f930 	bl	8002700 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	f003 0302 	and.w	r3, r3, #2
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d009      	beq.n	80024be <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	68db      	ldr	r3, [r3, #12]
 80024b0:	f003 0303 	and.w	r3, r3, #3
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d002      	beq.n	80024be <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 80024b8:	6878      	ldr	r0, [r7, #4]
 80024ba:	f7fe ffef 	bl	800149c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80024be:	6a3b      	ldr	r3, [r7, #32]
 80024c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d00c      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	f003 0310 	and.w	r3, r3, #16
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d007      	beq.n	80024e2 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	2210      	movs	r2, #16
 80024e0:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80024e2:	6a3b      	ldr	r3, [r7, #32]
 80024e4:	f003 0320 	and.w	r3, r3, #32
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00b      	beq.n	8002504 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	f003 0308 	and.w	r3, r3, #8
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d006      	beq.n	8002504 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	2208      	movs	r2, #8
 80024fc:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80024fe:	6878      	ldr	r0, [r7, #4]
 8002500:	f000 f912 	bl	8002728 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	f003 0310 	and.w	r3, r3, #16
 800250a:	2b00      	cmp	r3, #0
 800250c:	d009      	beq.n	8002522 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	f003 0303 	and.w	r3, r3, #3
 8002518:	2b00      	cmp	r3, #0
 800251a:	d002      	beq.n	8002522 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 f8f9 	bl	8002714 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002522:	6a3b      	ldr	r3, [r7, #32]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d00b      	beq.n	8002544 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800252c:	69fb      	ldr	r3, [r7, #28]
 800252e:	f003 0310 	and.w	r3, r3, #16
 8002532:	2b00      	cmp	r3, #0
 8002534:	d006      	beq.n	8002544 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	2210      	movs	r2, #16
 800253c:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f000 f8fc 	bl	800273c <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002544:	6a3b      	ldr	r3, [r7, #32]
 8002546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d00b      	beq.n	8002566 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d006      	beq.n	8002566 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2208      	movs	r2, #8
 800255e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f000 f8f5 	bl	8002750 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d07b      	beq.n	8002668 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	2b00      	cmp	r3, #0
 8002578:	d072      	beq.n	8002660 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800257a:	6a3b      	ldr	r3, [r7, #32]
 800257c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002580:	2b00      	cmp	r3, #0
 8002582:	d008      	beq.n	8002596 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800258e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002590:	f043 0301 	orr.w	r3, r3, #1
 8002594:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002596:	6a3b      	ldr	r3, [r7, #32]
 8002598:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d003      	beq.n	80025b2 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	f043 0302 	orr.w	r3, r3, #2
 80025b0:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025b2:	6a3b      	ldr	r3, [r7, #32]
 80025b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d008      	beq.n	80025ce <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d003      	beq.n	80025ce <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80025c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c8:	f043 0304 	orr.w	r3, r3, #4
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025ce:	6a3b      	ldr	r3, [r7, #32]
 80025d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d043      	beq.n	8002660 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d03e      	beq.n	8002660 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80025e8:	2b60      	cmp	r3, #96	; 0x60
 80025ea:	d02b      	beq.n	8002644 <HAL_CAN_IRQHandler+0x32a>
 80025ec:	2b60      	cmp	r3, #96	; 0x60
 80025ee:	d82e      	bhi.n	800264e <HAL_CAN_IRQHandler+0x334>
 80025f0:	2b50      	cmp	r3, #80	; 0x50
 80025f2:	d022      	beq.n	800263a <HAL_CAN_IRQHandler+0x320>
 80025f4:	2b50      	cmp	r3, #80	; 0x50
 80025f6:	d82a      	bhi.n	800264e <HAL_CAN_IRQHandler+0x334>
 80025f8:	2b40      	cmp	r3, #64	; 0x40
 80025fa:	d019      	beq.n	8002630 <HAL_CAN_IRQHandler+0x316>
 80025fc:	2b40      	cmp	r3, #64	; 0x40
 80025fe:	d826      	bhi.n	800264e <HAL_CAN_IRQHandler+0x334>
 8002600:	2b30      	cmp	r3, #48	; 0x30
 8002602:	d010      	beq.n	8002626 <HAL_CAN_IRQHandler+0x30c>
 8002604:	2b30      	cmp	r3, #48	; 0x30
 8002606:	d822      	bhi.n	800264e <HAL_CAN_IRQHandler+0x334>
 8002608:	2b10      	cmp	r3, #16
 800260a:	d002      	beq.n	8002612 <HAL_CAN_IRQHandler+0x2f8>
 800260c:	2b20      	cmp	r3, #32
 800260e:	d005      	beq.n	800261c <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002610:	e01d      	b.n	800264e <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002614:	f043 0308 	orr.w	r3, r3, #8
 8002618:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800261a:	e019      	b.n	8002650 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800261c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800261e:	f043 0310 	orr.w	r3, r3, #16
 8002622:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002624:	e014      	b.n	8002650 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	f043 0320 	orr.w	r3, r3, #32
 800262c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800262e:	e00f      	b.n	8002650 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002632:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002636:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002638:	e00a      	b.n	8002650 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800263a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002640:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8002642:	e005      	b.n	8002650 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002646:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800264a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800264c:	e000      	b.n	8002650 <HAL_CAN_IRQHandler+0x336>
            break;
 800264e:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800265e:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2204      	movs	r2, #4
 8002666:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266a:	2b00      	cmp	r3, #0
 800266c:	d008      	beq.n	8002680 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800267a:	6878      	ldr	r0, [r7, #4]
 800267c:	f000 f872 	bl	8002764 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002680:	bf00      	nop
 8002682:	3728      	adds	r7, #40	; 0x28
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002728:	b480      	push	{r7}
 800272a:	b083      	sub	sp, #12
 800272c:	af00      	add	r7, sp, #0
 800272e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002730:	bf00      	nop
 8002732:	370c      	adds	r7, #12
 8002734:	46bd      	mov	sp, r7
 8002736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273a:	4770      	bx	lr

0800273c <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002744:	bf00      	nop
 8002746:	370c      	adds	r7, #12
 8002748:	46bd      	mov	sp, r7
 800274a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274e:	4770      	bx	lr

08002750 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002758:	bf00      	nop
 800275a:	370c      	adds	r7, #12
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8002764:	b480      	push	{r7}
 8002766:	b083      	sub	sp, #12
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800276c:	bf00      	nop
 800276e:	370c      	adds	r7, #12
 8002770:	46bd      	mov	sp, r7
 8002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002776:	4770      	bx	lr

08002778 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002794:	4013      	ands	r3, r2
 8002796:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800279c:	68bb      	ldr	r3, [r7, #8]
 800279e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027aa:	4a04      	ldr	r2, [pc, #16]	; (80027bc <__NVIC_SetPriorityGrouping+0x44>)
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	60d3      	str	r3, [r2, #12]
}
 80027b0:	bf00      	nop
 80027b2:	3714      	adds	r7, #20
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr
 80027bc:	e000ed00 	.word	0xe000ed00

080027c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c0:	b480      	push	{r7}
 80027c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c4:	4b04      	ldr	r3, [pc, #16]	; (80027d8 <__NVIC_GetPriorityGrouping+0x18>)
 80027c6:	68db      	ldr	r3, [r3, #12]
 80027c8:	0a1b      	lsrs	r3, r3, #8
 80027ca:	f003 0307 	and.w	r3, r3, #7
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	46bd      	mov	sp, r7
 80027d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d6:	4770      	bx	lr
 80027d8:	e000ed00 	.word	0xe000ed00

080027dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	db0b      	blt.n	8002806 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	f003 021f 	and.w	r2, r3, #31
 80027f4:	4907      	ldr	r1, [pc, #28]	; (8002814 <__NVIC_EnableIRQ+0x38>)
 80027f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fa:	095b      	lsrs	r3, r3, #5
 80027fc:	2001      	movs	r0, #1
 80027fe:	fa00 f202 	lsl.w	r2, r0, r2
 8002802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	e000e100 	.word	0xe000e100

08002818 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	4603      	mov	r3, r0
 8002820:	6039      	str	r1, [r7, #0]
 8002822:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002824:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002828:	2b00      	cmp	r3, #0
 800282a:	db0a      	blt.n	8002842 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	b2da      	uxtb	r2, r3
 8002830:	490c      	ldr	r1, [pc, #48]	; (8002864 <__NVIC_SetPriority+0x4c>)
 8002832:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002836:	0112      	lsls	r2, r2, #4
 8002838:	b2d2      	uxtb	r2, r2
 800283a:	440b      	add	r3, r1
 800283c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002840:	e00a      	b.n	8002858 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	b2da      	uxtb	r2, r3
 8002846:	4908      	ldr	r1, [pc, #32]	; (8002868 <__NVIC_SetPriority+0x50>)
 8002848:	79fb      	ldrb	r3, [r7, #7]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	3b04      	subs	r3, #4
 8002850:	0112      	lsls	r2, r2, #4
 8002852:	b2d2      	uxtb	r2, r2
 8002854:	440b      	add	r3, r1
 8002856:	761a      	strb	r2, [r3, #24]
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002862:	4770      	bx	lr
 8002864:	e000e100 	.word	0xe000e100
 8002868:	e000ed00 	.word	0xe000ed00

0800286c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	60f8      	str	r0, [r7, #12]
 8002874:	60b9      	str	r1, [r7, #8]
 8002876:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	f1c3 0307 	rsb	r3, r3, #7
 8002886:	2b04      	cmp	r3, #4
 8002888:	bf28      	it	cs
 800288a:	2304      	movcs	r3, #4
 800288c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	3304      	adds	r3, #4
 8002892:	2b06      	cmp	r3, #6
 8002894:	d902      	bls.n	800289c <NVIC_EncodePriority+0x30>
 8002896:	69fb      	ldr	r3, [r7, #28]
 8002898:	3b03      	subs	r3, #3
 800289a:	e000      	b.n	800289e <NVIC_EncodePriority+0x32>
 800289c:	2300      	movs	r3, #0
 800289e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a0:	f04f 32ff 	mov.w	r2, #4294967295
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	fa02 f303 	lsl.w	r3, r2, r3
 80028aa:	43da      	mvns	r2, r3
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	401a      	ands	r2, r3
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b4:	f04f 31ff 	mov.w	r1, #4294967295
 80028b8:	697b      	ldr	r3, [r7, #20]
 80028ba:	fa01 f303 	lsl.w	r3, r1, r3
 80028be:	43d9      	mvns	r1, r3
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c4:	4313      	orrs	r3, r2
         );
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3724      	adds	r7, #36	; 0x24
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
	...

080028d4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b082      	sub	sp, #8
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3b01      	subs	r3, #1
 80028e0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e4:	d301      	bcc.n	80028ea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028e6:	2301      	movs	r3, #1
 80028e8:	e00f      	b.n	800290a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ea:	4a0a      	ldr	r2, [pc, #40]	; (8002914 <SysTick_Config+0x40>)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3b01      	subs	r3, #1
 80028f0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f2:	210f      	movs	r1, #15
 80028f4:	f04f 30ff 	mov.w	r0, #4294967295
 80028f8:	f7ff ff8e 	bl	8002818 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <SysTick_Config+0x40>)
 80028fe:	2200      	movs	r2, #0
 8002900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002902:	4b04      	ldr	r3, [pc, #16]	; (8002914 <SysTick_Config+0x40>)
 8002904:	2207      	movs	r2, #7
 8002906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002908:	2300      	movs	r3, #0
}
 800290a:	4618      	mov	r0, r3
 800290c:	3708      	adds	r7, #8
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}
 8002912:	bf00      	nop
 8002914:	e000e010 	.word	0xe000e010

08002918 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f7ff ff29 	bl	8002778 <__NVIC_SetPriorityGrouping>
}
 8002926:	bf00      	nop
 8002928:	3708      	adds	r7, #8
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}

0800292e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800292e:	b580      	push	{r7, lr}
 8002930:	b086      	sub	sp, #24
 8002932:	af00      	add	r7, sp, #0
 8002934:	4603      	mov	r3, r0
 8002936:	60b9      	str	r1, [r7, #8]
 8002938:	607a      	str	r2, [r7, #4]
 800293a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800293c:	2300      	movs	r3, #0
 800293e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002940:	f7ff ff3e 	bl	80027c0 <__NVIC_GetPriorityGrouping>
 8002944:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68b9      	ldr	r1, [r7, #8]
 800294a:	6978      	ldr	r0, [r7, #20]
 800294c:	f7ff ff8e 	bl	800286c <NVIC_EncodePriority>
 8002950:	4602      	mov	r2, r0
 8002952:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002956:	4611      	mov	r1, r2
 8002958:	4618      	mov	r0, r3
 800295a:	f7ff ff5d 	bl	8002818 <__NVIC_SetPriority>
}
 800295e:	bf00      	nop
 8002960:	3718      	adds	r7, #24
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b082      	sub	sp, #8
 800296a:	af00      	add	r7, sp, #0
 800296c:	4603      	mov	r3, r0
 800296e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002970:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002974:	4618      	mov	r0, r3
 8002976:	f7ff ff31 	bl	80027dc <__NVIC_EnableIRQ>
}
 800297a:	bf00      	nop
 800297c:	3708      	adds	r7, #8
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}

08002982 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002982:	b580      	push	{r7, lr}
 8002984:	b082      	sub	sp, #8
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7ff ffa2 	bl	80028d4 <SysTick_Config>
 8002990:	4603      	mov	r3, r0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}
	...

0800299c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	; 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029a6:	2300      	movs	r3, #0
 80029a8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b2:	2300      	movs	r3, #0
 80029b4:	61fb      	str	r3, [r7, #28]
 80029b6:	e165      	b.n	8002c84 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029b8:	2201      	movs	r2, #1
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	697a      	ldr	r2, [r7, #20]
 80029c8:	4013      	ands	r3, r2
 80029ca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029cc:	693a      	ldr	r2, [r7, #16]
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	f040 8154 	bne.w	8002c7e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f003 0303 	and.w	r3, r3, #3
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d005      	beq.n	80029ee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d130      	bne.n	8002a50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f4:	69fb      	ldr	r3, [r7, #28]
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	2203      	movs	r2, #3
 80029fa:	fa02 f303 	lsl.w	r3, r2, r3
 80029fe:	43db      	mvns	r3, r3
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	4013      	ands	r3, r2
 8002a04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68da      	ldr	r2, [r3, #12]
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	005b      	lsls	r3, r3, #1
 8002a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a12:	69ba      	ldr	r2, [r7, #24]
 8002a14:	4313      	orrs	r3, r2
 8002a16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	69ba      	ldr	r2, [r7, #24]
 8002a1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a24:	2201      	movs	r2, #1
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2c:	43db      	mvns	r3, r3
 8002a2e:	69ba      	ldr	r2, [r7, #24]
 8002a30:	4013      	ands	r3, r2
 8002a32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	091b      	lsrs	r3, r3, #4
 8002a3a:	f003 0201 	and.w	r2, r3, #1
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	fa02 f303 	lsl.w	r3, r2, r3
 8002a44:	69ba      	ldr	r2, [r7, #24]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 0303 	and.w	r3, r3, #3
 8002a58:	2b03      	cmp	r3, #3
 8002a5a:	d017      	beq.n	8002a8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a62:	69fb      	ldr	r3, [r7, #28]
 8002a64:	005b      	lsls	r3, r3, #1
 8002a66:	2203      	movs	r2, #3
 8002a68:	fa02 f303 	lsl.w	r3, r2, r3
 8002a6c:	43db      	mvns	r3, r3
 8002a6e:	69ba      	ldr	r2, [r7, #24]
 8002a70:	4013      	ands	r3, r2
 8002a72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69ba      	ldr	r2, [r7, #24]
 8002a8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f003 0303 	and.w	r3, r3, #3
 8002a94:	2b02      	cmp	r3, #2
 8002a96:	d123      	bne.n	8002ae0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a98:	69fb      	ldr	r3, [r7, #28]
 8002a9a:	08da      	lsrs	r2, r3, #3
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	3208      	adds	r2, #8
 8002aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	f003 0307 	and.w	r3, r3, #7
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	220f      	movs	r2, #15
 8002ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab4:	43db      	mvns	r3, r3
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4013      	ands	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002abc:	683b      	ldr	r3, [r7, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	009b      	lsls	r3, r3, #2
 8002ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	08da      	lsrs	r2, r3, #3
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	3208      	adds	r2, #8
 8002ada:	69b9      	ldr	r1, [r7, #24]
 8002adc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ae6:	69fb      	ldr	r3, [r7, #28]
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	2203      	movs	r2, #3
 8002aec:	fa02 f303 	lsl.w	r3, r2, r3
 8002af0:	43db      	mvns	r3, r3
 8002af2:	69ba      	ldr	r2, [r7, #24]
 8002af4:	4013      	ands	r3, r2
 8002af6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 0203 	and.w	r2, r3, #3
 8002b00:	69fb      	ldr	r3, [r7, #28]
 8002b02:	005b      	lsls	r3, r3, #1
 8002b04:	fa02 f303 	lsl.w	r3, r2, r3
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	f000 80ae 	beq.w	8002c7e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b22:	2300      	movs	r3, #0
 8002b24:	60fb      	str	r3, [r7, #12]
 8002b26:	4b5d      	ldr	r3, [pc, #372]	; (8002c9c <HAL_GPIO_Init+0x300>)
 8002b28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2a:	4a5c      	ldr	r2, [pc, #368]	; (8002c9c <HAL_GPIO_Init+0x300>)
 8002b2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b30:	6453      	str	r3, [r2, #68]	; 0x44
 8002b32:	4b5a      	ldr	r3, [pc, #360]	; (8002c9c <HAL_GPIO_Init+0x300>)
 8002b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3a:	60fb      	str	r3, [r7, #12]
 8002b3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b3e:	4a58      	ldr	r2, [pc, #352]	; (8002ca0 <HAL_GPIO_Init+0x304>)
 8002b40:	69fb      	ldr	r3, [r7, #28]
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	3302      	adds	r3, #2
 8002b46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b4c:	69fb      	ldr	r3, [r7, #28]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	009b      	lsls	r3, r3, #2
 8002b54:	220f      	movs	r2, #15
 8002b56:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4a4f      	ldr	r2, [pc, #316]	; (8002ca4 <HAL_GPIO_Init+0x308>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d025      	beq.n	8002bb6 <HAL_GPIO_Init+0x21a>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	4a4e      	ldr	r2, [pc, #312]	; (8002ca8 <HAL_GPIO_Init+0x30c>)
 8002b6e:	4293      	cmp	r3, r2
 8002b70:	d01f      	beq.n	8002bb2 <HAL_GPIO_Init+0x216>
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4a4d      	ldr	r2, [pc, #308]	; (8002cac <HAL_GPIO_Init+0x310>)
 8002b76:	4293      	cmp	r3, r2
 8002b78:	d019      	beq.n	8002bae <HAL_GPIO_Init+0x212>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4a4c      	ldr	r2, [pc, #304]	; (8002cb0 <HAL_GPIO_Init+0x314>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d013      	beq.n	8002baa <HAL_GPIO_Init+0x20e>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	4a4b      	ldr	r2, [pc, #300]	; (8002cb4 <HAL_GPIO_Init+0x318>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d00d      	beq.n	8002ba6 <HAL_GPIO_Init+0x20a>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	4a4a      	ldr	r2, [pc, #296]	; (8002cb8 <HAL_GPIO_Init+0x31c>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d007      	beq.n	8002ba2 <HAL_GPIO_Init+0x206>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a49      	ldr	r2, [pc, #292]	; (8002cbc <HAL_GPIO_Init+0x320>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d101      	bne.n	8002b9e <HAL_GPIO_Init+0x202>
 8002b9a:	2306      	movs	r3, #6
 8002b9c:	e00c      	b.n	8002bb8 <HAL_GPIO_Init+0x21c>
 8002b9e:	2307      	movs	r3, #7
 8002ba0:	e00a      	b.n	8002bb8 <HAL_GPIO_Init+0x21c>
 8002ba2:	2305      	movs	r3, #5
 8002ba4:	e008      	b.n	8002bb8 <HAL_GPIO_Init+0x21c>
 8002ba6:	2304      	movs	r3, #4
 8002ba8:	e006      	b.n	8002bb8 <HAL_GPIO_Init+0x21c>
 8002baa:	2303      	movs	r3, #3
 8002bac:	e004      	b.n	8002bb8 <HAL_GPIO_Init+0x21c>
 8002bae:	2302      	movs	r3, #2
 8002bb0:	e002      	b.n	8002bb8 <HAL_GPIO_Init+0x21c>
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e000      	b.n	8002bb8 <HAL_GPIO_Init+0x21c>
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	69fa      	ldr	r2, [r7, #28]
 8002bba:	f002 0203 	and.w	r2, r2, #3
 8002bbe:	0092      	lsls	r2, r2, #2
 8002bc0:	4093      	lsls	r3, r2
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bc8:	4935      	ldr	r1, [pc, #212]	; (8002ca0 <HAL_GPIO_Init+0x304>)
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	089b      	lsrs	r3, r3, #2
 8002bce:	3302      	adds	r3, #2
 8002bd0:	69ba      	ldr	r2, [r7, #24]
 8002bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002bd6:	4b3a      	ldr	r3, [pc, #232]	; (8002cc0 <HAL_GPIO_Init+0x324>)
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	43db      	mvns	r3, r3
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	4013      	ands	r3, r2
 8002be4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d003      	beq.n	8002bfa <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002bfa:	4a31      	ldr	r2, [pc, #196]	; (8002cc0 <HAL_GPIO_Init+0x324>)
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c00:	4b2f      	ldr	r3, [pc, #188]	; (8002cc0 <HAL_GPIO_Init+0x324>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	43db      	mvns	r3, r3
 8002c0a:	69ba      	ldr	r2, [r7, #24]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002c1c:	69ba      	ldr	r2, [r7, #24]
 8002c1e:	693b      	ldr	r3, [r7, #16]
 8002c20:	4313      	orrs	r3, r2
 8002c22:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c24:	4a26      	ldr	r2, [pc, #152]	; (8002cc0 <HAL_GPIO_Init+0x324>)
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c2a:	4b25      	ldr	r3, [pc, #148]	; (8002cc0 <HAL_GPIO_Init+0x324>)
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	43db      	mvns	r3, r3
 8002c34:	69ba      	ldr	r2, [r7, #24]
 8002c36:	4013      	ands	r3, r2
 8002c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d003      	beq.n	8002c4e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002c46:	69ba      	ldr	r2, [r7, #24]
 8002c48:	693b      	ldr	r3, [r7, #16]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c4e:	4a1c      	ldr	r2, [pc, #112]	; (8002cc0 <HAL_GPIO_Init+0x324>)
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c54:	4b1a      	ldr	r3, [pc, #104]	; (8002cc0 <HAL_GPIO_Init+0x324>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c5a:	693b      	ldr	r3, [r7, #16]
 8002c5c:	43db      	mvns	r3, r3
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	4013      	ands	r3, r2
 8002c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d003      	beq.n	8002c78 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c78:	4a11      	ldr	r2, [pc, #68]	; (8002cc0 <HAL_GPIO_Init+0x324>)
 8002c7a:	69bb      	ldr	r3, [r7, #24]
 8002c7c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	2b0f      	cmp	r3, #15
 8002c88:	f67f ae96 	bls.w	80029b8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3724      	adds	r7, #36	; 0x24
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40023800 	.word	0x40023800
 8002ca0:	40013800 	.word	0x40013800
 8002ca4:	40020000 	.word	0x40020000
 8002ca8:	40020400 	.word	0x40020400
 8002cac:	40020800 	.word	0x40020800
 8002cb0:	40020c00 	.word	0x40020c00
 8002cb4:	40021000 	.word	0x40021000
 8002cb8:	40021400 	.word	0x40021400
 8002cbc:	40021800 	.word	0x40021800
 8002cc0:	40013c00 	.word	0x40013c00

08002cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b083      	sub	sp, #12
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	6078      	str	r0, [r7, #4]
 8002ccc:	460b      	mov	r3, r1
 8002cce:	807b      	strh	r3, [r7, #2]
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002cd4:	787b      	ldrb	r3, [r7, #1]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d003      	beq.n	8002ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cda:	887a      	ldrh	r2, [r7, #2]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002ce0:	e003      	b.n	8002cea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002ce2:	887b      	ldrh	r3, [r7, #2]
 8002ce4:	041a      	lsls	r2, r3, #16
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	619a      	str	r2, [r3, #24]
}
 8002cea:	bf00      	nop
 8002cec:	370c      	adds	r7, #12
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf4:	4770      	bx	lr

08002cf6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002cf6:	b480      	push	{r7}
 8002cf8:	b085      	sub	sp, #20
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	460b      	mov	r3, r1
 8002d00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	695b      	ldr	r3, [r3, #20]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002d08:	887a      	ldrh	r2, [r7, #2]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	041a      	lsls	r2, r3, #16
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	43d9      	mvns	r1, r3
 8002d14:	887b      	ldrh	r3, [r7, #2]
 8002d16:	400b      	ands	r3, r1
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	619a      	str	r2, [r3, #24]
}
 8002d1e:	bf00      	nop
 8002d20:	3714      	adds	r7, #20
 8002d22:	46bd      	mov	sp, r7
 8002d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d28:	4770      	bx	lr
	...

08002d2c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002d32:	2300      	movs	r3, #0
 8002d34:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	603b      	str	r3, [r7, #0]
 8002d3a:	4b20      	ldr	r3, [pc, #128]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x90>)
 8002d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d3e:	4a1f      	ldr	r2, [pc, #124]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x90>)
 8002d40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d44:	6413      	str	r3, [r2, #64]	; 0x40
 8002d46:	4b1d      	ldr	r3, [pc, #116]	; (8002dbc <HAL_PWREx_EnableOverDrive+0x90>)
 8002d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	603b      	str	r3, [r7, #0]
 8002d50:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002d52:	4b1b      	ldr	r3, [pc, #108]	; (8002dc0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d58:	f7fe fe7c 	bl	8001a54 <HAL_GetTick>
 8002d5c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d5e:	e009      	b.n	8002d74 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d60:	f7fe fe78 	bl	8001a54 <HAL_GetTick>
 8002d64:	4602      	mov	r2, r0
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d6e:	d901      	bls.n	8002d74 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002d70:	2303      	movs	r3, #3
 8002d72:	e01f      	b.n	8002db4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d74:	4b13      	ldr	r3, [pc, #76]	; (8002dc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d80:	d1ee      	bne.n	8002d60 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d82:	4b11      	ldr	r3, [pc, #68]	; (8002dc8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d84:	2201      	movs	r2, #1
 8002d86:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d88:	f7fe fe64 	bl	8001a54 <HAL_GetTick>
 8002d8c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d8e:	e009      	b.n	8002da4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d90:	f7fe fe60 	bl	8001a54 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d9e:	d901      	bls.n	8002da4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002da0:	2303      	movs	r3, #3
 8002da2:	e007      	b.n	8002db4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002da4:	4b07      	ldr	r3, [pc, #28]	; (8002dc4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002db0:	d1ee      	bne.n	8002d90 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40023800 	.word	0x40023800
 8002dc0:	420e0040 	.word	0x420e0040
 8002dc4:	40007000 	.word	0x40007000
 8002dc8:	420e0044 	.word	0x420e0044

08002dcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b084      	sub	sp, #16
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
 8002dd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d101      	bne.n	8002de0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e0cc      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002de0:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 030f 	and.w	r3, r3, #15
 8002de8:	683a      	ldr	r2, [r7, #0]
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d90c      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dee:	4b65      	ldr	r3, [pc, #404]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	b2d2      	uxtb	r2, r2
 8002df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b63      	ldr	r3, [pc, #396]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e0b8      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d020      	beq.n	8002e56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0304 	and.w	r3, r3, #4
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d005      	beq.n	8002e2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e20:	4b59      	ldr	r3, [pc, #356]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a58      	ldr	r2, [pc, #352]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e26:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e2a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f003 0308 	and.w	r3, r3, #8
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d005      	beq.n	8002e44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e38:	4b53      	ldr	r3, [pc, #332]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3a:	689b      	ldr	r3, [r3, #8]
 8002e3c:	4a52      	ldr	r2, [pc, #328]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e44:	4b50      	ldr	r3, [pc, #320]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	494d      	ldr	r1, [pc, #308]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f003 0301 	and.w	r3, r3, #1
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d044      	beq.n	8002eec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b01      	cmp	r3, #1
 8002e68:	d107      	bne.n	8002e7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e6a:	4b47      	ldr	r3, [pc, #284]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d119      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e07f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	2b02      	cmp	r3, #2
 8002e80:	d003      	beq.n	8002e8a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002e86:	2b03      	cmp	r3, #3
 8002e88:	d107      	bne.n	8002e9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e8a:	4b3f      	ldr	r3, [pc, #252]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d109      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e06f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9a:	4b3b      	ldr	r3, [pc, #236]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d101      	bne.n	8002eaa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e067      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eaa:	4b37      	ldr	r3, [pc, #220]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f023 0203 	bic.w	r2, r3, #3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4934      	ldr	r1, [pc, #208]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ebc:	f7fe fdca 	bl	8001a54 <HAL_GetTick>
 8002ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ec2:	e00a      	b.n	8002eda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ec4:	f7fe fdc6 	bl	8001a54 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d901      	bls.n	8002eda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ed6:	2303      	movs	r3, #3
 8002ed8:	e04f      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eda:	4b2b      	ldr	r3, [pc, #172]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002edc:	689b      	ldr	r3, [r3, #8]
 8002ede:	f003 020c 	and.w	r2, r3, #12
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	009b      	lsls	r3, r3, #2
 8002ee8:	429a      	cmp	r2, r3
 8002eea:	d1eb      	bne.n	8002ec4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002eec:	4b25      	ldr	r3, [pc, #148]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 030f 	and.w	r3, r3, #15
 8002ef4:	683a      	ldr	r2, [r7, #0]
 8002ef6:	429a      	cmp	r2, r3
 8002ef8:	d20c      	bcs.n	8002f14 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002efa:	4b22      	ldr	r3, [pc, #136]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002efc:	683a      	ldr	r2, [r7, #0]
 8002efe:	b2d2      	uxtb	r2, r2
 8002f00:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f02:	4b20      	ldr	r3, [pc, #128]	; (8002f84 <HAL_RCC_ClockConfig+0x1b8>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 030f 	and.w	r3, r3, #15
 8002f0a:	683a      	ldr	r2, [r7, #0]
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d001      	beq.n	8002f14 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f10:	2301      	movs	r3, #1
 8002f12:	e032      	b.n	8002f7a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0304 	and.w	r3, r3, #4
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d008      	beq.n	8002f32 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f20:	4b19      	ldr	r3, [pc, #100]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	68db      	ldr	r3, [r3, #12]
 8002f2c:	4916      	ldr	r1, [pc, #88]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f003 0308 	and.w	r3, r3, #8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d009      	beq.n	8002f52 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f3e:	4b12      	ldr	r3, [pc, #72]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	490e      	ldr	r1, [pc, #56]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002f52:	f000 f855 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 8002f56:	4602      	mov	r2, r0
 8002f58:	4b0b      	ldr	r3, [pc, #44]	; (8002f88 <HAL_RCC_ClockConfig+0x1bc>)
 8002f5a:	689b      	ldr	r3, [r3, #8]
 8002f5c:	091b      	lsrs	r3, r3, #4
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	490a      	ldr	r1, [pc, #40]	; (8002f8c <HAL_RCC_ClockConfig+0x1c0>)
 8002f64:	5ccb      	ldrb	r3, [r1, r3]
 8002f66:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6a:	4a09      	ldr	r2, [pc, #36]	; (8002f90 <HAL_RCC_ClockConfig+0x1c4>)
 8002f6c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002f6e:	4b09      	ldr	r3, [pc, #36]	; (8002f94 <HAL_RCC_ClockConfig+0x1c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7fe fd2a 	bl	80019cc <HAL_InitTick>

  return HAL_OK;
 8002f78:	2300      	movs	r3, #0
}
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	3710      	adds	r7, #16
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	bd80      	pop	{r7, pc}
 8002f82:	bf00      	nop
 8002f84:	40023c00 	.word	0x40023c00
 8002f88:	40023800 	.word	0x40023800
 8002f8c:	08004a48 	.word	0x08004a48
 8002f90:	20000000 	.word	0x20000000
 8002f94:	20000004 	.word	0x20000004

08002f98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002f9c:	4b03      	ldr	r3, [pc, #12]	; (8002fac <HAL_RCC_GetHCLKFreq+0x14>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
 8002faa:	bf00      	nop
 8002fac:	20000000 	.word	0x20000000

08002fb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002fb4:	f7ff fff0 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	4b05      	ldr	r3, [pc, #20]	; (8002fd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	0a9b      	lsrs	r3, r3, #10
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	4903      	ldr	r1, [pc, #12]	; (8002fd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fc6:	5ccb      	ldrb	r3, [r1, r3]
 8002fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40023800 	.word	0x40023800
 8002fd4:	08004a58 	.word	0x08004a58

08002fd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002fdc:	f7ff ffdc 	bl	8002f98 <HAL_RCC_GetHCLKFreq>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002fe4:	689b      	ldr	r3, [r3, #8]
 8002fe6:	0b5b      	lsrs	r3, r3, #13
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	4903      	ldr	r1, [pc, #12]	; (8002ffc <HAL_RCC_GetPCLK2Freq+0x24>)
 8002fee:	5ccb      	ldrb	r3, [r1, r3]
 8002ff0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	bd80      	pop	{r7, pc}
 8002ff8:	40023800 	.word	0x40023800
 8002ffc:	08004a58 	.word	0x08004a58

08003000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003004:	b0ae      	sub	sp, #184	; 0xb8
 8003006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800300e:	2300      	movs	r3, #0
 8003010:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800301a:	2300      	movs	r3, #0
 800301c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003020:	2300      	movs	r3, #0
 8003022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003026:	4bcb      	ldr	r3, [pc, #812]	; (8003354 <HAL_RCC_GetSysClockFreq+0x354>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b0c      	cmp	r3, #12
 8003030:	f200 8206 	bhi.w	8003440 <HAL_RCC_GetSysClockFreq+0x440>
 8003034:	a201      	add	r2, pc, #4	; (adr r2, 800303c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003036:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800303a:	bf00      	nop
 800303c:	08003071 	.word	0x08003071
 8003040:	08003441 	.word	0x08003441
 8003044:	08003441 	.word	0x08003441
 8003048:	08003441 	.word	0x08003441
 800304c:	08003079 	.word	0x08003079
 8003050:	08003441 	.word	0x08003441
 8003054:	08003441 	.word	0x08003441
 8003058:	08003441 	.word	0x08003441
 800305c:	08003081 	.word	0x08003081
 8003060:	08003441 	.word	0x08003441
 8003064:	08003441 	.word	0x08003441
 8003068:	08003441 	.word	0x08003441
 800306c:	08003271 	.word	0x08003271
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003070:	4bb9      	ldr	r3, [pc, #740]	; (8003358 <HAL_RCC_GetSysClockFreq+0x358>)
 8003072:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003076:	e1e7      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003078:	4bb8      	ldr	r3, [pc, #736]	; (800335c <HAL_RCC_GetSysClockFreq+0x35c>)
 800307a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800307e:	e1e3      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003080:	4bb4      	ldr	r3, [pc, #720]	; (8003354 <HAL_RCC_GetSysClockFreq+0x354>)
 8003082:	685b      	ldr	r3, [r3, #4]
 8003084:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003088:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800308c:	4bb1      	ldr	r3, [pc, #708]	; (8003354 <HAL_RCC_GetSysClockFreq+0x354>)
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d071      	beq.n	800317c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003098:	4bae      	ldr	r3, [pc, #696]	; (8003354 <HAL_RCC_GetSysClockFreq+0x354>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	099b      	lsrs	r3, r3, #6
 800309e:	2200      	movs	r2, #0
 80030a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80030a4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80030a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80030ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80030b0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80030b4:	2300      	movs	r3, #0
 80030b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80030ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80030be:	4622      	mov	r2, r4
 80030c0:	462b      	mov	r3, r5
 80030c2:	f04f 0000 	mov.w	r0, #0
 80030c6:	f04f 0100 	mov.w	r1, #0
 80030ca:	0159      	lsls	r1, r3, #5
 80030cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030d0:	0150      	lsls	r0, r2, #5
 80030d2:	4602      	mov	r2, r0
 80030d4:	460b      	mov	r3, r1
 80030d6:	4621      	mov	r1, r4
 80030d8:	1a51      	subs	r1, r2, r1
 80030da:	6439      	str	r1, [r7, #64]	; 0x40
 80030dc:	4629      	mov	r1, r5
 80030de:	eb63 0301 	sbc.w	r3, r3, r1
 80030e2:	647b      	str	r3, [r7, #68]	; 0x44
 80030e4:	f04f 0200 	mov.w	r2, #0
 80030e8:	f04f 0300 	mov.w	r3, #0
 80030ec:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80030f0:	4649      	mov	r1, r9
 80030f2:	018b      	lsls	r3, r1, #6
 80030f4:	4641      	mov	r1, r8
 80030f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030fa:	4641      	mov	r1, r8
 80030fc:	018a      	lsls	r2, r1, #6
 80030fe:	4641      	mov	r1, r8
 8003100:	1a51      	subs	r1, r2, r1
 8003102:	63b9      	str	r1, [r7, #56]	; 0x38
 8003104:	4649      	mov	r1, r9
 8003106:	eb63 0301 	sbc.w	r3, r3, r1
 800310a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800310c:	f04f 0200 	mov.w	r2, #0
 8003110:	f04f 0300 	mov.w	r3, #0
 8003114:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003118:	4649      	mov	r1, r9
 800311a:	00cb      	lsls	r3, r1, #3
 800311c:	4641      	mov	r1, r8
 800311e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003122:	4641      	mov	r1, r8
 8003124:	00ca      	lsls	r2, r1, #3
 8003126:	4610      	mov	r0, r2
 8003128:	4619      	mov	r1, r3
 800312a:	4603      	mov	r3, r0
 800312c:	4622      	mov	r2, r4
 800312e:	189b      	adds	r3, r3, r2
 8003130:	633b      	str	r3, [r7, #48]	; 0x30
 8003132:	462b      	mov	r3, r5
 8003134:	460a      	mov	r2, r1
 8003136:	eb42 0303 	adc.w	r3, r2, r3
 800313a:	637b      	str	r3, [r7, #52]	; 0x34
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003148:	4629      	mov	r1, r5
 800314a:	024b      	lsls	r3, r1, #9
 800314c:	4621      	mov	r1, r4
 800314e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003152:	4621      	mov	r1, r4
 8003154:	024a      	lsls	r2, r1, #9
 8003156:	4610      	mov	r0, r2
 8003158:	4619      	mov	r1, r3
 800315a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800315e:	2200      	movs	r2, #0
 8003160:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003164:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003168:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800316c:	f7fd fc92 	bl	8000a94 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4613      	mov	r3, r2
 8003176:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800317a:	e067      	b.n	800324c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800317c:	4b75      	ldr	r3, [pc, #468]	; (8003354 <HAL_RCC_GetSysClockFreq+0x354>)
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	099b      	lsrs	r3, r3, #6
 8003182:	2200      	movs	r2, #0
 8003184:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003188:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800318c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003190:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003194:	67bb      	str	r3, [r7, #120]	; 0x78
 8003196:	2300      	movs	r3, #0
 8003198:	67fb      	str	r3, [r7, #124]	; 0x7c
 800319a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800319e:	4622      	mov	r2, r4
 80031a0:	462b      	mov	r3, r5
 80031a2:	f04f 0000 	mov.w	r0, #0
 80031a6:	f04f 0100 	mov.w	r1, #0
 80031aa:	0159      	lsls	r1, r3, #5
 80031ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80031b0:	0150      	lsls	r0, r2, #5
 80031b2:	4602      	mov	r2, r0
 80031b4:	460b      	mov	r3, r1
 80031b6:	4621      	mov	r1, r4
 80031b8:	1a51      	subs	r1, r2, r1
 80031ba:	62b9      	str	r1, [r7, #40]	; 0x28
 80031bc:	4629      	mov	r1, r5
 80031be:	eb63 0301 	sbc.w	r3, r3, r1
 80031c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80031c4:	f04f 0200 	mov.w	r2, #0
 80031c8:	f04f 0300 	mov.w	r3, #0
 80031cc:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80031d0:	4649      	mov	r1, r9
 80031d2:	018b      	lsls	r3, r1, #6
 80031d4:	4641      	mov	r1, r8
 80031d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80031da:	4641      	mov	r1, r8
 80031dc:	018a      	lsls	r2, r1, #6
 80031de:	4641      	mov	r1, r8
 80031e0:	ebb2 0a01 	subs.w	sl, r2, r1
 80031e4:	4649      	mov	r1, r9
 80031e6:	eb63 0b01 	sbc.w	fp, r3, r1
 80031ea:	f04f 0200 	mov.w	r2, #0
 80031ee:	f04f 0300 	mov.w	r3, #0
 80031f2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80031f6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80031fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80031fe:	4692      	mov	sl, r2
 8003200:	469b      	mov	fp, r3
 8003202:	4623      	mov	r3, r4
 8003204:	eb1a 0303 	adds.w	r3, sl, r3
 8003208:	623b      	str	r3, [r7, #32]
 800320a:	462b      	mov	r3, r5
 800320c:	eb4b 0303 	adc.w	r3, fp, r3
 8003210:	627b      	str	r3, [r7, #36]	; 0x24
 8003212:	f04f 0200 	mov.w	r2, #0
 8003216:	f04f 0300 	mov.w	r3, #0
 800321a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800321e:	4629      	mov	r1, r5
 8003220:	028b      	lsls	r3, r1, #10
 8003222:	4621      	mov	r1, r4
 8003224:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003228:	4621      	mov	r1, r4
 800322a:	028a      	lsls	r2, r1, #10
 800322c:	4610      	mov	r0, r2
 800322e:	4619      	mov	r1, r3
 8003230:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003234:	2200      	movs	r2, #0
 8003236:	673b      	str	r3, [r7, #112]	; 0x70
 8003238:	677a      	str	r2, [r7, #116]	; 0x74
 800323a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800323e:	f7fd fc29 	bl	8000a94 <__aeabi_uldivmod>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4613      	mov	r3, r2
 8003248:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800324c:	4b41      	ldr	r3, [pc, #260]	; (8003354 <HAL_RCC_GetSysClockFreq+0x354>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	0c1b      	lsrs	r3, r3, #16
 8003252:	f003 0303 	and.w	r3, r3, #3
 8003256:	3301      	adds	r3, #1
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800325e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003262:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003266:	fbb2 f3f3 	udiv	r3, r2, r3
 800326a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800326e:	e0eb      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003270:	4b38      	ldr	r3, [pc, #224]	; (8003354 <HAL_RCC_GetSysClockFreq+0x354>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003278:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800327c:	4b35      	ldr	r3, [pc, #212]	; (8003354 <HAL_RCC_GetSysClockFreq+0x354>)
 800327e:	685b      	ldr	r3, [r3, #4]
 8003280:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003284:	2b00      	cmp	r3, #0
 8003286:	d06b      	beq.n	8003360 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003288:	4b32      	ldr	r3, [pc, #200]	; (8003354 <HAL_RCC_GetSysClockFreq+0x354>)
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	099b      	lsrs	r3, r3, #6
 800328e:	2200      	movs	r2, #0
 8003290:	66bb      	str	r3, [r7, #104]	; 0x68
 8003292:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003294:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003296:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800329a:	663b      	str	r3, [r7, #96]	; 0x60
 800329c:	2300      	movs	r3, #0
 800329e:	667b      	str	r3, [r7, #100]	; 0x64
 80032a0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 80032a4:	4622      	mov	r2, r4
 80032a6:	462b      	mov	r3, r5
 80032a8:	f04f 0000 	mov.w	r0, #0
 80032ac:	f04f 0100 	mov.w	r1, #0
 80032b0:	0159      	lsls	r1, r3, #5
 80032b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032b6:	0150      	lsls	r0, r2, #5
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4621      	mov	r1, r4
 80032be:	1a51      	subs	r1, r2, r1
 80032c0:	61b9      	str	r1, [r7, #24]
 80032c2:	4629      	mov	r1, r5
 80032c4:	eb63 0301 	sbc.w	r3, r3, r1
 80032c8:	61fb      	str	r3, [r7, #28]
 80032ca:	f04f 0200 	mov.w	r2, #0
 80032ce:	f04f 0300 	mov.w	r3, #0
 80032d2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80032d6:	4659      	mov	r1, fp
 80032d8:	018b      	lsls	r3, r1, #6
 80032da:	4651      	mov	r1, sl
 80032dc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80032e0:	4651      	mov	r1, sl
 80032e2:	018a      	lsls	r2, r1, #6
 80032e4:	4651      	mov	r1, sl
 80032e6:	ebb2 0801 	subs.w	r8, r2, r1
 80032ea:	4659      	mov	r1, fp
 80032ec:	eb63 0901 	sbc.w	r9, r3, r1
 80032f0:	f04f 0200 	mov.w	r2, #0
 80032f4:	f04f 0300 	mov.w	r3, #0
 80032f8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80032fc:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003300:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003304:	4690      	mov	r8, r2
 8003306:	4699      	mov	r9, r3
 8003308:	4623      	mov	r3, r4
 800330a:	eb18 0303 	adds.w	r3, r8, r3
 800330e:	613b      	str	r3, [r7, #16]
 8003310:	462b      	mov	r3, r5
 8003312:	eb49 0303 	adc.w	r3, r9, r3
 8003316:	617b      	str	r3, [r7, #20]
 8003318:	f04f 0200 	mov.w	r2, #0
 800331c:	f04f 0300 	mov.w	r3, #0
 8003320:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003324:	4629      	mov	r1, r5
 8003326:	024b      	lsls	r3, r1, #9
 8003328:	4621      	mov	r1, r4
 800332a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800332e:	4621      	mov	r1, r4
 8003330:	024a      	lsls	r2, r1, #9
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800333a:	2200      	movs	r2, #0
 800333c:	65bb      	str	r3, [r7, #88]	; 0x58
 800333e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003340:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003344:	f7fd fba6 	bl	8000a94 <__aeabi_uldivmod>
 8003348:	4602      	mov	r2, r0
 800334a:	460b      	mov	r3, r1
 800334c:	4613      	mov	r3, r2
 800334e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003352:	e065      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x420>
 8003354:	40023800 	.word	0x40023800
 8003358:	00f42400 	.word	0x00f42400
 800335c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003360:	4b3d      	ldr	r3, [pc, #244]	; (8003458 <HAL_RCC_GetSysClockFreq+0x458>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	099b      	lsrs	r3, r3, #6
 8003366:	2200      	movs	r2, #0
 8003368:	4618      	mov	r0, r3
 800336a:	4611      	mov	r1, r2
 800336c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003370:	653b      	str	r3, [r7, #80]	; 0x50
 8003372:	2300      	movs	r3, #0
 8003374:	657b      	str	r3, [r7, #84]	; 0x54
 8003376:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800337a:	4642      	mov	r2, r8
 800337c:	464b      	mov	r3, r9
 800337e:	f04f 0000 	mov.w	r0, #0
 8003382:	f04f 0100 	mov.w	r1, #0
 8003386:	0159      	lsls	r1, r3, #5
 8003388:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800338c:	0150      	lsls	r0, r2, #5
 800338e:	4602      	mov	r2, r0
 8003390:	460b      	mov	r3, r1
 8003392:	4641      	mov	r1, r8
 8003394:	1a51      	subs	r1, r2, r1
 8003396:	60b9      	str	r1, [r7, #8]
 8003398:	4649      	mov	r1, r9
 800339a:	eb63 0301 	sbc.w	r3, r3, r1
 800339e:	60fb      	str	r3, [r7, #12]
 80033a0:	f04f 0200 	mov.w	r2, #0
 80033a4:	f04f 0300 	mov.w	r3, #0
 80033a8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80033ac:	4659      	mov	r1, fp
 80033ae:	018b      	lsls	r3, r1, #6
 80033b0:	4651      	mov	r1, sl
 80033b2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80033b6:	4651      	mov	r1, sl
 80033b8:	018a      	lsls	r2, r1, #6
 80033ba:	4651      	mov	r1, sl
 80033bc:	1a54      	subs	r4, r2, r1
 80033be:	4659      	mov	r1, fp
 80033c0:	eb63 0501 	sbc.w	r5, r3, r1
 80033c4:	f04f 0200 	mov.w	r2, #0
 80033c8:	f04f 0300 	mov.w	r3, #0
 80033cc:	00eb      	lsls	r3, r5, #3
 80033ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80033d2:	00e2      	lsls	r2, r4, #3
 80033d4:	4614      	mov	r4, r2
 80033d6:	461d      	mov	r5, r3
 80033d8:	4643      	mov	r3, r8
 80033da:	18e3      	adds	r3, r4, r3
 80033dc:	603b      	str	r3, [r7, #0]
 80033de:	464b      	mov	r3, r9
 80033e0:	eb45 0303 	adc.w	r3, r5, r3
 80033e4:	607b      	str	r3, [r7, #4]
 80033e6:	f04f 0200 	mov.w	r2, #0
 80033ea:	f04f 0300 	mov.w	r3, #0
 80033ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80033f2:	4629      	mov	r1, r5
 80033f4:	028b      	lsls	r3, r1, #10
 80033f6:	4621      	mov	r1, r4
 80033f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80033fc:	4621      	mov	r1, r4
 80033fe:	028a      	lsls	r2, r1, #10
 8003400:	4610      	mov	r0, r2
 8003402:	4619      	mov	r1, r3
 8003404:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003408:	2200      	movs	r2, #0
 800340a:	64bb      	str	r3, [r7, #72]	; 0x48
 800340c:	64fa      	str	r2, [r7, #76]	; 0x4c
 800340e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003412:	f7fd fb3f 	bl	8000a94 <__aeabi_uldivmod>
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	4613      	mov	r3, r2
 800341c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003420:	4b0d      	ldr	r3, [pc, #52]	; (8003458 <HAL_RCC_GetSysClockFreq+0x458>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	0f1b      	lsrs	r3, r3, #28
 8003426:	f003 0307 	and.w	r3, r3, #7
 800342a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800342e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003432:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003436:	fbb2 f3f3 	udiv	r3, r2, r3
 800343a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800343e:	e003      	b.n	8003448 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003440:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003442:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003446:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003448:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800344c:	4618      	mov	r0, r3
 800344e:	37b8      	adds	r7, #184	; 0xb8
 8003450:	46bd      	mov	sp, r7
 8003452:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003456:	bf00      	nop
 8003458:	40023800 	.word	0x40023800
 800345c:	00f42400 	.word	0x00f42400

08003460 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e28d      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f003 0301 	and.w	r3, r3, #1
 800347a:	2b00      	cmp	r3, #0
 800347c:	f000 8083 	beq.w	8003586 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003480:	4b94      	ldr	r3, [pc, #592]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f003 030c 	and.w	r3, r3, #12
 8003488:	2b04      	cmp	r3, #4
 800348a:	d019      	beq.n	80034c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800348c:	4b91      	ldr	r3, [pc, #580]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003494:	2b08      	cmp	r3, #8
 8003496:	d106      	bne.n	80034a6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003498:	4b8e      	ldr	r3, [pc, #568]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034a4:	d00c      	beq.n	80034c0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034a6:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80034ae:	2b0c      	cmp	r3, #12
 80034b0:	d112      	bne.n	80034d8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80034b2:	4b88      	ldr	r3, [pc, #544]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80034b4:	685b      	ldr	r3, [r3, #4]
 80034b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80034be:	d10b      	bne.n	80034d8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034c0:	4b84      	ldr	r3, [pc, #528]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d05b      	beq.n	8003584 <HAL_RCC_OscConfig+0x124>
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d157      	bne.n	8003584 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80034d4:	2301      	movs	r3, #1
 80034d6:	e25a      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80034e0:	d106      	bne.n	80034f0 <HAL_RCC_OscConfig+0x90>
 80034e2:	4b7c      	ldr	r3, [pc, #496]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	4a7b      	ldr	r2, [pc, #492]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80034e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034ec:	6013      	str	r3, [r2, #0]
 80034ee:	e01d      	b.n	800352c <HAL_RCC_OscConfig+0xcc>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80034f8:	d10c      	bne.n	8003514 <HAL_RCC_OscConfig+0xb4>
 80034fa:	4b76      	ldr	r3, [pc, #472]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a75      	ldr	r2, [pc, #468]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003500:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003504:	6013      	str	r3, [r2, #0]
 8003506:	4b73      	ldr	r3, [pc, #460]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	4a72      	ldr	r2, [pc, #456]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 800350c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003510:	6013      	str	r3, [r2, #0]
 8003512:	e00b      	b.n	800352c <HAL_RCC_OscConfig+0xcc>
 8003514:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a6e      	ldr	r2, [pc, #440]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 800351a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800351e:	6013      	str	r3, [r2, #0]
 8003520:	4b6c      	ldr	r3, [pc, #432]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a6b      	ldr	r2, [pc, #428]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800352a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d013      	beq.n	800355c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003534:	f7fe fa8e 	bl	8001a54 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800353c:	f7fe fa8a 	bl	8001a54 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b64      	cmp	r3, #100	; 0x64
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e21f      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800354e:	4b61      	ldr	r3, [pc, #388]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0xdc>
 800355a:	e014      	b.n	8003586 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355c:	f7fe fa7a 	bl	8001a54 <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003564:	f7fe fa76 	bl	8001a54 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b64      	cmp	r3, #100	; 0x64
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e20b      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003576:	4b57      	ldr	r3, [pc, #348]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800357e:	2b00      	cmp	r3, #0
 8003580:	d1f0      	bne.n	8003564 <HAL_RCC_OscConfig+0x104>
 8003582:	e000      	b.n	8003586 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 0302 	and.w	r3, r3, #2
 800358e:	2b00      	cmp	r3, #0
 8003590:	d06f      	beq.n	8003672 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003592:	4b50      	ldr	r3, [pc, #320]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003594:	689b      	ldr	r3, [r3, #8]
 8003596:	f003 030c 	and.w	r3, r3, #12
 800359a:	2b00      	cmp	r3, #0
 800359c:	d017      	beq.n	80035ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800359e:	4b4d      	ldr	r3, [pc, #308]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d105      	bne.n	80035b6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035aa:	4b4a      	ldr	r3, [pc, #296]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00b      	beq.n	80035ce <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035b6:	4b47      	ldr	r3, [pc, #284]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80035b8:	689b      	ldr	r3, [r3, #8]
 80035ba:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80035be:	2b0c      	cmp	r3, #12
 80035c0:	d11c      	bne.n	80035fc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80035c2:	4b44      	ldr	r3, [pc, #272]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d116      	bne.n	80035fc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035ce:	4b41      	ldr	r3, [pc, #260]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d005      	beq.n	80035e6 <HAL_RCC_OscConfig+0x186>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d001      	beq.n	80035e6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e1d3      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035e6:	4b3b      	ldr	r3, [pc, #236]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	00db      	lsls	r3, r3, #3
 80035f4:	4937      	ldr	r1, [pc, #220]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80035fa:	e03a      	b.n	8003672 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	68db      	ldr	r3, [r3, #12]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d020      	beq.n	8003646 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003604:	4b34      	ldr	r3, [pc, #208]	; (80036d8 <HAL_RCC_OscConfig+0x278>)
 8003606:	2201      	movs	r2, #1
 8003608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800360a:	f7fe fa23 	bl	8001a54 <HAL_GetTick>
 800360e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003610:	e008      	b.n	8003624 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003612:	f7fe fa1f 	bl	8001a54 <HAL_GetTick>
 8003616:	4602      	mov	r2, r0
 8003618:	693b      	ldr	r3, [r7, #16]
 800361a:	1ad3      	subs	r3, r2, r3
 800361c:	2b02      	cmp	r3, #2
 800361e:	d901      	bls.n	8003624 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003620:	2303      	movs	r3, #3
 8003622:	e1b4      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003624:	4b2b      	ldr	r3, [pc, #172]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0302 	and.w	r3, r3, #2
 800362c:	2b00      	cmp	r3, #0
 800362e:	d0f0      	beq.n	8003612 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003630:	4b28      	ldr	r3, [pc, #160]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	691b      	ldr	r3, [r3, #16]
 800363c:	00db      	lsls	r3, r3, #3
 800363e:	4925      	ldr	r1, [pc, #148]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003640:	4313      	orrs	r3, r2
 8003642:	600b      	str	r3, [r1, #0]
 8003644:	e015      	b.n	8003672 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003646:	4b24      	ldr	r3, [pc, #144]	; (80036d8 <HAL_RCC_OscConfig+0x278>)
 8003648:	2200      	movs	r2, #0
 800364a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800364c:	f7fe fa02 	bl	8001a54 <HAL_GetTick>
 8003650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003652:	e008      	b.n	8003666 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003654:	f7fe f9fe 	bl	8001a54 <HAL_GetTick>
 8003658:	4602      	mov	r2, r0
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	1ad3      	subs	r3, r2, r3
 800365e:	2b02      	cmp	r3, #2
 8003660:	d901      	bls.n	8003666 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e193      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003666:	4b1b      	ldr	r3, [pc, #108]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f003 0302 	and.w	r3, r3, #2
 800366e:	2b00      	cmp	r3, #0
 8003670:	d1f0      	bne.n	8003654 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d036      	beq.n	80036ec <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	695b      	ldr	r3, [r3, #20]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d016      	beq.n	80036b4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003686:	4b15      	ldr	r3, [pc, #84]	; (80036dc <HAL_RCC_OscConfig+0x27c>)
 8003688:	2201      	movs	r2, #1
 800368a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368c:	f7fe f9e2 	bl	8001a54 <HAL_GetTick>
 8003690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003692:	e008      	b.n	80036a6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003694:	f7fe f9de 	bl	8001a54 <HAL_GetTick>
 8003698:	4602      	mov	r2, r0
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	1ad3      	subs	r3, r2, r3
 800369e:	2b02      	cmp	r3, #2
 80036a0:	d901      	bls.n	80036a6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80036a2:	2303      	movs	r3, #3
 80036a4:	e173      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036a6:	4b0b      	ldr	r3, [pc, #44]	; (80036d4 <HAL_RCC_OscConfig+0x274>)
 80036a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036aa:	f003 0302 	and.w	r3, r3, #2
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d0f0      	beq.n	8003694 <HAL_RCC_OscConfig+0x234>
 80036b2:	e01b      	b.n	80036ec <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80036b4:	4b09      	ldr	r3, [pc, #36]	; (80036dc <HAL_RCC_OscConfig+0x27c>)
 80036b6:	2200      	movs	r2, #0
 80036b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036ba:	f7fe f9cb 	bl	8001a54 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036c0:	e00e      	b.n	80036e0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036c2:	f7fe f9c7 	bl	8001a54 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d907      	bls.n	80036e0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e15c      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
 80036d4:	40023800 	.word	0x40023800
 80036d8:	42470000 	.word	0x42470000
 80036dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80036e0:	4b8a      	ldr	r3, [pc, #552]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 80036e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1ea      	bne.n	80036c2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	f000 8097 	beq.w	8003828 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80036fa:	2300      	movs	r3, #0
 80036fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80036fe:	4b83      	ldr	r3, [pc, #524]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10f      	bne.n	800372a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800370a:	2300      	movs	r3, #0
 800370c:	60bb      	str	r3, [r7, #8]
 800370e:	4b7f      	ldr	r3, [pc, #508]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 8003710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003712:	4a7e      	ldr	r2, [pc, #504]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 8003714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003718:	6413      	str	r3, [r2, #64]	; 0x40
 800371a:	4b7c      	ldr	r3, [pc, #496]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 800371c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800371e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003722:	60bb      	str	r3, [r7, #8]
 8003724:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003726:	2301      	movs	r3, #1
 8003728:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800372a:	4b79      	ldr	r3, [pc, #484]	; (8003910 <HAL_RCC_OscConfig+0x4b0>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003732:	2b00      	cmp	r3, #0
 8003734:	d118      	bne.n	8003768 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003736:	4b76      	ldr	r3, [pc, #472]	; (8003910 <HAL_RCC_OscConfig+0x4b0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	4a75      	ldr	r2, [pc, #468]	; (8003910 <HAL_RCC_OscConfig+0x4b0>)
 800373c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003740:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003742:	f7fe f987 	bl	8001a54 <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800374a:	f7fe f983 	bl	8001a54 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e118      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	4b6c      	ldr	r3, [pc, #432]	; (8003910 <HAL_RCC_OscConfig+0x4b0>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d0f0      	beq.n	800374a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	2b01      	cmp	r3, #1
 800376e:	d106      	bne.n	800377e <HAL_RCC_OscConfig+0x31e>
 8003770:	4b66      	ldr	r3, [pc, #408]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 8003772:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003774:	4a65      	ldr	r2, [pc, #404]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 8003776:	f043 0301 	orr.w	r3, r3, #1
 800377a:	6713      	str	r3, [r2, #112]	; 0x70
 800377c:	e01c      	b.n	80037b8 <HAL_RCC_OscConfig+0x358>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b05      	cmp	r3, #5
 8003784:	d10c      	bne.n	80037a0 <HAL_RCC_OscConfig+0x340>
 8003786:	4b61      	ldr	r3, [pc, #388]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 8003788:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800378a:	4a60      	ldr	r2, [pc, #384]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 800378c:	f043 0304 	orr.w	r3, r3, #4
 8003790:	6713      	str	r3, [r2, #112]	; 0x70
 8003792:	4b5e      	ldr	r3, [pc, #376]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 8003794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003796:	4a5d      	ldr	r2, [pc, #372]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 8003798:	f043 0301 	orr.w	r3, r3, #1
 800379c:	6713      	str	r3, [r2, #112]	; 0x70
 800379e:	e00b      	b.n	80037b8 <HAL_RCC_OscConfig+0x358>
 80037a0:	4b5a      	ldr	r3, [pc, #360]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 80037a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037a4:	4a59      	ldr	r2, [pc, #356]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 80037a6:	f023 0301 	bic.w	r3, r3, #1
 80037aa:	6713      	str	r3, [r2, #112]	; 0x70
 80037ac:	4b57      	ldr	r3, [pc, #348]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 80037ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037b0:	4a56      	ldr	r2, [pc, #344]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 80037b2:	f023 0304 	bic.w	r3, r3, #4
 80037b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d015      	beq.n	80037ec <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c0:	f7fe f948 	bl	8001a54 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037c6:	e00a      	b.n	80037de <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037c8:	f7fe f944 	bl	8001a54 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d901      	bls.n	80037de <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80037da:	2303      	movs	r3, #3
 80037dc:	e0d7      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037de:	4b4b      	ldr	r3, [pc, #300]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 80037e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e2:	f003 0302 	and.w	r3, r3, #2
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d0ee      	beq.n	80037c8 <HAL_RCC_OscConfig+0x368>
 80037ea:	e014      	b.n	8003816 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ec:	f7fe f932 	bl	8001a54 <HAL_GetTick>
 80037f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80037f4:	f7fe f92e 	bl	8001a54 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	1ad3      	subs	r3, r2, r3
 80037fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003802:	4293      	cmp	r3, r2
 8003804:	d901      	bls.n	800380a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e0c1      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800380a:	4b40      	ldr	r3, [pc, #256]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 800380c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380e:	f003 0302 	and.w	r3, r3, #2
 8003812:	2b00      	cmp	r3, #0
 8003814:	d1ee      	bne.n	80037f4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003816:	7dfb      	ldrb	r3, [r7, #23]
 8003818:	2b01      	cmp	r3, #1
 800381a:	d105      	bne.n	8003828 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800381c:	4b3b      	ldr	r3, [pc, #236]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 800381e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003820:	4a3a      	ldr	r2, [pc, #232]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 8003822:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003826:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	699b      	ldr	r3, [r3, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	f000 80ad 	beq.w	800398c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003832:	4b36      	ldr	r3, [pc, #216]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f003 030c 	and.w	r3, r3, #12
 800383a:	2b08      	cmp	r3, #8
 800383c:	d060      	beq.n	8003900 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	699b      	ldr	r3, [r3, #24]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d145      	bne.n	80038d2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003846:	4b33      	ldr	r3, [pc, #204]	; (8003914 <HAL_RCC_OscConfig+0x4b4>)
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800384c:	f7fe f902 	bl	8001a54 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003854:	f7fe f8fe 	bl	8001a54 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b02      	cmp	r3, #2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e093      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003866:	4b29      	ldr	r3, [pc, #164]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1f0      	bne.n	8003854 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	69da      	ldr	r2, [r3, #28]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6a1b      	ldr	r3, [r3, #32]
 800387a:	431a      	orrs	r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003880:	019b      	lsls	r3, r3, #6
 8003882:	431a      	orrs	r2, r3
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003888:	085b      	lsrs	r3, r3, #1
 800388a:	3b01      	subs	r3, #1
 800388c:	041b      	lsls	r3, r3, #16
 800388e:	431a      	orrs	r2, r3
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003894:	061b      	lsls	r3, r3, #24
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389c:	071b      	lsls	r3, r3, #28
 800389e:	491b      	ldr	r1, [pc, #108]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 80038a0:	4313      	orrs	r3, r2
 80038a2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038a4:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <HAL_RCC_OscConfig+0x4b4>)
 80038a6:	2201      	movs	r2, #1
 80038a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038aa:	f7fe f8d3 	bl	8001a54 <HAL_GetTick>
 80038ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038b0:	e008      	b.n	80038c4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b2:	f7fe f8cf 	bl	8001a54 <HAL_GetTick>
 80038b6:	4602      	mov	r2, r0
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	1ad3      	subs	r3, r2, r3
 80038bc:	2b02      	cmp	r3, #2
 80038be:	d901      	bls.n	80038c4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80038c0:	2303      	movs	r3, #3
 80038c2:	e064      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038c4:	4b11      	ldr	r3, [pc, #68]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d0f0      	beq.n	80038b2 <HAL_RCC_OscConfig+0x452>
 80038d0:	e05c      	b.n	800398c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d2:	4b10      	ldr	r3, [pc, #64]	; (8003914 <HAL_RCC_OscConfig+0x4b4>)
 80038d4:	2200      	movs	r2, #0
 80038d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038d8:	f7fe f8bc 	bl	8001a54 <HAL_GetTick>
 80038dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038de:	e008      	b.n	80038f2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038e0:	f7fe f8b8 	bl	8001a54 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	693b      	ldr	r3, [r7, #16]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	2b02      	cmp	r3, #2
 80038ec:	d901      	bls.n	80038f2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e04d      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038f2:	4b06      	ldr	r3, [pc, #24]	; (800390c <HAL_RCC_OscConfig+0x4ac>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d1f0      	bne.n	80038e0 <HAL_RCC_OscConfig+0x480>
 80038fe:	e045      	b.n	800398c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	699b      	ldr	r3, [r3, #24]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d107      	bne.n	8003918 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003908:	2301      	movs	r3, #1
 800390a:	e040      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
 800390c:	40023800 	.word	0x40023800
 8003910:	40007000 	.word	0x40007000
 8003914:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003918:	4b1f      	ldr	r3, [pc, #124]	; (8003998 <HAL_RCC_OscConfig+0x538>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	699b      	ldr	r3, [r3, #24]
 8003922:	2b01      	cmp	r3, #1
 8003924:	d030      	beq.n	8003988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003930:	429a      	cmp	r2, r3
 8003932:	d129      	bne.n	8003988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800393e:	429a      	cmp	r2, r3
 8003940:	d122      	bne.n	8003988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003942:	68fa      	ldr	r2, [r7, #12]
 8003944:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003948:	4013      	ands	r3, r2
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800394e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003950:	4293      	cmp	r3, r2
 8003952:	d119      	bne.n	8003988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395e:	085b      	lsrs	r3, r3, #1
 8003960:	3b01      	subs	r3, #1
 8003962:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003964:	429a      	cmp	r2, r3
 8003966:	d10f      	bne.n	8003988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003972:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003974:	429a      	cmp	r2, r3
 8003976:	d107      	bne.n	8003988 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003982:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d001      	beq.n	800398c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e000      	b.n	800398e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40023800 	.word	0x40023800

0800399c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b082      	sub	sp, #8
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d101      	bne.n	80039ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e03f      	b.n	8003a2e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039b4:	b2db      	uxtb	r3, r3
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d106      	bne.n	80039c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2200      	movs	r2, #0
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039c2:	6878      	ldr	r0, [r7, #4]
 80039c4:	f7fd ff6e 	bl	80018a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2224      	movs	r2, #36	; 0x24
 80039cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	68da      	ldr	r2, [r3, #12]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80039de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039e0:	6878      	ldr	r0, [r7, #4]
 80039e2:	f000 f829 	bl	8003a38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	691a      	ldr	r2, [r3, #16]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80039f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	695a      	ldr	r2, [r3, #20]
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003a04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	68da      	ldr	r2, [r3, #12]
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
	...

08003a38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a3c:	b0c0      	sub	sp, #256	; 0x100
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a54:	68d9      	ldr	r1, [r3, #12]
 8003a56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	ea40 0301 	orr.w	r3, r0, r1
 8003a60:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a66:	689a      	ldr	r2, [r3, #8]
 8003a68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	431a      	orrs	r2, r3
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68db      	ldr	r3, [r3, #12]
 8003a8c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003a90:	f021 010c 	bic.w	r1, r1, #12
 8003a94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a98:	681a      	ldr	r2, [r3, #0]
 8003a9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003a9e:	430b      	orrs	r3, r1
 8003aa0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	695b      	ldr	r3, [r3, #20]
 8003aaa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab2:	6999      	ldr	r1, [r3, #24]
 8003ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	ea40 0301 	orr.w	r3, r0, r1
 8003abe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ac0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	4b8f      	ldr	r3, [pc, #572]	; (8003d04 <UART_SetConfig+0x2cc>)
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d005      	beq.n	8003ad8 <UART_SetConfig+0xa0>
 8003acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ad0:	681a      	ldr	r2, [r3, #0]
 8003ad2:	4b8d      	ldr	r3, [pc, #564]	; (8003d08 <UART_SetConfig+0x2d0>)
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d104      	bne.n	8003ae2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ad8:	f7ff fa7e 	bl	8002fd8 <HAL_RCC_GetPCLK2Freq>
 8003adc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003ae0:	e003      	b.n	8003aea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ae2:	f7ff fa65 	bl	8002fb0 <HAL_RCC_GetPCLK1Freq>
 8003ae6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003aea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003aee:	69db      	ldr	r3, [r3, #28]
 8003af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003af4:	f040 810c 	bne.w	8003d10 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003af8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003afc:	2200      	movs	r2, #0
 8003afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003b02:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003b06:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003b0a:	4622      	mov	r2, r4
 8003b0c:	462b      	mov	r3, r5
 8003b0e:	1891      	adds	r1, r2, r2
 8003b10:	65b9      	str	r1, [r7, #88]	; 0x58
 8003b12:	415b      	adcs	r3, r3
 8003b14:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003b16:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003b1a:	4621      	mov	r1, r4
 8003b1c:	eb12 0801 	adds.w	r8, r2, r1
 8003b20:	4629      	mov	r1, r5
 8003b22:	eb43 0901 	adc.w	r9, r3, r1
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b32:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b36:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b3a:	4690      	mov	r8, r2
 8003b3c:	4699      	mov	r9, r3
 8003b3e:	4623      	mov	r3, r4
 8003b40:	eb18 0303 	adds.w	r3, r8, r3
 8003b44:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003b48:	462b      	mov	r3, r5
 8003b4a:	eb49 0303 	adc.w	r3, r9, r3
 8003b4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b5e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003b62:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b66:	460b      	mov	r3, r1
 8003b68:	18db      	adds	r3, r3, r3
 8003b6a:	653b      	str	r3, [r7, #80]	; 0x50
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	eb42 0303 	adc.w	r3, r2, r3
 8003b72:	657b      	str	r3, [r7, #84]	; 0x54
 8003b74:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003b78:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003b7c:	f7fc ff8a 	bl	8000a94 <__aeabi_uldivmod>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4b61      	ldr	r3, [pc, #388]	; (8003d0c <UART_SetConfig+0x2d4>)
 8003b86:	fba3 2302 	umull	r2, r3, r3, r2
 8003b8a:	095b      	lsrs	r3, r3, #5
 8003b8c:	011c      	lsls	r4, r3, #4
 8003b8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003b92:	2200      	movs	r2, #0
 8003b94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003b98:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003b9c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003ba0:	4642      	mov	r2, r8
 8003ba2:	464b      	mov	r3, r9
 8003ba4:	1891      	adds	r1, r2, r2
 8003ba6:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ba8:	415b      	adcs	r3, r3
 8003baa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003bac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003bb0:	4641      	mov	r1, r8
 8003bb2:	eb12 0a01 	adds.w	sl, r2, r1
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	eb43 0b01 	adc.w	fp, r3, r1
 8003bbc:	f04f 0200 	mov.w	r2, #0
 8003bc0:	f04f 0300 	mov.w	r3, #0
 8003bc4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bc8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bcc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bd0:	4692      	mov	sl, r2
 8003bd2:	469b      	mov	fp, r3
 8003bd4:	4643      	mov	r3, r8
 8003bd6:	eb1a 0303 	adds.w	r3, sl, r3
 8003bda:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003bde:	464b      	mov	r3, r9
 8003be0:	eb4b 0303 	adc.w	r3, fp, r3
 8003be4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003be8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003bf4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003bf8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003bfc:	460b      	mov	r3, r1
 8003bfe:	18db      	adds	r3, r3, r3
 8003c00:	643b      	str	r3, [r7, #64]	; 0x40
 8003c02:	4613      	mov	r3, r2
 8003c04:	eb42 0303 	adc.w	r3, r2, r3
 8003c08:	647b      	str	r3, [r7, #68]	; 0x44
 8003c0a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c0e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003c12:	f7fc ff3f 	bl	8000a94 <__aeabi_uldivmod>
 8003c16:	4602      	mov	r2, r0
 8003c18:	460b      	mov	r3, r1
 8003c1a:	4611      	mov	r1, r2
 8003c1c:	4b3b      	ldr	r3, [pc, #236]	; (8003d0c <UART_SetConfig+0x2d4>)
 8003c1e:	fba3 2301 	umull	r2, r3, r3, r1
 8003c22:	095b      	lsrs	r3, r3, #5
 8003c24:	2264      	movs	r2, #100	; 0x64
 8003c26:	fb02 f303 	mul.w	r3, r2, r3
 8003c2a:	1acb      	subs	r3, r1, r3
 8003c2c:	00db      	lsls	r3, r3, #3
 8003c2e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003c32:	4b36      	ldr	r3, [pc, #216]	; (8003d0c <UART_SetConfig+0x2d4>)
 8003c34:	fba3 2302 	umull	r2, r3, r3, r2
 8003c38:	095b      	lsrs	r3, r3, #5
 8003c3a:	005b      	lsls	r3, r3, #1
 8003c3c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003c40:	441c      	add	r4, r3
 8003c42:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003c46:	2200      	movs	r2, #0
 8003c48:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c4c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003c50:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003c54:	4642      	mov	r2, r8
 8003c56:	464b      	mov	r3, r9
 8003c58:	1891      	adds	r1, r2, r2
 8003c5a:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c5c:	415b      	adcs	r3, r3
 8003c5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c60:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c64:	4641      	mov	r1, r8
 8003c66:	1851      	adds	r1, r2, r1
 8003c68:	6339      	str	r1, [r7, #48]	; 0x30
 8003c6a:	4649      	mov	r1, r9
 8003c6c:	414b      	adcs	r3, r1
 8003c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	f04f 0300 	mov.w	r3, #0
 8003c78:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003c7c:	4659      	mov	r1, fp
 8003c7e:	00cb      	lsls	r3, r1, #3
 8003c80:	4651      	mov	r1, sl
 8003c82:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c86:	4651      	mov	r1, sl
 8003c88:	00ca      	lsls	r2, r1, #3
 8003c8a:	4610      	mov	r0, r2
 8003c8c:	4619      	mov	r1, r3
 8003c8e:	4603      	mov	r3, r0
 8003c90:	4642      	mov	r2, r8
 8003c92:	189b      	adds	r3, r3, r2
 8003c94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003c98:	464b      	mov	r3, r9
 8003c9a:	460a      	mov	r2, r1
 8003c9c:	eb42 0303 	adc.w	r3, r2, r3
 8003ca0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003cb0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003cb4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003cb8:	460b      	mov	r3, r1
 8003cba:	18db      	adds	r3, r3, r3
 8003cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	eb42 0303 	adc.w	r3, r2, r3
 8003cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cc6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8003cce:	f7fc fee1 	bl	8000a94 <__aeabi_uldivmod>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	4b0d      	ldr	r3, [pc, #52]	; (8003d0c <UART_SetConfig+0x2d4>)
 8003cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8003cdc:	095b      	lsrs	r3, r3, #5
 8003cde:	2164      	movs	r1, #100	; 0x64
 8003ce0:	fb01 f303 	mul.w	r3, r1, r3
 8003ce4:	1ad3      	subs	r3, r2, r3
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	3332      	adds	r3, #50	; 0x32
 8003cea:	4a08      	ldr	r2, [pc, #32]	; (8003d0c <UART_SetConfig+0x2d4>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	095b      	lsrs	r3, r3, #5
 8003cf2:	f003 0207 	and.w	r2, r3, #7
 8003cf6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4422      	add	r2, r4
 8003cfe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d00:	e105      	b.n	8003f0e <UART_SetConfig+0x4d6>
 8003d02:	bf00      	nop
 8003d04:	40011000 	.word	0x40011000
 8003d08:	40011400 	.word	0x40011400
 8003d0c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003d14:	2200      	movs	r2, #0
 8003d16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003d1a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8003d1e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003d22:	4642      	mov	r2, r8
 8003d24:	464b      	mov	r3, r9
 8003d26:	1891      	adds	r1, r2, r2
 8003d28:	6239      	str	r1, [r7, #32]
 8003d2a:	415b      	adcs	r3, r3
 8003d2c:	627b      	str	r3, [r7, #36]	; 0x24
 8003d2e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d32:	4641      	mov	r1, r8
 8003d34:	1854      	adds	r4, r2, r1
 8003d36:	4649      	mov	r1, r9
 8003d38:	eb43 0501 	adc.w	r5, r3, r1
 8003d3c:	f04f 0200 	mov.w	r2, #0
 8003d40:	f04f 0300 	mov.w	r3, #0
 8003d44:	00eb      	lsls	r3, r5, #3
 8003d46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d4a:	00e2      	lsls	r2, r4, #3
 8003d4c:	4614      	mov	r4, r2
 8003d4e:	461d      	mov	r5, r3
 8003d50:	4643      	mov	r3, r8
 8003d52:	18e3      	adds	r3, r4, r3
 8003d54:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003d58:	464b      	mov	r3, r9
 8003d5a:	eb45 0303 	adc.w	r3, r5, r3
 8003d5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d66:	685b      	ldr	r3, [r3, #4]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003d6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003d72:	f04f 0200 	mov.w	r2, #0
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003d7e:	4629      	mov	r1, r5
 8003d80:	008b      	lsls	r3, r1, #2
 8003d82:	4621      	mov	r1, r4
 8003d84:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d88:	4621      	mov	r1, r4
 8003d8a:	008a      	lsls	r2, r1, #2
 8003d8c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003d90:	f7fc fe80 	bl	8000a94 <__aeabi_uldivmod>
 8003d94:	4602      	mov	r2, r0
 8003d96:	460b      	mov	r3, r1
 8003d98:	4b60      	ldr	r3, [pc, #384]	; (8003f1c <UART_SetConfig+0x4e4>)
 8003d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003d9e:	095b      	lsrs	r3, r3, #5
 8003da0:	011c      	lsls	r4, r3, #4
 8003da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003da6:	2200      	movs	r2, #0
 8003da8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003dac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003db0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8003db4:	4642      	mov	r2, r8
 8003db6:	464b      	mov	r3, r9
 8003db8:	1891      	adds	r1, r2, r2
 8003dba:	61b9      	str	r1, [r7, #24]
 8003dbc:	415b      	adcs	r3, r3
 8003dbe:	61fb      	str	r3, [r7, #28]
 8003dc0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dc4:	4641      	mov	r1, r8
 8003dc6:	1851      	adds	r1, r2, r1
 8003dc8:	6139      	str	r1, [r7, #16]
 8003dca:	4649      	mov	r1, r9
 8003dcc:	414b      	adcs	r3, r1
 8003dce:	617b      	str	r3, [r7, #20]
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ddc:	4659      	mov	r1, fp
 8003dde:	00cb      	lsls	r3, r1, #3
 8003de0:	4651      	mov	r1, sl
 8003de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003de6:	4651      	mov	r1, sl
 8003de8:	00ca      	lsls	r2, r1, #3
 8003dea:	4610      	mov	r0, r2
 8003dec:	4619      	mov	r1, r3
 8003dee:	4603      	mov	r3, r0
 8003df0:	4642      	mov	r2, r8
 8003df2:	189b      	adds	r3, r3, r2
 8003df4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003df8:	464b      	mov	r3, r9
 8003dfa:	460a      	mov	r2, r1
 8003dfc:	eb42 0303 	adc.w	r3, r2, r3
 8003e00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e0e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003e10:	f04f 0200 	mov.w	r2, #0
 8003e14:	f04f 0300 	mov.w	r3, #0
 8003e18:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8003e1c:	4649      	mov	r1, r9
 8003e1e:	008b      	lsls	r3, r1, #2
 8003e20:	4641      	mov	r1, r8
 8003e22:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e26:	4641      	mov	r1, r8
 8003e28:	008a      	lsls	r2, r1, #2
 8003e2a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8003e2e:	f7fc fe31 	bl	8000a94 <__aeabi_uldivmod>
 8003e32:	4602      	mov	r2, r0
 8003e34:	460b      	mov	r3, r1
 8003e36:	4b39      	ldr	r3, [pc, #228]	; (8003f1c <UART_SetConfig+0x4e4>)
 8003e38:	fba3 1302 	umull	r1, r3, r3, r2
 8003e3c:	095b      	lsrs	r3, r3, #5
 8003e3e:	2164      	movs	r1, #100	; 0x64
 8003e40:	fb01 f303 	mul.w	r3, r1, r3
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	3332      	adds	r3, #50	; 0x32
 8003e4a:	4a34      	ldr	r2, [pc, #208]	; (8003f1c <UART_SetConfig+0x4e4>)
 8003e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8003e50:	095b      	lsrs	r3, r3, #5
 8003e52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e56:	441c      	add	r4, r3
 8003e58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	673b      	str	r3, [r7, #112]	; 0x70
 8003e60:	677a      	str	r2, [r7, #116]	; 0x74
 8003e62:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003e66:	4642      	mov	r2, r8
 8003e68:	464b      	mov	r3, r9
 8003e6a:	1891      	adds	r1, r2, r2
 8003e6c:	60b9      	str	r1, [r7, #8]
 8003e6e:	415b      	adcs	r3, r3
 8003e70:	60fb      	str	r3, [r7, #12]
 8003e72:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e76:	4641      	mov	r1, r8
 8003e78:	1851      	adds	r1, r2, r1
 8003e7a:	6039      	str	r1, [r7, #0]
 8003e7c:	4649      	mov	r1, r9
 8003e7e:	414b      	adcs	r3, r1
 8003e80:	607b      	str	r3, [r7, #4]
 8003e82:	f04f 0200 	mov.w	r2, #0
 8003e86:	f04f 0300 	mov.w	r3, #0
 8003e8a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e8e:	4659      	mov	r1, fp
 8003e90:	00cb      	lsls	r3, r1, #3
 8003e92:	4651      	mov	r1, sl
 8003e94:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003e98:	4651      	mov	r1, sl
 8003e9a:	00ca      	lsls	r2, r1, #3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	4642      	mov	r2, r8
 8003ea4:	189b      	adds	r3, r3, r2
 8003ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ea8:	464b      	mov	r3, r9
 8003eaa:	460a      	mov	r2, r1
 8003eac:	eb42 0303 	adc.w	r3, r2, r3
 8003eb0:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003eb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	663b      	str	r3, [r7, #96]	; 0x60
 8003ebc:	667a      	str	r2, [r7, #100]	; 0x64
 8003ebe:	f04f 0200 	mov.w	r2, #0
 8003ec2:	f04f 0300 	mov.w	r3, #0
 8003ec6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8003eca:	4649      	mov	r1, r9
 8003ecc:	008b      	lsls	r3, r1, #2
 8003ece:	4641      	mov	r1, r8
 8003ed0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ed4:	4641      	mov	r1, r8
 8003ed6:	008a      	lsls	r2, r1, #2
 8003ed8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8003edc:	f7fc fdda 	bl	8000a94 <__aeabi_uldivmod>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	4b0d      	ldr	r3, [pc, #52]	; (8003f1c <UART_SetConfig+0x4e4>)
 8003ee6:	fba3 1302 	umull	r1, r3, r3, r2
 8003eea:	095b      	lsrs	r3, r3, #5
 8003eec:	2164      	movs	r1, #100	; 0x64
 8003eee:	fb01 f303 	mul.w	r3, r1, r3
 8003ef2:	1ad3      	subs	r3, r2, r3
 8003ef4:	011b      	lsls	r3, r3, #4
 8003ef6:	3332      	adds	r3, #50	; 0x32
 8003ef8:	4a08      	ldr	r2, [pc, #32]	; (8003f1c <UART_SetConfig+0x4e4>)
 8003efa:	fba2 2303 	umull	r2, r3, r2, r3
 8003efe:	095b      	lsrs	r3, r3, #5
 8003f00:	f003 020f 	and.w	r2, r3, #15
 8003f04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4422      	add	r2, r4
 8003f0c:	609a      	str	r2, [r3, #8]
}
 8003f0e:	bf00      	nop
 8003f10:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003f14:	46bd      	mov	sp, r7
 8003f16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f1a:	bf00      	nop
 8003f1c:	51eb851f 	.word	0x51eb851f

08003f20 <sinf>:
 8003f20:	ee10 3a10 	vmov	r3, s0
 8003f24:	b507      	push	{r0, r1, r2, lr}
 8003f26:	4a1f      	ldr	r2, [pc, #124]	; (8003fa4 <sinf+0x84>)
 8003f28:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	dc07      	bgt.n	8003f40 <sinf+0x20>
 8003f30:	eddf 0a1d 	vldr	s1, [pc, #116]	; 8003fa8 <sinf+0x88>
 8003f34:	2000      	movs	r0, #0
 8003f36:	b003      	add	sp, #12
 8003f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f3c:	f000 bc48 	b.w	80047d0 <__kernel_sinf>
 8003f40:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8003f44:	db04      	blt.n	8003f50 <sinf+0x30>
 8003f46:	ee30 0a40 	vsub.f32	s0, s0, s0
 8003f4a:	b003      	add	sp, #12
 8003f4c:	f85d fb04 	ldr.w	pc, [sp], #4
 8003f50:	4668      	mov	r0, sp
 8003f52:	f000 f82b 	bl	8003fac <__ieee754_rem_pio2f>
 8003f56:	f000 0003 	and.w	r0, r0, #3
 8003f5a:	2801      	cmp	r0, #1
 8003f5c:	d00a      	beq.n	8003f74 <sinf+0x54>
 8003f5e:	2802      	cmp	r0, #2
 8003f60:	d00f      	beq.n	8003f82 <sinf+0x62>
 8003f62:	b9c0      	cbnz	r0, 8003f96 <sinf+0x76>
 8003f64:	eddd 0a01 	vldr	s1, [sp, #4]
 8003f68:	ed9d 0a00 	vldr	s0, [sp]
 8003f6c:	2001      	movs	r0, #1
 8003f6e:	f000 fc2f 	bl	80047d0 <__kernel_sinf>
 8003f72:	e7ea      	b.n	8003f4a <sinf+0x2a>
 8003f74:	eddd 0a01 	vldr	s1, [sp, #4]
 8003f78:	ed9d 0a00 	vldr	s0, [sp]
 8003f7c:	f000 f952 	bl	8004224 <__kernel_cosf>
 8003f80:	e7e3      	b.n	8003f4a <sinf+0x2a>
 8003f82:	eddd 0a01 	vldr	s1, [sp, #4]
 8003f86:	ed9d 0a00 	vldr	s0, [sp]
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	f000 fc20 	bl	80047d0 <__kernel_sinf>
 8003f90:	eeb1 0a40 	vneg.f32	s0, s0
 8003f94:	e7d9      	b.n	8003f4a <sinf+0x2a>
 8003f96:	eddd 0a01 	vldr	s1, [sp, #4]
 8003f9a:	ed9d 0a00 	vldr	s0, [sp]
 8003f9e:	f000 f941 	bl	8004224 <__kernel_cosf>
 8003fa2:	e7f5      	b.n	8003f90 <sinf+0x70>
 8003fa4:	3f490fd8 	.word	0x3f490fd8
 8003fa8:	00000000 	.word	0x00000000

08003fac <__ieee754_rem_pio2f>:
 8003fac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fae:	ee10 6a10 	vmov	r6, s0
 8003fb2:	4b8e      	ldr	r3, [pc, #568]	; (80041ec <__ieee754_rem_pio2f+0x240>)
 8003fb4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8003fb8:	429d      	cmp	r5, r3
 8003fba:	b087      	sub	sp, #28
 8003fbc:	eef0 7a40 	vmov.f32	s15, s0
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	dc05      	bgt.n	8003fd0 <__ieee754_rem_pio2f+0x24>
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	ed80 0a00 	vstr	s0, [r0]
 8003fca:	6043      	str	r3, [r0, #4]
 8003fcc:	2000      	movs	r0, #0
 8003fce:	e01a      	b.n	8004006 <__ieee754_rem_pio2f+0x5a>
 8003fd0:	4b87      	ldr	r3, [pc, #540]	; (80041f0 <__ieee754_rem_pio2f+0x244>)
 8003fd2:	429d      	cmp	r5, r3
 8003fd4:	dc46      	bgt.n	8004064 <__ieee754_rem_pio2f+0xb8>
 8003fd6:	2e00      	cmp	r6, #0
 8003fd8:	ed9f 0a86 	vldr	s0, [pc, #536]	; 80041f4 <__ieee754_rem_pio2f+0x248>
 8003fdc:	4b86      	ldr	r3, [pc, #536]	; (80041f8 <__ieee754_rem_pio2f+0x24c>)
 8003fde:	f025 050f 	bic.w	r5, r5, #15
 8003fe2:	dd1f      	ble.n	8004024 <__ieee754_rem_pio2f+0x78>
 8003fe4:	429d      	cmp	r5, r3
 8003fe6:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003fea:	d00e      	beq.n	800400a <__ieee754_rem_pio2f+0x5e>
 8003fec:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80041fc <__ieee754_rem_pio2f+0x250>
 8003ff0:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8003ff4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8003ff8:	ed80 0a00 	vstr	s0, [r0]
 8003ffc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004000:	2001      	movs	r0, #1
 8004002:	edc4 7a01 	vstr	s15, [r4, #4]
 8004006:	b007      	add	sp, #28
 8004008:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800400a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8004200 <__ieee754_rem_pio2f+0x254>
 800400e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8004204 <__ieee754_rem_pio2f+0x258>
 8004012:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004016:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800401a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800401e:	edc0 6a00 	vstr	s13, [r0]
 8004022:	e7eb      	b.n	8003ffc <__ieee754_rem_pio2f+0x50>
 8004024:	429d      	cmp	r5, r3
 8004026:	ee77 7a80 	vadd.f32	s15, s15, s0
 800402a:	d00e      	beq.n	800404a <__ieee754_rem_pio2f+0x9e>
 800402c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80041fc <__ieee754_rem_pio2f+0x250>
 8004030:	ee37 0a87 	vadd.f32	s0, s15, s14
 8004034:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8004038:	ed80 0a00 	vstr	s0, [r0]
 800403c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004040:	f04f 30ff 	mov.w	r0, #4294967295
 8004044:	edc4 7a01 	vstr	s15, [r4, #4]
 8004048:	e7dd      	b.n	8004006 <__ieee754_rem_pio2f+0x5a>
 800404a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8004200 <__ieee754_rem_pio2f+0x254>
 800404e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8004204 <__ieee754_rem_pio2f+0x258>
 8004052:	ee77 7a80 	vadd.f32	s15, s15, s0
 8004056:	ee77 6a87 	vadd.f32	s13, s15, s14
 800405a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800405e:	edc0 6a00 	vstr	s13, [r0]
 8004062:	e7eb      	b.n	800403c <__ieee754_rem_pio2f+0x90>
 8004064:	4b68      	ldr	r3, [pc, #416]	; (8004208 <__ieee754_rem_pio2f+0x25c>)
 8004066:	429d      	cmp	r5, r3
 8004068:	dc72      	bgt.n	8004150 <__ieee754_rem_pio2f+0x1a4>
 800406a:	f000 fbf9 	bl	8004860 <fabsf>
 800406e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800420c <__ieee754_rem_pio2f+0x260>
 8004072:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8004076:	eee0 7a07 	vfma.f32	s15, s0, s14
 800407a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800407e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004082:	ee17 0a90 	vmov	r0, s15
 8004086:	eddf 7a5b 	vldr	s15, [pc, #364]	; 80041f4 <__ieee754_rem_pio2f+0x248>
 800408a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800408e:	281f      	cmp	r0, #31
 8004090:	eddf 7a5a 	vldr	s15, [pc, #360]	; 80041fc <__ieee754_rem_pio2f+0x250>
 8004094:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004098:	eeb1 6a47 	vneg.f32	s12, s14
 800409c:	ee70 6a67 	vsub.f32	s13, s0, s15
 80040a0:	ee16 2a90 	vmov	r2, s13
 80040a4:	dc1c      	bgt.n	80040e0 <__ieee754_rem_pio2f+0x134>
 80040a6:	495a      	ldr	r1, [pc, #360]	; (8004210 <__ieee754_rem_pio2f+0x264>)
 80040a8:	1e47      	subs	r7, r0, #1
 80040aa:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 80040ae:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 80040b2:	428b      	cmp	r3, r1
 80040b4:	d014      	beq.n	80040e0 <__ieee754_rem_pio2f+0x134>
 80040b6:	6022      	str	r2, [r4, #0]
 80040b8:	ed94 7a00 	vldr	s14, [r4]
 80040bc:	ee30 0a47 	vsub.f32	s0, s0, s14
 80040c0:	2e00      	cmp	r6, #0
 80040c2:	ee30 0a67 	vsub.f32	s0, s0, s15
 80040c6:	ed84 0a01 	vstr	s0, [r4, #4]
 80040ca:	da9c      	bge.n	8004006 <__ieee754_rem_pio2f+0x5a>
 80040cc:	eeb1 7a47 	vneg.f32	s14, s14
 80040d0:	eeb1 0a40 	vneg.f32	s0, s0
 80040d4:	ed84 7a00 	vstr	s14, [r4]
 80040d8:	ed84 0a01 	vstr	s0, [r4, #4]
 80040dc:	4240      	negs	r0, r0
 80040de:	e792      	b.n	8004006 <__ieee754_rem_pio2f+0x5a>
 80040e0:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 80040e4:	15eb      	asrs	r3, r5, #23
 80040e6:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 80040ea:	2d08      	cmp	r5, #8
 80040ec:	dde3      	ble.n	80040b6 <__ieee754_rem_pio2f+0x10a>
 80040ee:	eddf 7a44 	vldr	s15, [pc, #272]	; 8004200 <__ieee754_rem_pio2f+0x254>
 80040f2:	eddf 5a44 	vldr	s11, [pc, #272]	; 8004204 <__ieee754_rem_pio2f+0x258>
 80040f6:	eef0 6a40 	vmov.f32	s13, s0
 80040fa:	eee6 6a27 	vfma.f32	s13, s12, s15
 80040fe:	ee30 0a66 	vsub.f32	s0, s0, s13
 8004102:	eea6 0a27 	vfma.f32	s0, s12, s15
 8004106:	eef0 7a40 	vmov.f32	s15, s0
 800410a:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800410e:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8004112:	ee15 2a90 	vmov	r2, s11
 8004116:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800411a:	1a5b      	subs	r3, r3, r1
 800411c:	2b19      	cmp	r3, #25
 800411e:	dc04      	bgt.n	800412a <__ieee754_rem_pio2f+0x17e>
 8004120:	edc4 5a00 	vstr	s11, [r4]
 8004124:	eeb0 0a66 	vmov.f32	s0, s13
 8004128:	e7c6      	b.n	80040b8 <__ieee754_rem_pio2f+0x10c>
 800412a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8004214 <__ieee754_rem_pio2f+0x268>
 800412e:	eeb0 0a66 	vmov.f32	s0, s13
 8004132:	eea6 0a25 	vfma.f32	s0, s12, s11
 8004136:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800413a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8004218 <__ieee754_rem_pio2f+0x26c>
 800413e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8004142:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8004146:	ee30 7a67 	vsub.f32	s14, s0, s15
 800414a:	ed84 7a00 	vstr	s14, [r4]
 800414e:	e7b3      	b.n	80040b8 <__ieee754_rem_pio2f+0x10c>
 8004150:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8004154:	db06      	blt.n	8004164 <__ieee754_rem_pio2f+0x1b8>
 8004156:	ee70 7a40 	vsub.f32	s15, s0, s0
 800415a:	edc0 7a01 	vstr	s15, [r0, #4]
 800415e:	edc0 7a00 	vstr	s15, [r0]
 8004162:	e733      	b.n	8003fcc <__ieee754_rem_pio2f+0x20>
 8004164:	15ea      	asrs	r2, r5, #23
 8004166:	3a86      	subs	r2, #134	; 0x86
 8004168:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800416c:	ee07 3a90 	vmov	s15, r3
 8004170:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8004174:	eddf 6a29 	vldr	s13, [pc, #164]	; 800421c <__ieee754_rem_pio2f+0x270>
 8004178:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800417c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004180:	ed8d 7a03 	vstr	s14, [sp, #12]
 8004184:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8004188:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800418c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004190:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004194:	ed8d 7a04 	vstr	s14, [sp, #16]
 8004198:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800419c:	eef5 7a40 	vcmp.f32	s15, #0.0
 80041a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041a4:	edcd 7a05 	vstr	s15, [sp, #20]
 80041a8:	d11e      	bne.n	80041e8 <__ieee754_rem_pio2f+0x23c>
 80041aa:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80041ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041b2:	bf14      	ite	ne
 80041b4:	2302      	movne	r3, #2
 80041b6:	2301      	moveq	r3, #1
 80041b8:	4919      	ldr	r1, [pc, #100]	; (8004220 <__ieee754_rem_pio2f+0x274>)
 80041ba:	9101      	str	r1, [sp, #4]
 80041bc:	2102      	movs	r1, #2
 80041be:	9100      	str	r1, [sp, #0]
 80041c0:	a803      	add	r0, sp, #12
 80041c2:	4621      	mov	r1, r4
 80041c4:	f000 f88e 	bl	80042e4 <__kernel_rem_pio2f>
 80041c8:	2e00      	cmp	r6, #0
 80041ca:	f6bf af1c 	bge.w	8004006 <__ieee754_rem_pio2f+0x5a>
 80041ce:	edd4 7a00 	vldr	s15, [r4]
 80041d2:	eef1 7a67 	vneg.f32	s15, s15
 80041d6:	edc4 7a00 	vstr	s15, [r4]
 80041da:	edd4 7a01 	vldr	s15, [r4, #4]
 80041de:	eef1 7a67 	vneg.f32	s15, s15
 80041e2:	edc4 7a01 	vstr	s15, [r4, #4]
 80041e6:	e779      	b.n	80040dc <__ieee754_rem_pio2f+0x130>
 80041e8:	2303      	movs	r3, #3
 80041ea:	e7e5      	b.n	80041b8 <__ieee754_rem_pio2f+0x20c>
 80041ec:	3f490fd8 	.word	0x3f490fd8
 80041f0:	4016cbe3 	.word	0x4016cbe3
 80041f4:	3fc90f80 	.word	0x3fc90f80
 80041f8:	3fc90fd0 	.word	0x3fc90fd0
 80041fc:	37354443 	.word	0x37354443
 8004200:	37354400 	.word	0x37354400
 8004204:	2e85a308 	.word	0x2e85a308
 8004208:	43490f80 	.word	0x43490f80
 800420c:	3f22f984 	.word	0x3f22f984
 8004210:	08004a60 	.word	0x08004a60
 8004214:	2e85a300 	.word	0x2e85a300
 8004218:	248d3132 	.word	0x248d3132
 800421c:	43800000 	.word	0x43800000
 8004220:	08004ae0 	.word	0x08004ae0

08004224 <__kernel_cosf>:
 8004224:	ee10 3a10 	vmov	r3, s0
 8004228:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800422c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8004230:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004234:	da05      	bge.n	8004242 <__kernel_cosf+0x1e>
 8004236:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800423a:	ee17 2a90 	vmov	r2, s15
 800423e:	2a00      	cmp	r2, #0
 8004240:	d03d      	beq.n	80042be <__kernel_cosf+0x9a>
 8004242:	ee60 5a00 	vmul.f32	s11, s0, s0
 8004246:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80042c4 <__kernel_cosf+0xa0>
 800424a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80042c8 <__kernel_cosf+0xa4>
 800424e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 80042cc <__kernel_cosf+0xa8>
 8004252:	4a1f      	ldr	r2, [pc, #124]	; (80042d0 <__kernel_cosf+0xac>)
 8004254:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8004258:	4293      	cmp	r3, r2
 800425a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 80042d4 <__kernel_cosf+0xb0>
 800425e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004262:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 80042d8 <__kernel_cosf+0xb4>
 8004266:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800426a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 80042dc <__kernel_cosf+0xb8>
 800426e:	eee7 7a25 	vfma.f32	s15, s14, s11
 8004272:	eeb0 7a66 	vmov.f32	s14, s13
 8004276:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800427a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800427e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8004282:	ee67 6a25 	vmul.f32	s13, s14, s11
 8004286:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800428a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800428e:	dc04      	bgt.n	800429a <__kernel_cosf+0x76>
 8004290:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004294:	ee36 0a47 	vsub.f32	s0, s12, s14
 8004298:	4770      	bx	lr
 800429a:	4a11      	ldr	r2, [pc, #68]	; (80042e0 <__kernel_cosf+0xbc>)
 800429c:	4293      	cmp	r3, r2
 800429e:	bfda      	itte	le
 80042a0:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 80042a4:	ee06 3a90 	vmovle	s13, r3
 80042a8:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 80042ac:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80042b0:	ee36 0a66 	vsub.f32	s0, s12, s13
 80042b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042b8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80042bc:	4770      	bx	lr
 80042be:	eeb0 0a46 	vmov.f32	s0, s12
 80042c2:	4770      	bx	lr
 80042c4:	ad47d74e 	.word	0xad47d74e
 80042c8:	310f74f6 	.word	0x310f74f6
 80042cc:	3d2aaaab 	.word	0x3d2aaaab
 80042d0:	3e999999 	.word	0x3e999999
 80042d4:	b493f27c 	.word	0xb493f27c
 80042d8:	37d00d01 	.word	0x37d00d01
 80042dc:	bab60b61 	.word	0xbab60b61
 80042e0:	3f480000 	.word	0x3f480000

080042e4 <__kernel_rem_pio2f>:
 80042e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042e8:	ed2d 8b04 	vpush	{d8-d9}
 80042ec:	b0d9      	sub	sp, #356	; 0x164
 80042ee:	4688      	mov	r8, r1
 80042f0:	9002      	str	r0, [sp, #8]
 80042f2:	49bb      	ldr	r1, [pc, #748]	; (80045e0 <__kernel_rem_pio2f+0x2fc>)
 80042f4:	9866      	ldr	r0, [sp, #408]	; 0x198
 80042f6:	9301      	str	r3, [sp, #4]
 80042f8:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 80042fc:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8004300:	1e59      	subs	r1, r3, #1
 8004302:	1d13      	adds	r3, r2, #4
 8004304:	db27      	blt.n	8004356 <__kernel_rem_pio2f+0x72>
 8004306:	f1b2 0b03 	subs.w	fp, r2, #3
 800430a:	bf48      	it	mi
 800430c:	f102 0b04 	addmi.w	fp, r2, #4
 8004310:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8004314:	1c45      	adds	r5, r0, #1
 8004316:	00ec      	lsls	r4, r5, #3
 8004318:	1a47      	subs	r7, r0, r1
 800431a:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 80045f0 <__kernel_rem_pio2f+0x30c>
 800431e:	9403      	str	r4, [sp, #12]
 8004320:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8004324:	eb0a 0c01 	add.w	ip, sl, r1
 8004328:	ae1c      	add	r6, sp, #112	; 0x70
 800432a:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800432e:	2400      	movs	r4, #0
 8004330:	4564      	cmp	r4, ip
 8004332:	dd12      	ble.n	800435a <__kernel_rem_pio2f+0x76>
 8004334:	9b01      	ldr	r3, [sp, #4]
 8004336:	ac1c      	add	r4, sp, #112	; 0x70
 8004338:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800433c:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8004340:	f04f 0c00 	mov.w	ip, #0
 8004344:	45d4      	cmp	ip, sl
 8004346:	dc27      	bgt.n	8004398 <__kernel_rem_pio2f+0xb4>
 8004348:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800434c:	eddf 7aa8 	vldr	s15, [pc, #672]	; 80045f0 <__kernel_rem_pio2f+0x30c>
 8004350:	4627      	mov	r7, r4
 8004352:	2600      	movs	r6, #0
 8004354:	e016      	b.n	8004384 <__kernel_rem_pio2f+0xa0>
 8004356:	2000      	movs	r0, #0
 8004358:	e7dc      	b.n	8004314 <__kernel_rem_pio2f+0x30>
 800435a:	42e7      	cmn	r7, r4
 800435c:	bf5d      	ittte	pl
 800435e:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8004362:	ee07 3a90 	vmovpl	s15, r3
 8004366:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800436a:	eef0 7a47 	vmovmi.f32	s15, s14
 800436e:	ece6 7a01 	vstmia	r6!, {s15}
 8004372:	3401      	adds	r4, #1
 8004374:	e7dc      	b.n	8004330 <__kernel_rem_pio2f+0x4c>
 8004376:	ecf9 6a01 	vldmia	r9!, {s13}
 800437a:	ed97 7a00 	vldr	s14, [r7]
 800437e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004382:	3601      	adds	r6, #1
 8004384:	428e      	cmp	r6, r1
 8004386:	f1a7 0704 	sub.w	r7, r7, #4
 800438a:	ddf4      	ble.n	8004376 <__kernel_rem_pio2f+0x92>
 800438c:	eceb 7a01 	vstmia	fp!, {s15}
 8004390:	f10c 0c01 	add.w	ip, ip, #1
 8004394:	3404      	adds	r4, #4
 8004396:	e7d5      	b.n	8004344 <__kernel_rem_pio2f+0x60>
 8004398:	ab08      	add	r3, sp, #32
 800439a:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800439e:	eddf 8a93 	vldr	s17, [pc, #588]	; 80045ec <__kernel_rem_pio2f+0x308>
 80043a2:	ed9f 9a91 	vldr	s18, [pc, #580]	; 80045e8 <__kernel_rem_pio2f+0x304>
 80043a6:	9304      	str	r3, [sp, #16]
 80043a8:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 80043ac:	4656      	mov	r6, sl
 80043ae:	00b3      	lsls	r3, r6, #2
 80043b0:	9305      	str	r3, [sp, #20]
 80043b2:	ab58      	add	r3, sp, #352	; 0x160
 80043b4:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80043b8:	ac08      	add	r4, sp, #32
 80043ba:	ab44      	add	r3, sp, #272	; 0x110
 80043bc:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 80043c0:	46a4      	mov	ip, r4
 80043c2:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 80043c6:	4637      	mov	r7, r6
 80043c8:	2f00      	cmp	r7, #0
 80043ca:	f1a0 0004 	sub.w	r0, r0, #4
 80043ce:	dc4f      	bgt.n	8004470 <__kernel_rem_pio2f+0x18c>
 80043d0:	4628      	mov	r0, r5
 80043d2:	e9cd 1206 	strd	r1, r2, [sp, #24]
 80043d6:	f000 fa8d 	bl	80048f4 <scalbnf>
 80043da:	eeb0 8a40 	vmov.f32	s16, s0
 80043de:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 80043e2:	ee28 0a00 	vmul.f32	s0, s16, s0
 80043e6:	f000 fa43 	bl	8004870 <floorf>
 80043ea:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 80043ee:	eea0 8a67 	vfms.f32	s16, s0, s15
 80043f2:	2d00      	cmp	r5, #0
 80043f4:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80043f8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80043fc:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8004400:	ee17 9a90 	vmov	r9, s15
 8004404:	ee38 8a40 	vsub.f32	s16, s16, s0
 8004408:	dd44      	ble.n	8004494 <__kernel_rem_pio2f+0x1b0>
 800440a:	f106 3cff 	add.w	ip, r6, #4294967295
 800440e:	ab08      	add	r3, sp, #32
 8004410:	f1c5 0e08 	rsb	lr, r5, #8
 8004414:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8004418:	fa47 f00e 	asr.w	r0, r7, lr
 800441c:	4481      	add	r9, r0
 800441e:	fa00 f00e 	lsl.w	r0, r0, lr
 8004422:	1a3f      	subs	r7, r7, r0
 8004424:	f1c5 0007 	rsb	r0, r5, #7
 8004428:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800442c:	4107      	asrs	r7, r0
 800442e:	2f00      	cmp	r7, #0
 8004430:	dd3f      	ble.n	80044b2 <__kernel_rem_pio2f+0x1ce>
 8004432:	f04f 0e00 	mov.w	lr, #0
 8004436:	f109 0901 	add.w	r9, r9, #1
 800443a:	4673      	mov	r3, lr
 800443c:	4576      	cmp	r6, lr
 800443e:	dc6b      	bgt.n	8004518 <__kernel_rem_pio2f+0x234>
 8004440:	2d00      	cmp	r5, #0
 8004442:	dd04      	ble.n	800444e <__kernel_rem_pio2f+0x16a>
 8004444:	2d01      	cmp	r5, #1
 8004446:	d078      	beq.n	800453a <__kernel_rem_pio2f+0x256>
 8004448:	2d02      	cmp	r5, #2
 800444a:	f000 8081 	beq.w	8004550 <__kernel_rem_pio2f+0x26c>
 800444e:	2f02      	cmp	r7, #2
 8004450:	d12f      	bne.n	80044b2 <__kernel_rem_pio2f+0x1ce>
 8004452:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004456:	ee30 8a48 	vsub.f32	s16, s0, s16
 800445a:	b353      	cbz	r3, 80044b2 <__kernel_rem_pio2f+0x1ce>
 800445c:	4628      	mov	r0, r5
 800445e:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8004462:	f000 fa47 	bl	80048f4 <scalbnf>
 8004466:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800446a:	ee38 8a40 	vsub.f32	s16, s16, s0
 800446e:	e020      	b.n	80044b2 <__kernel_rem_pio2f+0x1ce>
 8004470:	ee60 7a28 	vmul.f32	s15, s0, s17
 8004474:	3f01      	subs	r7, #1
 8004476:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800447a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800447e:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8004482:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004486:	ecac 0a01 	vstmia	ip!, {s0}
 800448a:	ed90 0a00 	vldr	s0, [r0]
 800448e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004492:	e799      	b.n	80043c8 <__kernel_rem_pio2f+0xe4>
 8004494:	d105      	bne.n	80044a2 <__kernel_rem_pio2f+0x1be>
 8004496:	1e70      	subs	r0, r6, #1
 8004498:	ab08      	add	r3, sp, #32
 800449a:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800449e:	11ff      	asrs	r7, r7, #7
 80044a0:	e7c5      	b.n	800442e <__kernel_rem_pio2f+0x14a>
 80044a2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80044a6:	eeb4 8ae7 	vcmpe.f32	s16, s15
 80044aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ae:	da31      	bge.n	8004514 <__kernel_rem_pio2f+0x230>
 80044b0:	2700      	movs	r7, #0
 80044b2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80044b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044ba:	f040 809b 	bne.w	80045f4 <__kernel_rem_pio2f+0x310>
 80044be:	1e74      	subs	r4, r6, #1
 80044c0:	46a4      	mov	ip, r4
 80044c2:	2000      	movs	r0, #0
 80044c4:	45d4      	cmp	ip, sl
 80044c6:	da4a      	bge.n	800455e <__kernel_rem_pio2f+0x27a>
 80044c8:	2800      	cmp	r0, #0
 80044ca:	d07a      	beq.n	80045c2 <__kernel_rem_pio2f+0x2de>
 80044cc:	ab08      	add	r3, sp, #32
 80044ce:	3d08      	subs	r5, #8
 80044d0:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 8081 	beq.w	80045dc <__kernel_rem_pio2f+0x2f8>
 80044da:	4628      	mov	r0, r5
 80044dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80044e0:	00a5      	lsls	r5, r4, #2
 80044e2:	f000 fa07 	bl	80048f4 <scalbnf>
 80044e6:	aa44      	add	r2, sp, #272	; 0x110
 80044e8:	1d2b      	adds	r3, r5, #4
 80044ea:	ed9f 7a40 	vldr	s14, [pc, #256]	; 80045ec <__kernel_rem_pio2f+0x308>
 80044ee:	18d1      	adds	r1, r2, r3
 80044f0:	4622      	mov	r2, r4
 80044f2:	2a00      	cmp	r2, #0
 80044f4:	f280 80ae 	bge.w	8004654 <__kernel_rem_pio2f+0x370>
 80044f8:	4622      	mov	r2, r4
 80044fa:	2a00      	cmp	r2, #0
 80044fc:	f2c0 80cc 	blt.w	8004698 <__kernel_rem_pio2f+0x3b4>
 8004500:	a944      	add	r1, sp, #272	; 0x110
 8004502:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8004506:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 80045e4 <__kernel_rem_pio2f+0x300>
 800450a:	eddf 7a39 	vldr	s15, [pc, #228]	; 80045f0 <__kernel_rem_pio2f+0x30c>
 800450e:	2000      	movs	r0, #0
 8004510:	1aa1      	subs	r1, r4, r2
 8004512:	e0b6      	b.n	8004682 <__kernel_rem_pio2f+0x39e>
 8004514:	2702      	movs	r7, #2
 8004516:	e78c      	b.n	8004432 <__kernel_rem_pio2f+0x14e>
 8004518:	6820      	ldr	r0, [r4, #0]
 800451a:	b94b      	cbnz	r3, 8004530 <__kernel_rem_pio2f+0x24c>
 800451c:	b118      	cbz	r0, 8004526 <__kernel_rem_pio2f+0x242>
 800451e:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8004522:	6020      	str	r0, [r4, #0]
 8004524:	2001      	movs	r0, #1
 8004526:	f10e 0e01 	add.w	lr, lr, #1
 800452a:	3404      	adds	r4, #4
 800452c:	4603      	mov	r3, r0
 800452e:	e785      	b.n	800443c <__kernel_rem_pio2f+0x158>
 8004530:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8004534:	6020      	str	r0, [r4, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	e7f5      	b.n	8004526 <__kernel_rem_pio2f+0x242>
 800453a:	1e74      	subs	r4, r6, #1
 800453c:	a808      	add	r0, sp, #32
 800453e:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004542:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8004546:	f10d 0c20 	add.w	ip, sp, #32
 800454a:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800454e:	e77e      	b.n	800444e <__kernel_rem_pio2f+0x16a>
 8004550:	1e74      	subs	r4, r6, #1
 8004552:	a808      	add	r0, sp, #32
 8004554:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8004558:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800455c:	e7f3      	b.n	8004546 <__kernel_rem_pio2f+0x262>
 800455e:	ab08      	add	r3, sp, #32
 8004560:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8004564:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004568:	4318      	orrs	r0, r3
 800456a:	e7ab      	b.n	80044c4 <__kernel_rem_pio2f+0x1e0>
 800456c:	f10c 0c01 	add.w	ip, ip, #1
 8004570:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8004574:	2c00      	cmp	r4, #0
 8004576:	d0f9      	beq.n	800456c <__kernel_rem_pio2f+0x288>
 8004578:	9b05      	ldr	r3, [sp, #20]
 800457a:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800457e:	eb0d 0003 	add.w	r0, sp, r3
 8004582:	9b01      	ldr	r3, [sp, #4]
 8004584:	18f4      	adds	r4, r6, r3
 8004586:	ab1c      	add	r3, sp, #112	; 0x70
 8004588:	1c77      	adds	r7, r6, #1
 800458a:	384c      	subs	r0, #76	; 0x4c
 800458c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8004590:	4466      	add	r6, ip
 8004592:	42be      	cmp	r6, r7
 8004594:	f6ff af0b 	blt.w	80043ae <__kernel_rem_pio2f+0xca>
 8004598:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800459c:	f8dd e008 	ldr.w	lr, [sp, #8]
 80045a0:	ee07 3a90 	vmov	s15, r3
 80045a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a8:	f04f 0c00 	mov.w	ip, #0
 80045ac:	ece4 7a01 	vstmia	r4!, {s15}
 80045b0:	eddf 7a0f 	vldr	s15, [pc, #60]	; 80045f0 <__kernel_rem_pio2f+0x30c>
 80045b4:	46a1      	mov	r9, r4
 80045b6:	458c      	cmp	ip, r1
 80045b8:	dd07      	ble.n	80045ca <__kernel_rem_pio2f+0x2e6>
 80045ba:	ece0 7a01 	vstmia	r0!, {s15}
 80045be:	3701      	adds	r7, #1
 80045c0:	e7e7      	b.n	8004592 <__kernel_rem_pio2f+0x2ae>
 80045c2:	9804      	ldr	r0, [sp, #16]
 80045c4:	f04f 0c01 	mov.w	ip, #1
 80045c8:	e7d2      	b.n	8004570 <__kernel_rem_pio2f+0x28c>
 80045ca:	ecfe 6a01 	vldmia	lr!, {s13}
 80045ce:	ed39 7a01 	vldmdb	r9!, {s14}
 80045d2:	f10c 0c01 	add.w	ip, ip, #1
 80045d6:	eee6 7a87 	vfma.f32	s15, s13, s14
 80045da:	e7ec      	b.n	80045b6 <__kernel_rem_pio2f+0x2d2>
 80045dc:	3c01      	subs	r4, #1
 80045de:	e775      	b.n	80044cc <__kernel_rem_pio2f+0x1e8>
 80045e0:	08004e24 	.word	0x08004e24
 80045e4:	08004df8 	.word	0x08004df8
 80045e8:	43800000 	.word	0x43800000
 80045ec:	3b800000 	.word	0x3b800000
 80045f0:	00000000 	.word	0x00000000
 80045f4:	9b03      	ldr	r3, [sp, #12]
 80045f6:	eeb0 0a48 	vmov.f32	s0, s16
 80045fa:	1a98      	subs	r0, r3, r2
 80045fc:	f000 f97a 	bl	80048f4 <scalbnf>
 8004600:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 80045e8 <__kernel_rem_pio2f+0x304>
 8004604:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8004608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800460c:	db19      	blt.n	8004642 <__kernel_rem_pio2f+0x35e>
 800460e:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 80045ec <__kernel_rem_pio2f+0x308>
 8004612:	ee60 7a27 	vmul.f32	s15, s0, s15
 8004616:	aa08      	add	r2, sp, #32
 8004618:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800461c:	1c74      	adds	r4, r6, #1
 800461e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004622:	3508      	adds	r5, #8
 8004624:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8004628:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800462c:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004630:	ee10 3a10 	vmov	r3, s0
 8004634:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004638:	ee17 3a90 	vmov	r3, s15
 800463c:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8004640:	e74b      	b.n	80044da <__kernel_rem_pio2f+0x1f6>
 8004642:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8004646:	aa08      	add	r2, sp, #32
 8004648:	ee10 3a10 	vmov	r3, s0
 800464c:	4634      	mov	r4, r6
 800464e:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8004652:	e742      	b.n	80044da <__kernel_rem_pio2f+0x1f6>
 8004654:	a808      	add	r0, sp, #32
 8004656:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800465a:	9001      	str	r0, [sp, #4]
 800465c:	ee07 0a90 	vmov	s15, r0
 8004660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004664:	3a01      	subs	r2, #1
 8004666:	ee67 7a80 	vmul.f32	s15, s15, s0
 800466a:	ee20 0a07 	vmul.f32	s0, s0, s14
 800466e:	ed61 7a01 	vstmdb	r1!, {s15}
 8004672:	e73e      	b.n	80044f2 <__kernel_rem_pio2f+0x20e>
 8004674:	ecfc 6a01 	vldmia	ip!, {s13}
 8004678:	ecb6 7a01 	vldmia	r6!, {s14}
 800467c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004680:	3001      	adds	r0, #1
 8004682:	4550      	cmp	r0, sl
 8004684:	dc01      	bgt.n	800468a <__kernel_rem_pio2f+0x3a6>
 8004686:	4288      	cmp	r0, r1
 8004688:	ddf4      	ble.n	8004674 <__kernel_rem_pio2f+0x390>
 800468a:	a858      	add	r0, sp, #352	; 0x160
 800468c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8004690:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 8004694:	3a01      	subs	r2, #1
 8004696:	e730      	b.n	80044fa <__kernel_rem_pio2f+0x216>
 8004698:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800469a:	2a02      	cmp	r2, #2
 800469c:	dc09      	bgt.n	80046b2 <__kernel_rem_pio2f+0x3ce>
 800469e:	2a00      	cmp	r2, #0
 80046a0:	dc2a      	bgt.n	80046f8 <__kernel_rem_pio2f+0x414>
 80046a2:	d043      	beq.n	800472c <__kernel_rem_pio2f+0x448>
 80046a4:	f009 0007 	and.w	r0, r9, #7
 80046a8:	b059      	add	sp, #356	; 0x164
 80046aa:	ecbd 8b04 	vpop	{d8-d9}
 80046ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b2:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80046b4:	2b03      	cmp	r3, #3
 80046b6:	d1f5      	bne.n	80046a4 <__kernel_rem_pio2f+0x3c0>
 80046b8:	ab30      	add	r3, sp, #192	; 0xc0
 80046ba:	442b      	add	r3, r5
 80046bc:	461a      	mov	r2, r3
 80046be:	4619      	mov	r1, r3
 80046c0:	4620      	mov	r0, r4
 80046c2:	2800      	cmp	r0, #0
 80046c4:	f1a1 0104 	sub.w	r1, r1, #4
 80046c8:	dc51      	bgt.n	800476e <__kernel_rem_pio2f+0x48a>
 80046ca:	4621      	mov	r1, r4
 80046cc:	2901      	cmp	r1, #1
 80046ce:	f1a2 0204 	sub.w	r2, r2, #4
 80046d2:	dc5c      	bgt.n	800478e <__kernel_rem_pio2f+0x4aa>
 80046d4:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 80045f0 <__kernel_rem_pio2f+0x30c>
 80046d8:	3304      	adds	r3, #4
 80046da:	2c01      	cmp	r4, #1
 80046dc:	dc67      	bgt.n	80047ae <__kernel_rem_pio2f+0x4ca>
 80046de:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 80046e2:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 80046e6:	2f00      	cmp	r7, #0
 80046e8:	d167      	bne.n	80047ba <__kernel_rem_pio2f+0x4d6>
 80046ea:	edc8 6a00 	vstr	s13, [r8]
 80046ee:	ed88 7a01 	vstr	s14, [r8, #4]
 80046f2:	edc8 7a02 	vstr	s15, [r8, #8]
 80046f6:	e7d5      	b.n	80046a4 <__kernel_rem_pio2f+0x3c0>
 80046f8:	aa30      	add	r2, sp, #192	; 0xc0
 80046fa:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 80045f0 <__kernel_rem_pio2f+0x30c>
 80046fe:	4413      	add	r3, r2
 8004700:	4622      	mov	r2, r4
 8004702:	2a00      	cmp	r2, #0
 8004704:	da24      	bge.n	8004750 <__kernel_rem_pio2f+0x46c>
 8004706:	b34f      	cbz	r7, 800475c <__kernel_rem_pio2f+0x478>
 8004708:	eef1 7a47 	vneg.f32	s15, s14
 800470c:	edc8 7a00 	vstr	s15, [r8]
 8004710:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8004714:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004718:	aa31      	add	r2, sp, #196	; 0xc4
 800471a:	2301      	movs	r3, #1
 800471c:	429c      	cmp	r4, r3
 800471e:	da20      	bge.n	8004762 <__kernel_rem_pio2f+0x47e>
 8004720:	b10f      	cbz	r7, 8004726 <__kernel_rem_pio2f+0x442>
 8004722:	eef1 7a67 	vneg.f32	s15, s15
 8004726:	edc8 7a01 	vstr	s15, [r8, #4]
 800472a:	e7bb      	b.n	80046a4 <__kernel_rem_pio2f+0x3c0>
 800472c:	aa30      	add	r2, sp, #192	; 0xc0
 800472e:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 80045f0 <__kernel_rem_pio2f+0x30c>
 8004732:	4413      	add	r3, r2
 8004734:	2c00      	cmp	r4, #0
 8004736:	da05      	bge.n	8004744 <__kernel_rem_pio2f+0x460>
 8004738:	b10f      	cbz	r7, 800473e <__kernel_rem_pio2f+0x45a>
 800473a:	eef1 7a67 	vneg.f32	s15, s15
 800473e:	edc8 7a00 	vstr	s15, [r8]
 8004742:	e7af      	b.n	80046a4 <__kernel_rem_pio2f+0x3c0>
 8004744:	ed33 7a01 	vldmdb	r3!, {s14}
 8004748:	3c01      	subs	r4, #1
 800474a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800474e:	e7f1      	b.n	8004734 <__kernel_rem_pio2f+0x450>
 8004750:	ed73 7a01 	vldmdb	r3!, {s15}
 8004754:	3a01      	subs	r2, #1
 8004756:	ee37 7a27 	vadd.f32	s14, s14, s15
 800475a:	e7d2      	b.n	8004702 <__kernel_rem_pio2f+0x41e>
 800475c:	eef0 7a47 	vmov.f32	s15, s14
 8004760:	e7d4      	b.n	800470c <__kernel_rem_pio2f+0x428>
 8004762:	ecb2 7a01 	vldmia	r2!, {s14}
 8004766:	3301      	adds	r3, #1
 8004768:	ee77 7a87 	vadd.f32	s15, s15, s14
 800476c:	e7d6      	b.n	800471c <__kernel_rem_pio2f+0x438>
 800476e:	edd1 7a00 	vldr	s15, [r1]
 8004772:	edd1 6a01 	vldr	s13, [r1, #4]
 8004776:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800477a:	3801      	subs	r0, #1
 800477c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004780:	ed81 7a00 	vstr	s14, [r1]
 8004784:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004788:	edc1 7a01 	vstr	s15, [r1, #4]
 800478c:	e799      	b.n	80046c2 <__kernel_rem_pio2f+0x3de>
 800478e:	edd2 7a00 	vldr	s15, [r2]
 8004792:	edd2 6a01 	vldr	s13, [r2, #4]
 8004796:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800479a:	3901      	subs	r1, #1
 800479c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80047a0:	ed82 7a00 	vstr	s14, [r2]
 80047a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047a8:	edc2 7a01 	vstr	s15, [r2, #4]
 80047ac:	e78e      	b.n	80046cc <__kernel_rem_pio2f+0x3e8>
 80047ae:	ed33 7a01 	vldmdb	r3!, {s14}
 80047b2:	3c01      	subs	r4, #1
 80047b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80047b8:	e78f      	b.n	80046da <__kernel_rem_pio2f+0x3f6>
 80047ba:	eef1 6a66 	vneg.f32	s13, s13
 80047be:	eeb1 7a47 	vneg.f32	s14, s14
 80047c2:	edc8 6a00 	vstr	s13, [r8]
 80047c6:	ed88 7a01 	vstr	s14, [r8, #4]
 80047ca:	eef1 7a67 	vneg.f32	s15, s15
 80047ce:	e790      	b.n	80046f2 <__kernel_rem_pio2f+0x40e>

080047d0 <__kernel_sinf>:
 80047d0:	ee10 3a10 	vmov	r3, s0
 80047d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80047d8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80047dc:	da04      	bge.n	80047e8 <__kernel_sinf+0x18>
 80047de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80047e2:	ee17 3a90 	vmov	r3, s15
 80047e6:	b35b      	cbz	r3, 8004840 <__kernel_sinf+0x70>
 80047e8:	ee20 7a00 	vmul.f32	s14, s0, s0
 80047ec:	eddf 7a15 	vldr	s15, [pc, #84]	; 8004844 <__kernel_sinf+0x74>
 80047f0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 8004848 <__kernel_sinf+0x78>
 80047f4:	eea7 6a27 	vfma.f32	s12, s14, s15
 80047f8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800484c <__kernel_sinf+0x7c>
 80047fc:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004800:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8004850 <__kernel_sinf+0x80>
 8004804:	eea7 6a87 	vfma.f32	s12, s15, s14
 8004808:	eddf 7a12 	vldr	s15, [pc, #72]	; 8004854 <__kernel_sinf+0x84>
 800480c:	ee60 6a07 	vmul.f32	s13, s0, s14
 8004810:	eee6 7a07 	vfma.f32	s15, s12, s14
 8004814:	b930      	cbnz	r0, 8004824 <__kernel_sinf+0x54>
 8004816:	ed9f 6a10 	vldr	s12, [pc, #64]	; 8004858 <__kernel_sinf+0x88>
 800481a:	eea7 6a27 	vfma.f32	s12, s14, s15
 800481e:	eea6 0a26 	vfma.f32	s0, s12, s13
 8004822:	4770      	bx	lr
 8004824:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 8004828:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800482c:	eee0 7a86 	vfma.f32	s15, s1, s12
 8004830:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8004834:	eddf 7a09 	vldr	s15, [pc, #36]	; 800485c <__kernel_sinf+0x8c>
 8004838:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800483c:	ee30 0a60 	vsub.f32	s0, s0, s1
 8004840:	4770      	bx	lr
 8004842:	bf00      	nop
 8004844:	2f2ec9d3 	.word	0x2f2ec9d3
 8004848:	b2d72f34 	.word	0xb2d72f34
 800484c:	3638ef1b 	.word	0x3638ef1b
 8004850:	b9500d01 	.word	0xb9500d01
 8004854:	3c088889 	.word	0x3c088889
 8004858:	be2aaaab 	.word	0xbe2aaaab
 800485c:	3e2aaaab 	.word	0x3e2aaaab

08004860 <fabsf>:
 8004860:	ee10 3a10 	vmov	r3, s0
 8004864:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004868:	ee00 3a10 	vmov	s0, r3
 800486c:	4770      	bx	lr
	...

08004870 <floorf>:
 8004870:	ee10 3a10 	vmov	r3, s0
 8004874:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004878:	3a7f      	subs	r2, #127	; 0x7f
 800487a:	2a16      	cmp	r2, #22
 800487c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004880:	dc2a      	bgt.n	80048d8 <floorf+0x68>
 8004882:	2a00      	cmp	r2, #0
 8004884:	da11      	bge.n	80048aa <floorf+0x3a>
 8004886:	eddf 7a18 	vldr	s15, [pc, #96]	; 80048e8 <floorf+0x78>
 800488a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800488e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8004892:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004896:	dd05      	ble.n	80048a4 <floorf+0x34>
 8004898:	2b00      	cmp	r3, #0
 800489a:	da23      	bge.n	80048e4 <floorf+0x74>
 800489c:	4a13      	ldr	r2, [pc, #76]	; (80048ec <floorf+0x7c>)
 800489e:	2900      	cmp	r1, #0
 80048a0:	bf18      	it	ne
 80048a2:	4613      	movne	r3, r2
 80048a4:	ee00 3a10 	vmov	s0, r3
 80048a8:	4770      	bx	lr
 80048aa:	4911      	ldr	r1, [pc, #68]	; (80048f0 <floorf+0x80>)
 80048ac:	4111      	asrs	r1, r2
 80048ae:	420b      	tst	r3, r1
 80048b0:	d0fa      	beq.n	80048a8 <floorf+0x38>
 80048b2:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80048e8 <floorf+0x78>
 80048b6:	ee30 0a27 	vadd.f32	s0, s0, s15
 80048ba:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	ddef      	ble.n	80048a4 <floorf+0x34>
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	bfbe      	ittt	lt
 80048c8:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80048cc:	fa40 f202 	asrlt.w	r2, r0, r2
 80048d0:	189b      	addlt	r3, r3, r2
 80048d2:	ea23 0301 	bic.w	r3, r3, r1
 80048d6:	e7e5      	b.n	80048a4 <floorf+0x34>
 80048d8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80048dc:	d3e4      	bcc.n	80048a8 <floorf+0x38>
 80048de:	ee30 0a00 	vadd.f32	s0, s0, s0
 80048e2:	4770      	bx	lr
 80048e4:	2300      	movs	r3, #0
 80048e6:	e7dd      	b.n	80048a4 <floorf+0x34>
 80048e8:	7149f2ca 	.word	0x7149f2ca
 80048ec:	bf800000 	.word	0xbf800000
 80048f0:	007fffff 	.word	0x007fffff

080048f4 <scalbnf>:
 80048f4:	ee10 3a10 	vmov	r3, s0
 80048f8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80048fc:	d025      	beq.n	800494a <scalbnf+0x56>
 80048fe:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004902:	d302      	bcc.n	800490a <scalbnf+0x16>
 8004904:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004908:	4770      	bx	lr
 800490a:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800490e:	d122      	bne.n	8004956 <scalbnf+0x62>
 8004910:	4b2a      	ldr	r3, [pc, #168]	; (80049bc <scalbnf+0xc8>)
 8004912:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80049c0 <scalbnf+0xcc>
 8004916:	4298      	cmp	r0, r3
 8004918:	ee20 0a27 	vmul.f32	s0, s0, s15
 800491c:	db16      	blt.n	800494c <scalbnf+0x58>
 800491e:	ee10 3a10 	vmov	r3, s0
 8004922:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004926:	3a19      	subs	r2, #25
 8004928:	4402      	add	r2, r0
 800492a:	2afe      	cmp	r2, #254	; 0xfe
 800492c:	dd15      	ble.n	800495a <scalbnf+0x66>
 800492e:	ee10 3a10 	vmov	r3, s0
 8004932:	eddf 7a24 	vldr	s15, [pc, #144]	; 80049c4 <scalbnf+0xd0>
 8004936:	eddf 6a24 	vldr	s13, [pc, #144]	; 80049c8 <scalbnf+0xd4>
 800493a:	2b00      	cmp	r3, #0
 800493c:	eeb0 7a67 	vmov.f32	s14, s15
 8004940:	bfb8      	it	lt
 8004942:	eef0 7a66 	vmovlt.f32	s15, s13
 8004946:	ee27 0a27 	vmul.f32	s0, s14, s15
 800494a:	4770      	bx	lr
 800494c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80049cc <scalbnf+0xd8>
 8004950:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004954:	4770      	bx	lr
 8004956:	0dd2      	lsrs	r2, r2, #23
 8004958:	e7e6      	b.n	8004928 <scalbnf+0x34>
 800495a:	2a00      	cmp	r2, #0
 800495c:	dd06      	ble.n	800496c <scalbnf+0x78>
 800495e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004962:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004966:	ee00 3a10 	vmov	s0, r3
 800496a:	4770      	bx	lr
 800496c:	f112 0f16 	cmn.w	r2, #22
 8004970:	da1a      	bge.n	80049a8 <scalbnf+0xb4>
 8004972:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004976:	4298      	cmp	r0, r3
 8004978:	ee10 3a10 	vmov	r3, s0
 800497c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004980:	dd0a      	ble.n	8004998 <scalbnf+0xa4>
 8004982:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80049c4 <scalbnf+0xd0>
 8004986:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80049c8 <scalbnf+0xd4>
 800498a:	eef0 7a40 	vmov.f32	s15, s0
 800498e:	2b00      	cmp	r3, #0
 8004990:	bf18      	it	ne
 8004992:	eeb0 0a47 	vmovne.f32	s0, s14
 8004996:	e7db      	b.n	8004950 <scalbnf+0x5c>
 8004998:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80049cc <scalbnf+0xd8>
 800499c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80049d0 <scalbnf+0xdc>
 80049a0:	eef0 7a40 	vmov.f32	s15, s0
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	e7f3      	b.n	8004990 <scalbnf+0x9c>
 80049a8:	3219      	adds	r2, #25
 80049aa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80049ae:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80049b2:	eddf 7a08 	vldr	s15, [pc, #32]	; 80049d4 <scalbnf+0xe0>
 80049b6:	ee07 3a10 	vmov	s14, r3
 80049ba:	e7c4      	b.n	8004946 <scalbnf+0x52>
 80049bc:	ffff3cb0 	.word	0xffff3cb0
 80049c0:	4c000000 	.word	0x4c000000
 80049c4:	7149f2ca 	.word	0x7149f2ca
 80049c8:	f149f2ca 	.word	0xf149f2ca
 80049cc:	0da24260 	.word	0x0da24260
 80049d0:	8da24260 	.word	0x8da24260
 80049d4:	33000000 	.word	0x33000000

080049d8 <__libc_init_array>:
 80049d8:	b570      	push	{r4, r5, r6, lr}
 80049da:	4d0d      	ldr	r5, [pc, #52]	; (8004a10 <__libc_init_array+0x38>)
 80049dc:	4c0d      	ldr	r4, [pc, #52]	; (8004a14 <__libc_init_array+0x3c>)
 80049de:	1b64      	subs	r4, r4, r5
 80049e0:	10a4      	asrs	r4, r4, #2
 80049e2:	2600      	movs	r6, #0
 80049e4:	42a6      	cmp	r6, r4
 80049e6:	d109      	bne.n	80049fc <__libc_init_array+0x24>
 80049e8:	4d0b      	ldr	r5, [pc, #44]	; (8004a18 <__libc_init_array+0x40>)
 80049ea:	4c0c      	ldr	r4, [pc, #48]	; (8004a1c <__libc_init_array+0x44>)
 80049ec:	f000 f820 	bl	8004a30 <_init>
 80049f0:	1b64      	subs	r4, r4, r5
 80049f2:	10a4      	asrs	r4, r4, #2
 80049f4:	2600      	movs	r6, #0
 80049f6:	42a6      	cmp	r6, r4
 80049f8:	d105      	bne.n	8004a06 <__libc_init_array+0x2e>
 80049fa:	bd70      	pop	{r4, r5, r6, pc}
 80049fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a00:	4798      	blx	r3
 8004a02:	3601      	adds	r6, #1
 8004a04:	e7ee      	b.n	80049e4 <__libc_init_array+0xc>
 8004a06:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0a:	4798      	blx	r3
 8004a0c:	3601      	adds	r6, #1
 8004a0e:	e7f2      	b.n	80049f6 <__libc_init_array+0x1e>
 8004a10:	08004e38 	.word	0x08004e38
 8004a14:	08004e38 	.word	0x08004e38
 8004a18:	08004e38 	.word	0x08004e38
 8004a1c:	08004e3c 	.word	0x08004e3c

08004a20 <memset>:
 8004a20:	4402      	add	r2, r0
 8004a22:	4603      	mov	r3, r0
 8004a24:	4293      	cmp	r3, r2
 8004a26:	d100      	bne.n	8004a2a <memset+0xa>
 8004a28:	4770      	bx	lr
 8004a2a:	f803 1b01 	strb.w	r1, [r3], #1
 8004a2e:	e7f9      	b.n	8004a24 <memset+0x4>

08004a30 <_init>:
 8004a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a32:	bf00      	nop
 8004a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a36:	bc08      	pop	{r3}
 8004a38:	469e      	mov	lr, r3
 8004a3a:	4770      	bx	lr

08004a3c <_fini>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	bf00      	nop
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr
